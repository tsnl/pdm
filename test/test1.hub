#
# External:
#

mod basic {
    link "./basic.c" {
        alloc (size U64) -> U8^ from "./basic.c";
        puts (s String) -> U32  from "./basic.c";
    };
};
mod print {
    link "./print.c" {
        string (s String) -> Unit   from "print_string";
        s32 (s S32) -> Unit         from "print_s32";
        f32 (f F32) -> Unit         from "print_f32";
        line () -> Unit             from "print_line";
    };
};

#
# Fibonacci implementation(s):
#

mod fibonaccis {
    def fib (n S32) -> S32 {
        fib_iter(n, 0, 0, 0)
    };
    def fib_iter(n S32, i S32, at_im1 S32, at_im2 S32) -> S32 {
        if (n < 0) then {
            -1
        } else if (n == 0) then {
            0
        } else if (n == 1) then {
            1
        } else if (i == n) then {
            at_im1 + at_im2
        } else {
            fib_iter(
                n,
                i+1,
                at_im2,
                at_im1 + at_im2
            )
        }
    };
    def print_fibonacci_table_until (n S32, ascend_not_descend U1) -> Unit {
        let result S32 = fib(n);
        if (n != 0) then {
            # if printing in ascending order, then print all prior fibonaccis
            # before fib(n):
            if (ascend_not_descend) then {
                print_fibonacci_table_until(n-1, U1(1));
            };

            # printing fib(n) on one line
            print:string("fibonacci(\0");
            print:s32(n);
            print:string(") = \0");
            print:s32(fib(n));
            print:line();

            # if printing in descending order, then pring all prior fibonaccis
            # after fib(n)
            if (not ascend_not_descend) then {
                print_fibonacci_table_until(n-1, U1(0));
            };
        };
    };
};


mod test {
    def test_1 () -> S32 {
        let n S32 = 40;
        print:string("FIBONACCI PRINTER until \0");
        print:s32(n);
        print:line();

        fibonaccis:print_fibonacci_table_until(n, U1(1));
        0
    };
};