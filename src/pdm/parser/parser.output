Terminals unused in grammar

    "<__42__>"
    "match"
    "with"
    "lambda"
    "typeclass"
    "^"
    "&"
    "!"
    "EOS"
    "<null>"


Grammar

    0 $accept: script $end

    1 script: script_head script_body

    2 script_head: %empty
    3            | script_head script_head_stmt ";"

    4 script_head_stmt: import_stmt
    5                 | extern_stmt

    6 script_body: %empty
    7            | script_body script_body_stmt ";"

    8 script_body_stmt: top_mod_stmt

    9 top_mod_stmt: "module" "<TypeId>" "{" mod_content "}"

   10 sub_mod_stmt: "sub" "<TypeId>" "{" mod_content "}"
   11             | "sub" "<TypeId>" tpattern_seq "{" mod_content "}"

   12 mod_content: mod_content_stmt ";"
   13            | mod_content mod_content_stmt ";"

   14 mod_content_stmt: mod_val_stmt
   15                 | mod_type_stmt
   16                 | mod_enum_stmt
   17                 | mod_typeclass_stmt
   18                 | sub_mod_stmt

   19 mod_val_stmt: vid "=" expr
   20             | vid tpattern_seq "=" expr
   21             | vid type_spec "from" tid stringl
   22             | vid tpattern_seq type_spec "from" tid stringl

   23 mod_type_stmt: tid "=" long_type_spec
   24              | tid tpattern_seq "=" long_type_spec

   25 mod_enum_stmt: tid enum_field_pl
   26              | tid tpattern_seq enum_field_pl

   27 enum_field_pl: "|" unprefixed_enum_field_pl

   28 unprefixed_enum_field_pl: enum_field
   29                         | unprefixed_enum_field_pl "|" enum_field

   30 enum_field: tid
   31           | tid type_spec

   32 mod_typeclass_stmt: tid ":-" "<" tid class_spec ">" "{" type_query_exp_sl "}"
   33                   | tid tpattern_seq ":-" "<" tid class_spec ">" "{" type_query_exp_sl "}"

   34 import_stmt: "import" tid "from" stringl "type" stringl

   35 extern_stmt: "extern" tid "from" paren_exp

   36 chain_prefix_stmt: const_stmt
   37                  | val_stmt
   38                  | var_stmt
   39                  | set_stmt
   40                  | discard_stmt

   41 const_stmt: "const" lpattern "=" expr

   42 val_stmt: "val" lpattern "=" expr

   43 var_stmt: "var" lpattern "=" expr

   44 set_stmt: "set" expr "=" expr

   45 discard_stmt: "discard" expr

   46 tid: "<TypeId>"

   47 vid: "<val_id>"

   48 floatl: "4.2"

   49 stringl: "'sq-string-literal'"
   50        | "\"dq-string-literal\""

   51 mod_prefix: tid ":"
   52           | mod_prefix vid ":"

   53 expr: binary_exp

   54 long_exp: expr

   55 expr_cl2: expr "," expr
   56         | expr_cl2 "," expr

   57 type_query_exp_sl: type_query_exp ";"
   58                  | type_query_exp_sl type_query_exp ";"

   59 bracketed_exp: paren_exp
   60              | vtupleExpr
   61              | vstructExpr
   62              | chain_exp

   63 paren_exp: "(" long_exp ")"

   64 vtupleExpr: "(" ")"
   65           | "(" expr "," ")"
   66           | "(" expr_cl2 ")"

   67 vstructExpr: "{" struct_exp_field_cl "}"

   68 primary_exp: bracketed_exp
   69            | vid
   70            | int_expr
   71            | floatl
   72            | stringls
   73            | if_exp
   74            | lambda_exp

   75 int_expr: "42"
   76         | "0x2a"
   77         | "42u"
   78         | "0x2Au"

   79 stringls: "'sq-string-literal'"
   80         | "\"dq-string-literal\""
   81         | stringls "'sq-string-literal'"
   82         | stringls "\"dq-string-literal\""

   83 if_exp: "if" bracketed_exp "then" bracketed_exp
   84       | "if" bracketed_exp "then" bracketed_exp "else" primary_exp

   85 chain_exp: "{" expr "}"
   86          | "{" chain_prefix "}"
   87          | "{" chain_prefix expr "}"

   88 chain_prefix: chain_prefix_stmt ";"
   89             | chain_prefix chain_prefix_stmt ";"

   90 lambda_exp: "fn" vpattern "->" bracketed_exp
   91           | "fn" vpattern "->" type_spec bracketed_exp

   92 postfix_exp: primary_exp
   93            | tcall_exp
   94            | vcall_exp
   95            | dot_name_exp
   96            | dot_index_exp

   97 tcall_exp: postfix_exp "[" targ_cl "]"

   98 vcall_exp: postfix_exp "(" ")"
   99          | postfix_exp "(" varg_cl ")"

  100 dot_name_exp: postfix_exp "." "<val_id>"
  101             | type_spec "." "<TypeId>"
  102             | type_spec "." "<TypeId>" "using" paren_exp
  103             | mod_prefix "<val_id>"

  104 dot_index_exp: postfix_exp "." int_expr
  105              | postfix_exp "." bracketed_exp

  106 unary_exp: postfix_exp
  107          | unary_op unary_exp

  108 unary_op: "+"
  109         | "-"
  110         | "not"

  111 binary_exp: or_binary_exp

  112 mul_binary_op: "*"
  113              | "/"
  114              | "%"

  115 mul_binary_exp: unary_exp
  116               | mul_binary_exp mul_binary_op unary_exp

  117 add_binary_op: "+"
  118              | "-"

  119 add_binary_exp: mul_binary_exp
  120               | add_binary_exp add_binary_op mul_binary_exp

  121 cmp_binary_op: "<"
  122              | "<="
  123              | ">"
  124              | ">="

  125 cmp_binary_exp: add_binary_exp
  126               | cmp_binary_exp cmp_binary_op add_binary_exp

  127 eq_binary_op: "=="
  128             | "!="

  129 eq_binary_exp: cmp_binary_exp
  130              | eq_binary_exp eq_binary_op cmp_binary_exp

  131 and_binary_exp: eq_binary_exp
  132               | and_binary_exp "and" eq_binary_exp

  133 xor_binary_exp: and_binary_exp
  134               | xor_binary_exp "xor" and_binary_exp

  135 or_binary_exp: xor_binary_exp
  136              | or_binary_exp "or" xor_binary_exp

  137 type_query_exp: type_spec type_query_op long_type_spec

  138 type_query_op: ":<"
  139              | ">:"
  140              | "::"

  141 type_spec: unary_type_spec

  142 type_spec_cl2: type_spec "," type_spec
  143              | type_spec_cl2 "," type_spec

  144 struct_type_spec_field: vid type_spec

  145 struct_type_spec_field_cl: struct_type_spec_field
  146                          | struct_type_spec_field_cl "," struct_type_spec_field

  147 primary_type_spec: tid
  148                  | tuple_type_spec
  149                  | mod_prefix_tid
  150                  | fn_type_spec

  151 tuple_type_spec: "(" type_spec "," ")"
  152                | "(" type_spec_cl2 ")"

  153 mod_prefix_tid: mod_prefix tid

  154 fn_type_spec: "Fn" vpattern primary_type_spec

  155 postfix_type_spec: primary_type_spec
  156                  | tcall_type_spec

  157 tcall_type_spec: postfix_type_spec "[" targ_cl "]"

  158 unary_type_spec: postfix_type_spec

  159 long_type_spec: unary_type_spec
  160               | struct_type_spec

  161 struct_type_spec: "{" struct_type_spec_field_cl "}"

  162 targ: type_spec
  163     | expr

  164 targ_cl: targ
  165        | targ_cl "," targ

  166 varg: expr
  167     | "out" expr
  168     | "inout" expr

  169 varg_cl: varg
  170        | varg_cl "," varg

  171 class_spec: postfix_class_spec

  172 primary_class_spec: tid

  173 postfix_class_spec: primary_class_spec
  174                   | postfix_class_spec "[" targ_cl "]"

  175 struct_exp_field: vid "=" expr

  176 vpattern_field: vid type_spec
  177               | "out" vid type_spec
  178               | "inout" vid type_spec

  179 lpattern_field: vid type_spec
  180               | vid

  181 tpattern_field: vid type_spec
  182               | tid class_spec

  183 destructured_lpattern: "(" lpattern_field_cl ")"

  184 lpattern: lpattern_field
  185         | destructured_lpattern

  186 vpattern: "(" vpattern_field_cl ")"
  187         | "(" ")"

  188 tpattern: "[" tpattern_field_cl "]"

  189 vpattern_field_cl: vpattern_field
  190                  | vpattern_field_cl "," vpattern_field

  191 lpattern_field_cl: lpattern_field
  192                  | lpattern_field_cl "," lpattern_field

  193 tpattern_field_cl: tpattern_field
  194                  | tpattern_field_cl "," tpattern_field

  195 struct_exp_field_cl: struct_exp_field
  196                    | struct_exp_field_cl "," struct_exp_field

  197 tpattern_seq: tpattern
  198             | tpattern_seq tpattern


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    "<val_id>" <TokenInfo> (258) 47 100 103
    "<TypeId>" <TokenInfo> (259) 9 10 11 46 101 102
    "<__42__>" <TokenInfo> (260)
    "using" (261) 102
    "module" (262) 9
    "sub" (263) 10 11
    "if" (264) 83 84
    "then" (265) 83 84
    "else" (266) 84
    "match" (267)
    "with" (268)
    "import" (269) 34
    "extern" (270) 35
    "from" (271) 21 22 34 35
    "const" (272) 41
    "val" (273) 42
    "var" (274) 43
    "set" (275) 44
    "fn" (276) 90 91
    "lambda" (277)
    "Fn" (278) 154
    "type" (279) 34
    "and" (280) 132
    "xor" (281) 134
    "or" (282) 136
    "not" (283) 110
    "typeclass" (284)
    "out" (285) 167 177
    "inout" (286) 168 178
    "discard" (287) 45
    "42" <TokenInfo> (288) 75
    "0x2a" <TokenInfo> (289) 76
    "42u" <TokenInfo> (290) 77
    "0x2Au" <TokenInfo> (291) 78
    "4.2" <TokenInfo> (292) 48
    "\"dq-string-literal\"" <TokenInfo> (293) 50 80 82
    "'sq-string-literal'" <TokenInfo> (294) 49 79 81
    "." (295) 100 101 102 104 105
    ":" (296) 51 52
    "," (297) 55 56 65 142 143 146 151 165 170 190 192 194 196
    ";" (298) 3 7 12 13 57 58 88 89
    "::" (299) 140
    "(" (300) 63 64 65 66 98 99 151 152 183 186 187
    ")" (301) 63 64 65 66 98 99 151 152 183 186 187
    "[" (302) 97 157 174 188
    "]" (303) 97 157 174 188
    "{" (304) 9 10 11 32 33 67 85 86 87 161
    "}" (305) 9 10 11 32 33 67 85 86 87 161
    "->" (306) 90 91
    "*" (307) 112
    "/" (308) 113
    "%" (309) 114
    "+" (310) 108 117
    "-" (311) 109 118
    "<" (312) 32 33 121
    "<=" (313) 122
    ">" (314) 32 33 123
    ">=" (315) 124
    "=" (316) 19 20 23 24 41 42 43 44 175
    "==" (317) 127
    "!=" (318) 128
    "^" (319)
    "&" (320)
    "!" (321)
    "|" (322) 27 29
    ":-" (323) 32 33
    "EOS" (324)
    ":<" (325) 138
    ">:" (326) 139
    "<null>" (327)


Nonterminals, with rules where they appear

    $accept (73)
        on left: 0
    script <pdm::ast::Script*> (74)
        on left: 1
        on right: 0
    script_head <std::vector<pdm::ast::Stmt*>> (75)
        on left: 2 3
        on right: 1 3
    script_head_stmt <pdm::ast::Stmt*> (76)
        on left: 4 5
        on right: 3
    script_body <std::vector<pdm::ast::ModStmt*>> (77)
        on left: 6 7
        on right: 1 7
    script_body_stmt <pdm::ast::ModStmt*> (78)
        on left: 8
        on right: 7
    top_mod_stmt <pdm::ast::ModStmt*> (79)
        on left: 9
        on right: 8
    sub_mod_stmt <pdm::ast::ModContentStmt*> (80)
        on left: 10 11
        on right: 18
    mod_content <std::vector<pdm::ast::ModContentStmt*>> (81)
        on left: 12 13
        on right: 9 10 11 13
    mod_content_stmt <pdm::ast::ModContentStmt*> (82)
        on left: 14 15 16 17 18
        on right: 12 13
    mod_val_stmt <pdm::ast::ModContentStmt*> (83)
        on left: 19 20 21 22
        on right: 14
    mod_type_stmt <pdm::ast::ModContentStmt*> (84)
        on left: 23 24
        on right: 15
    mod_enum_stmt <pdm::ast::ModContentStmt*> (85)
        on left: 25 26
        on right: 16
    enum_field_pl <std::vector<pdm::ast::ModEnumStmt::Field*>> (86)
        on left: 27
        on right: 25 26
    unprefixed_enum_field_pl <std::vector<pdm::ast::ModEnumStmt::Field*>> (87)
        on left: 28 29
        on right: 27 29
    enum_field <pdm::ast::ModEnumStmt::Field*> (88)
        on left: 30 31
        on right: 28 29
    mod_typeclass_stmt <pdm::ast::ModContentStmt*> (89)
        on left: 32 33
        on right: 17
    import_stmt <pdm::ast::Stmt*> (90)
        on left: 34
        on right: 4
    extern_stmt <pdm::ast::Stmt*> (91)
        on left: 35
        on right: 5
    chain_prefix_stmt <pdm::ast::Stmt*> (92)
        on left: 36 37 38 39 40
        on right: 88 89
    const_stmt <pdm::ast::Stmt*> (93)
        on left: 41
        on right: 36
    val_stmt <pdm::ast::Stmt*> (94)
        on left: 42
        on right: 37
    var_stmt <pdm::ast::Stmt*> (95)
        on left: 43
        on right: 38
    set_stmt <pdm::ast::Stmt*> (96)
        on left: 44
        on right: 39
    discard_stmt <pdm::ast::Stmt*> (97)
        on left: 45
        on right: 40
    tid <TokenInfo> (98)
        on left: 46
        on right: 21 22 23 24 25 26 30 31 32 33 34 35 51 147 153 172 182
    vid <TokenInfo> (99)
        on left: 47
        on right: 19 20 21 22 52 69 144 175 176 177 178 179 180 181
    floatl <TokenInfo> (100)
        on left: 48
        on right: 71
    stringl <TokenInfo> (101)
        on left: 49 50
        on right: 21 22 34
    mod_prefix <std::vector<pdm::intern::String>> (102)
        on left: 51 52
        on right: 52 103 153
    expr <pdm::ast::Exp*> (103)
        on left: 53
        on right: 19 20 41 42 43 44 45 54 55 56 65 85 87 163 166 167 168 175
    long_exp <pdm::ast::Exp*> (104)
        on left: 54
        on right: 63
    expr_cl2 <std::vector<pdm::ast::Exp*>> (105)
        on left: 55 56
        on right: 56 66
    type_query_exp_sl <std::vector<pdm::ast::TypeQueryExp*>> (106)
        on left: 57 58
        on right: 32 33 58
    bracketed_exp <pdm::ast::Exp*> (107)
        on left: 59 60 61 62
        on right: 68 83 84 90 91 105
    paren_exp <pdm::ast::Exp*> (108)
        on left: 63
        on right: 35 59 102
    vtupleExpr <pdm::ast::Exp*> (109)
        on left: 64 65 66
        on right: 60
    vstructExpr <pdm::ast::Exp*> (110)
        on left: 67
        on right: 61
    primary_exp <pdm::ast::Exp*> (111)
        on left: 68 69 70 71 72 73 74
        on right: 84 92
    int_expr <pdm::ast::Exp*> (112)
        on left: 75 76 77 78
        on right: 70 104
    stringls <std::vector<pdm::ast::StringExp::Piece>> (113)
        on left: 79 80 81 82
        on right: 72 81 82
    if_exp <pdm::ast::Exp*> (114)
        on left: 83 84
        on right: 73
    chain_exp <pdm::ast::Exp*> (115)
        on left: 85 86 87
        on right: 62
    chain_prefix <std::vector<pdm::ast::Stmt*>> (116)
        on left: 88 89
        on right: 86 87 89
    lambda_exp <pdm::ast::Exp*> (117)
        on left: 90 91
        on right: 74
    postfix_exp <pdm::ast::Exp*> (118)
        on left: 92 93 94 95 96
        on right: 97 98 99 100 104 105 106
    tcall_exp <pdm::ast::Exp*> (119)
        on left: 97
        on right: 93
    vcall_exp <pdm::ast::Exp*> (120)
        on left: 98 99
        on right: 94
    dot_name_exp <pdm::ast::Exp*> (121)
        on left: 100 101 102 103
        on right: 95
    dot_index_exp <pdm::ast::Exp*> (122)
        on left: 104 105
        on right: 96
    unary_exp <pdm::ast::Exp*> (123)
        on left: 106 107
        on right: 107 115 116
    unary_op <pdm::ast::UnaryOperator> (124)
        on left: 108 109 110
        on right: 107
    binary_exp <pdm::ast::Exp*> (125)
        on left: 111
        on right: 53
    mul_binary_op <pdm::ast::BinaryOperator> (126)
        on left: 112 113 114
        on right: 116
    mul_binary_exp <pdm::ast::Exp*> (127)
        on left: 115 116
        on right: 116 119 120
    add_binary_op <pdm::ast::BinaryOperator> (128)
        on left: 117 118
        on right: 120
    add_binary_exp <pdm::ast::Exp*> (129)
        on left: 119 120
        on right: 120 125 126
    cmp_binary_op <pdm::ast::BinaryOperator> (130)
        on left: 121 122 123 124
        on right: 126
    cmp_binary_exp <pdm::ast::Exp*> (131)
        on left: 125 126
        on right: 126 129 130
    eq_binary_op <pdm::ast::BinaryOperator> (132)
        on left: 127 128
        on right: 130
    eq_binary_exp <pdm::ast::Exp*> (133)
        on left: 129 130
        on right: 130 131 132
    and_binary_exp <pdm::ast::Exp*> (134)
        on left: 131 132
        on right: 132 133 134
    xor_binary_exp <pdm::ast::Exp*> (135)
        on left: 133 134
        on right: 134 135 136
    or_binary_exp <pdm::ast::Exp*> (136)
        on left: 135 136
        on right: 111 136
    type_query_exp <pdm::ast::TypeQueryExp*> (137)
        on left: 137
        on right: 57 58
    type_query_op <pdm::ast::TypeQueryKind> (138)
        on left: 138 139 140
        on right: 137
    type_spec <pdm::ast::TypeSpec*> (139)
        on left: 141
        on right: 21 22 31 91 101 102 137 142 143 144 151 162 176 177 178 179 181
    type_spec_cl2 <std::vector<pdm::ast::TypeSpec*>> (140)
        on left: 142 143
        on right: 143 152
    struct_type_spec_field <pdm::ast::StructTypeSpec::Field*> (141)
        on left: 144
        on right: 145 146
    struct_type_spec_field_cl <std::vector<pdm::ast::StructTypeSpec::Field*>> (142)
        on left: 145 146
        on right: 146 161
    primary_type_spec <pdm::ast::TypeSpec*> (143)
        on left: 147 148 149 150
        on right: 154 155
    tuple_type_spec <pdm::ast::TypeSpec*> (144)
        on left: 151 152
        on right: 148
    mod_prefix_tid <pdm::ast::TypeSpec*> (145)
        on left: 153
        on right: 149
    fn_type_spec <pdm::ast::TypeSpec*> (146)
        on left: 154
        on right: 150
    postfix_type_spec <pdm::ast::TypeSpec*> (147)
        on left: 155 156
        on right: 157 158
    tcall_type_spec <pdm::ast::TypeSpec*> (148)
        on left: 157
        on right: 156
    unary_type_spec <pdm::ast::TypeSpec*> (149)
        on left: 158
        on right: 141 159
    long_type_spec <pdm::ast::TypeSpec*> (150)
        on left: 159 160
        on right: 23 24 137
    struct_type_spec <pdm::ast::TypeSpec*> (151)
        on left: 161
        on right: 160
    targ <pdm::ast::TArg*> (152)
        on left: 162 163
        on right: 164 165
    targ_cl <std::vector<pdm::ast::TArg*>> (153)
        on left: 164 165
        on right: 97 157 165 174
    varg <pdm::ast::VArg*> (154)
        on left: 166 167 168
        on right: 169 170
    varg_cl <std::vector<pdm::ast::VArg*>> (155)
        on left: 169 170
        on right: 99 170
    class_spec <pdm::ast::ClassSpec*> (156)
        on left: 171
        on right: 32 33 182
    primary_class_spec <pdm::ast::ClassSpec*> (157)
        on left: 172
        on right: 173
    postfix_class_spec <pdm::ast::ClassSpec*> (158)
        on left: 173 174
        on right: 171 174
    struct_exp_field <pdm::ast::StructExp::Field*> (159)
        on left: 175
        on right: 195 196
    vpattern_field <pdm::ast::VPattern::Field*> (160)
        on left: 176 177 178
        on right: 189 190
    lpattern_field <pdm::ast::LPattern::Field*> (161)
        on left: 179 180
        on right: 184 191 192
    tpattern_field <pdm::ast::TPattern::Field*> (162)
        on left: 181 182
        on right: 193 194
    destructured_lpattern <pdm::ast::LPattern*> (163)
        on left: 183
        on right: 185
    lpattern <pdm::ast::LPattern*> (164)
        on left: 184 185
        on right: 41 42 43
    vpattern <pdm::ast::VPattern*> (165)
        on left: 186 187
        on right: 90 91 154
    tpattern <pdm::ast::TPattern*> (166)
        on left: 188
        on right: 197 198
    vpattern_field_cl <std::vector<pdm::ast::VPattern::Field*>> (167)
        on left: 189 190
        on right: 186 190
    lpattern_field_cl <std::vector<pdm::ast::LPattern::Field*>> (168)
        on left: 191 192
        on right: 183 192
    tpattern_field_cl <std::vector<pdm::ast::TPattern::Field*>> (169)
        on left: 193 194
        on right: 188 194
    struct_exp_field_cl <std::vector<pdm::ast::StructExp::Field*>> (170)
        on left: 195 196
        on right: 67 196
    tpattern_seq <std::vector<pdm::ast::TPattern*>> (171)
        on left: 197 198
        on right: 11 20 22 24 26 33 198


State 0

    0 $accept: • script $end

    $default  reduce using rule 2 (script_head)

    script       go to state 1
    script_head  go to state 2


State 1

    0 $accept: script • $end

    $end  shift, and go to state 3


State 2

    1 script: script_head • script_body
    3 script_head: script_head • script_head_stmt ";"

    "import"  shift, and go to state 4
    "extern"  shift, and go to state 5

    $default  reduce using rule 6 (script_body)

    script_head_stmt  go to state 6
    script_body       go to state 7
    import_stmt       go to state 8
    extern_stmt       go to state 9


State 3

    0 $accept: script $end •

    $default  accept


State 4

   34 import_stmt: "import" • tid "from" stringl "type" stringl

    "<TypeId>"  shift, and go to state 10

    tid  go to state 11


State 5

   35 extern_stmt: "extern" • tid "from" paren_exp

    "<TypeId>"  shift, and go to state 10

    tid  go to state 12


State 6

    3 script_head: script_head script_head_stmt • ";"

    ";"  shift, and go to state 13


State 7

    1 script: script_head script_body •
    7 script_body: script_body • script_body_stmt ";"

    "module"  shift, and go to state 14

    $default  reduce using rule 1 (script)

    script_body_stmt  go to state 15
    top_mod_stmt      go to state 16


State 8

    4 script_head_stmt: import_stmt •

    $default  reduce using rule 4 (script_head_stmt)


State 9

    5 script_head_stmt: extern_stmt •

    $default  reduce using rule 5 (script_head_stmt)


State 10

   46 tid: "<TypeId>" •

    $default  reduce using rule 46 (tid)


State 11

   34 import_stmt: "import" tid • "from" stringl "type" stringl

    "from"  shift, and go to state 17


State 12

   35 extern_stmt: "extern" tid • "from" paren_exp

    "from"  shift, and go to state 18


State 13

    3 script_head: script_head script_head_stmt ";" •

    $default  reduce using rule 3 (script_head)


State 14

    9 top_mod_stmt: "module" • "<TypeId>" "{" mod_content "}"

    "<TypeId>"  shift, and go to state 19


State 15

    7 script_body: script_body script_body_stmt • ";"

    ";"  shift, and go to state 20


State 16

    8 script_body_stmt: top_mod_stmt •

    $default  reduce using rule 8 (script_body_stmt)


State 17

   34 import_stmt: "import" tid "from" • stringl "type" stringl

    "\"dq-string-literal\""  shift, and go to state 21
    "'sq-string-literal'"    shift, and go to state 22

    stringl  go to state 23


State 18

   35 extern_stmt: "extern" tid "from" • paren_exp

    "("  shift, and go to state 24

    paren_exp  go to state 25


State 19

    9 top_mod_stmt: "module" "<TypeId>" • "{" mod_content "}"

    "{"  shift, and go to state 26


State 20

    7 script_body: script_body script_body_stmt ";" •

    $default  reduce using rule 7 (script_body)


State 21

   50 stringl: "\"dq-string-literal\"" •

    $default  reduce using rule 50 (stringl)


State 22

   49 stringl: "'sq-string-literal'" •

    $default  reduce using rule 49 (stringl)


State 23

   34 import_stmt: "import" tid "from" stringl • "type" stringl

    "type"  shift, and go to state 27


State 24

   63 paren_exp: "(" • long_exp ")"

    "<val_id>"               shift, and go to state 28
    "<TypeId>"               shift, and go to state 10
    "if"                     shift, and go to state 29
    "fn"                     shift, and go to state 30
    "Fn"                     shift, and go to state 31
    "not"                    shift, and go to state 32
    "42"                     shift, and go to state 33
    "0x2a"                   shift, and go to state 34
    "42u"                    shift, and go to state 35
    "0x2Au"                  shift, and go to state 36
    "4.2"                    shift, and go to state 37
    "\"dq-string-literal\""  shift, and go to state 38
    "'sq-string-literal'"    shift, and go to state 39
    "("                      shift, and go to state 40
    "{"                      shift, and go to state 41
    "+"                      shift, and go to state 42
    "-"                      shift, and go to state 43

    tid                go to state 44
    vid                go to state 45
    floatl             go to state 46
    mod_prefix         go to state 47
    expr               go to state 48
    long_exp           go to state 49
    bracketed_exp      go to state 50
    paren_exp          go to state 51
    vtupleExpr         go to state 52
    vstructExpr        go to state 53
    primary_exp        go to state 54
    int_expr           go to state 55
    stringls           go to state 56
    if_exp             go to state 57
    chain_exp          go to state 58
    lambda_exp         go to state 59
    postfix_exp        go to state 60
    tcall_exp          go to state 61
    vcall_exp          go to state 62
    dot_name_exp       go to state 63
    dot_index_exp      go to state 64
    unary_exp          go to state 65
    unary_op           go to state 66
    binary_exp         go to state 67
    mul_binary_exp     go to state 68
    add_binary_exp     go to state 69
    cmp_binary_exp     go to state 70
    eq_binary_exp      go to state 71
    and_binary_exp     go to state 72
    xor_binary_exp     go to state 73
    or_binary_exp      go to state 74
    type_spec          go to state 75
    primary_type_spec  go to state 76
    tuple_type_spec    go to state 77
    mod_prefix_tid     go to state 78
    fn_type_spec       go to state 79
    postfix_type_spec  go to state 80
    tcall_type_spec    go to state 81
    unary_type_spec    go to state 82


State 25

   35 extern_stmt: "extern" tid "from" paren_exp •

    $default  reduce using rule 35 (extern_stmt)


State 26

    9 top_mod_stmt: "module" "<TypeId>" "{" • mod_content "}"

    "<val_id>"  shift, and go to state 28
    "<TypeId>"  shift, and go to state 10
    "sub"       shift, and go to state 83

    sub_mod_stmt        go to state 84
    mod_content         go to state 85
    mod_content_stmt    go to state 86
    mod_val_stmt        go to state 87
    mod_type_stmt       go to state 88
    mod_enum_stmt       go to state 89
    mod_typeclass_stmt  go to state 90
    tid                 go to state 91
    vid                 go to state 92


State 27

   34 import_stmt: "import" tid "from" stringl "type" • stringl

    "\"dq-string-literal\""  shift, and go to state 21
    "'sq-string-literal'"    shift, and go to state 22

    stringl  go to state 93


State 28

   47 vid: "<val_id>" •

    $default  reduce using rule 47 (vid)


State 29

   83 if_exp: "if" • bracketed_exp "then" bracketed_exp
   84       | "if" • bracketed_exp "then" bracketed_exp "else" primary_exp

    "("  shift, and go to state 94
    "{"  shift, and go to state 41

    bracketed_exp  go to state 95
    paren_exp      go to state 51
    vtupleExpr     go to state 52
    vstructExpr    go to state 53
    chain_exp      go to state 58


State 30

   90 lambda_exp: "fn" • vpattern "->" bracketed_exp
   91           | "fn" • vpattern "->" type_spec bracketed_exp

    "("  shift, and go to state 96

    vpattern  go to state 97


State 31

  154 fn_type_spec: "Fn" • vpattern primary_type_spec

    "("  shift, and go to state 96

    vpattern  go to state 98


State 32

  110 unary_op: "not" •

    $default  reduce using rule 110 (unary_op)


State 33

   75 int_expr: "42" •

    $default  reduce using rule 75 (int_expr)


State 34

   76 int_expr: "0x2a" •

    $default  reduce using rule 76 (int_expr)


State 35

   77 int_expr: "42u" •

    $default  reduce using rule 77 (int_expr)


State 36

   78 int_expr: "0x2Au" •

    $default  reduce using rule 78 (int_expr)


State 37

   48 floatl: "4.2" •

    $default  reduce using rule 48 (floatl)


State 38

   80 stringls: "\"dq-string-literal\"" •

    $default  reduce using rule 80 (stringls)


State 39

   79 stringls: "'sq-string-literal'" •

    $default  reduce using rule 79 (stringls)


State 40

   63 paren_exp: "(" • long_exp ")"
   64 vtupleExpr: "(" • ")"
   65           | "(" • expr "," ")"
   66           | "(" • expr_cl2 ")"
  151 tuple_type_spec: "(" • type_spec "," ")"
  152                | "(" • type_spec_cl2 ")"

    "<val_id>"               shift, and go to state 28
    "<TypeId>"               shift, and go to state 10
    "if"                     shift, and go to state 29
    "fn"                     shift, and go to state 30
    "Fn"                     shift, and go to state 31
    "not"                    shift, and go to state 32
    "42"                     shift, and go to state 33
    "0x2a"                   shift, and go to state 34
    "42u"                    shift, and go to state 35
    "0x2Au"                  shift, and go to state 36
    "4.2"                    shift, and go to state 37
    "\"dq-string-literal\""  shift, and go to state 38
    "'sq-string-literal'"    shift, and go to state 39
    "("                      shift, and go to state 40
    ")"                      shift, and go to state 99
    "{"                      shift, and go to state 41
    "+"                      shift, and go to state 42
    "-"                      shift, and go to state 43

    tid                go to state 44
    vid                go to state 45
    floatl             go to state 46
    mod_prefix         go to state 47
    expr               go to state 100
    long_exp           go to state 49
    expr_cl2           go to state 101
    bracketed_exp      go to state 50
    paren_exp          go to state 51
    vtupleExpr         go to state 52
    vstructExpr        go to state 53
    primary_exp        go to state 54
    int_expr           go to state 55
    stringls           go to state 56
    if_exp             go to state 57
    chain_exp          go to state 58
    lambda_exp         go to state 59
    postfix_exp        go to state 60
    tcall_exp          go to state 61
    vcall_exp          go to state 62
    dot_name_exp       go to state 63
    dot_index_exp      go to state 64
    unary_exp          go to state 65
    unary_op           go to state 66
    binary_exp         go to state 67
    mul_binary_exp     go to state 68
    add_binary_exp     go to state 69
    cmp_binary_exp     go to state 70
    eq_binary_exp      go to state 71
    and_binary_exp     go to state 72
    xor_binary_exp     go to state 73
    or_binary_exp      go to state 74
    type_spec          go to state 102
    type_spec_cl2      go to state 103
    primary_type_spec  go to state 76
    tuple_type_spec    go to state 77
    mod_prefix_tid     go to state 78
    fn_type_spec       go to state 79
    postfix_type_spec  go to state 80
    tcall_type_spec    go to state 81
    unary_type_spec    go to state 82


State 41

   67 vstructExpr: "{" • struct_exp_field_cl "}"
   85 chain_exp: "{" • expr "}"
   86          | "{" • chain_prefix "}"
   87          | "{" • chain_prefix expr "}"

    "<val_id>"               shift, and go to state 28
    "<TypeId>"               shift, and go to state 10
    "if"                     shift, and go to state 29
    "const"                  shift, and go to state 104
    "val"                    shift, and go to state 105
    "var"                    shift, and go to state 106
    "set"                    shift, and go to state 107
    "fn"                     shift, and go to state 30
    "Fn"                     shift, and go to state 31
    "not"                    shift, and go to state 32
    "discard"                shift, and go to state 108
    "42"                     shift, and go to state 33
    "0x2a"                   shift, and go to state 34
    "42u"                    shift, and go to state 35
    "0x2Au"                  shift, and go to state 36
    "4.2"                    shift, and go to state 37
    "\"dq-string-literal\""  shift, and go to state 38
    "'sq-string-literal'"    shift, and go to state 39
    "("                      shift, and go to state 40
    "{"                      shift, and go to state 41
    "+"                      shift, and go to state 42
    "-"                      shift, and go to state 43

    chain_prefix_stmt    go to state 109
    const_stmt           go to state 110
    val_stmt             go to state 111
    var_stmt             go to state 112
    set_stmt             go to state 113
    discard_stmt         go to state 114
    tid                  go to state 44
    vid                  go to state 115
    floatl               go to state 46
    mod_prefix           go to state 47
    expr                 go to state 116
    bracketed_exp        go to state 50
    paren_exp            go to state 51
    vtupleExpr           go to state 52
    vstructExpr          go to state 53
    primary_exp          go to state 54
    int_expr             go to state 55
    stringls             go to state 56
    if_exp               go to state 57
    chain_exp            go to state 58
    chain_prefix         go to state 117
    lambda_exp           go to state 59
    postfix_exp          go to state 60
    tcall_exp            go to state 61
    vcall_exp            go to state 62
    dot_name_exp         go to state 63
    dot_index_exp        go to state 64
    unary_exp            go to state 65
    unary_op             go to state 66
    binary_exp           go to state 67
    mul_binary_exp       go to state 68
    add_binary_exp       go to state 69
    cmp_binary_exp       go to state 70
    eq_binary_exp        go to state 71
    and_binary_exp       go to state 72
    xor_binary_exp       go to state 73
    or_binary_exp        go to state 74
    type_spec            go to state 75
    primary_type_spec    go to state 76
    tuple_type_spec      go to state 77
    mod_prefix_tid       go to state 78
    fn_type_spec         go to state 79
    postfix_type_spec    go to state 80
    tcall_type_spec      go to state 81
    unary_type_spec      go to state 82
    struct_exp_field     go to state 118
    struct_exp_field_cl  go to state 119


State 42

  108 unary_op: "+" •

    $default  reduce using rule 108 (unary_op)


State 43

  109 unary_op: "-" •

    $default  reduce using rule 109 (unary_op)


State 44

   51 mod_prefix: tid • ":"
  147 primary_type_spec: tid •

    ":"  shift, and go to state 120

    $default  reduce using rule 147 (primary_type_spec)


State 45

   69 primary_exp: vid •

    $default  reduce using rule 69 (primary_exp)


State 46

   71 primary_exp: floatl •

    $default  reduce using rule 71 (primary_exp)


State 47

   52 mod_prefix: mod_prefix • vid ":"
  103 dot_name_exp: mod_prefix • "<val_id>"
  153 mod_prefix_tid: mod_prefix • tid

    "<val_id>"  shift, and go to state 121
    "<TypeId>"  shift, and go to state 10

    tid  go to state 122
    vid  go to state 123


State 48

   54 long_exp: expr •

    $default  reduce using rule 54 (long_exp)


State 49

   63 paren_exp: "(" long_exp • ")"

    ")"  shift, and go to state 124


State 50

   68 primary_exp: bracketed_exp •

    $default  reduce using rule 68 (primary_exp)


State 51

   59 bracketed_exp: paren_exp •

    $default  reduce using rule 59 (bracketed_exp)


State 52

   60 bracketed_exp: vtupleExpr •

    $default  reduce using rule 60 (bracketed_exp)


State 53

   61 bracketed_exp: vstructExpr •

    $default  reduce using rule 61 (bracketed_exp)


State 54

   92 postfix_exp: primary_exp •

    $default  reduce using rule 92 (postfix_exp)


State 55

   70 primary_exp: int_expr •

    $default  reduce using rule 70 (primary_exp)


State 56

   72 primary_exp: stringls •
   81 stringls: stringls • "'sq-string-literal'"
   82         | stringls • "\"dq-string-literal\""

    "\"dq-string-literal\""  shift, and go to state 125
    "'sq-string-literal'"    shift, and go to state 126

    $default  reduce using rule 72 (primary_exp)


State 57

   73 primary_exp: if_exp •

    $default  reduce using rule 73 (primary_exp)


State 58

   62 bracketed_exp: chain_exp •

    $default  reduce using rule 62 (bracketed_exp)


State 59

   74 primary_exp: lambda_exp •

    $default  reduce using rule 74 (primary_exp)


State 60

   97 tcall_exp: postfix_exp • "[" targ_cl "]"
   98 vcall_exp: postfix_exp • "(" ")"
   99          | postfix_exp • "(" varg_cl ")"
  100 dot_name_exp: postfix_exp • "." "<val_id>"
  104 dot_index_exp: postfix_exp • "." int_expr
  105              | postfix_exp • "." bracketed_exp
  106 unary_exp: postfix_exp •

    "."  shift, and go to state 127
    "("  shift, and go to state 128
    "["  shift, and go to state 129

    $default  reduce using rule 106 (unary_exp)


State 61

   93 postfix_exp: tcall_exp •

    $default  reduce using rule 93 (postfix_exp)


State 62

   94 postfix_exp: vcall_exp •

    $default  reduce using rule 94 (postfix_exp)


State 63

   95 postfix_exp: dot_name_exp •

    $default  reduce using rule 95 (postfix_exp)


State 64

   96 postfix_exp: dot_index_exp •

    $default  reduce using rule 96 (postfix_exp)


State 65

  115 mul_binary_exp: unary_exp •

    $default  reduce using rule 115 (mul_binary_exp)


State 66

  107 unary_exp: unary_op • unary_exp

    "<val_id>"               shift, and go to state 28
    "<TypeId>"               shift, and go to state 10
    "if"                     shift, and go to state 29
    "fn"                     shift, and go to state 30
    "Fn"                     shift, and go to state 31
    "not"                    shift, and go to state 32
    "42"                     shift, and go to state 33
    "0x2a"                   shift, and go to state 34
    "42u"                    shift, and go to state 35
    "0x2Au"                  shift, and go to state 36
    "4.2"                    shift, and go to state 37
    "\"dq-string-literal\""  shift, and go to state 38
    "'sq-string-literal'"    shift, and go to state 39
    "("                      shift, and go to state 40
    "{"                      shift, and go to state 41
    "+"                      shift, and go to state 42
    "-"                      shift, and go to state 43

    tid                go to state 44
    vid                go to state 45
    floatl             go to state 46
    mod_prefix         go to state 47
    bracketed_exp      go to state 50
    paren_exp          go to state 51
    vtupleExpr         go to state 52
    vstructExpr        go to state 53
    primary_exp        go to state 54
    int_expr           go to state 55
    stringls           go to state 56
    if_exp             go to state 57
    chain_exp          go to state 58
    lambda_exp         go to state 59
    postfix_exp        go to state 60
    tcall_exp          go to state 61
    vcall_exp          go to state 62
    dot_name_exp       go to state 63
    dot_index_exp      go to state 64
    unary_exp          go to state 130
    unary_op           go to state 66
    type_spec          go to state 75
    primary_type_spec  go to state 76
    tuple_type_spec    go to state 77
    mod_prefix_tid     go to state 78
    fn_type_spec       go to state 79
    postfix_type_spec  go to state 80
    tcall_type_spec    go to state 81
    unary_type_spec    go to state 82


State 67

   53 expr: binary_exp •

    $default  reduce using rule 53 (expr)


State 68

  116 mul_binary_exp: mul_binary_exp • mul_binary_op unary_exp
  119 add_binary_exp: mul_binary_exp •

    "*"  shift, and go to state 131
    "/"  shift, and go to state 132
    "%"  shift, and go to state 133

    $default  reduce using rule 119 (add_binary_exp)

    mul_binary_op  go to state 134


State 69

  120 add_binary_exp: add_binary_exp • add_binary_op mul_binary_exp
  125 cmp_binary_exp: add_binary_exp •

    "+"  shift, and go to state 135
    "-"  shift, and go to state 136

    $default  reduce using rule 125 (cmp_binary_exp)

    add_binary_op  go to state 137


State 70

  126 cmp_binary_exp: cmp_binary_exp • cmp_binary_op add_binary_exp
  129 eq_binary_exp: cmp_binary_exp •

    "<"   shift, and go to state 138
    "<="  shift, and go to state 139
    ">"   shift, and go to state 140
    ">="  shift, and go to state 141

    $default  reduce using rule 129 (eq_binary_exp)

    cmp_binary_op  go to state 142


State 71

  130 eq_binary_exp: eq_binary_exp • eq_binary_op cmp_binary_exp
  131 and_binary_exp: eq_binary_exp •

    "=="  shift, and go to state 143
    "!="  shift, and go to state 144

    $default  reduce using rule 131 (and_binary_exp)

    eq_binary_op  go to state 145


State 72

  132 and_binary_exp: and_binary_exp • "and" eq_binary_exp
  133 xor_binary_exp: and_binary_exp •

    "and"  shift, and go to state 146

    $default  reduce using rule 133 (xor_binary_exp)


State 73

  134 xor_binary_exp: xor_binary_exp • "xor" and_binary_exp
  135 or_binary_exp: xor_binary_exp •

    "xor"  shift, and go to state 147

    $default  reduce using rule 135 (or_binary_exp)


State 74

  111 binary_exp: or_binary_exp •
  136 or_binary_exp: or_binary_exp • "or" xor_binary_exp

    "or"  shift, and go to state 148

    $default  reduce using rule 111 (binary_exp)


State 75

  101 dot_name_exp: type_spec • "." "<TypeId>"
  102             | type_spec • "." "<TypeId>" "using" paren_exp

    "."  shift, and go to state 149


State 76

  155 postfix_type_spec: primary_type_spec •

    $default  reduce using rule 155 (postfix_type_spec)


State 77

  148 primary_type_spec: tuple_type_spec •

    $default  reduce using rule 148 (primary_type_spec)


State 78

  149 primary_type_spec: mod_prefix_tid •

    $default  reduce using rule 149 (primary_type_spec)


State 79

  150 primary_type_spec: fn_type_spec •

    $default  reduce using rule 150 (primary_type_spec)


State 80

  157 tcall_type_spec: postfix_type_spec • "[" targ_cl "]"
  158 unary_type_spec: postfix_type_spec •

    "["  shift, and go to state 150

    $default  reduce using rule 158 (unary_type_spec)


State 81

  156 postfix_type_spec: tcall_type_spec •

    $default  reduce using rule 156 (postfix_type_spec)


State 82

  141 type_spec: unary_type_spec •

    $default  reduce using rule 141 (type_spec)


State 83

   10 sub_mod_stmt: "sub" • "<TypeId>" "{" mod_content "}"
   11             | "sub" • "<TypeId>" tpattern_seq "{" mod_content "}"

    "<TypeId>"  shift, and go to state 151


State 84

   18 mod_content_stmt: sub_mod_stmt •

    $default  reduce using rule 18 (mod_content_stmt)


State 85

    9 top_mod_stmt: "module" "<TypeId>" "{" mod_content • "}"
   13 mod_content: mod_content • mod_content_stmt ";"

    "<val_id>"  shift, and go to state 28
    "<TypeId>"  shift, and go to state 10
    "sub"       shift, and go to state 83
    "}"         shift, and go to state 152

    sub_mod_stmt        go to state 84
    mod_content_stmt    go to state 153
    mod_val_stmt        go to state 87
    mod_type_stmt       go to state 88
    mod_enum_stmt       go to state 89
    mod_typeclass_stmt  go to state 90
    tid                 go to state 91
    vid                 go to state 92


State 86

   12 mod_content: mod_content_stmt • ";"

    ";"  shift, and go to state 154


State 87

   14 mod_content_stmt: mod_val_stmt •

    $default  reduce using rule 14 (mod_content_stmt)


State 88

   15 mod_content_stmt: mod_type_stmt •

    $default  reduce using rule 15 (mod_content_stmt)


State 89

   16 mod_content_stmt: mod_enum_stmt •

    $default  reduce using rule 16 (mod_content_stmt)


State 90

   17 mod_content_stmt: mod_typeclass_stmt •

    $default  reduce using rule 17 (mod_content_stmt)


State 91

   23 mod_type_stmt: tid • "=" long_type_spec
   24              | tid • tpattern_seq "=" long_type_spec
   25 mod_enum_stmt: tid • enum_field_pl
   26              | tid • tpattern_seq enum_field_pl
   32 mod_typeclass_stmt: tid • ":-" "<" tid class_spec ">" "{" type_query_exp_sl "}"
   33                   | tid • tpattern_seq ":-" "<" tid class_spec ">" "{" type_query_exp_sl "}"

    "["   shift, and go to state 155
    "="   shift, and go to state 156
    "|"   shift, and go to state 157
    ":-"  shift, and go to state 158

    enum_field_pl  go to state 159
    tpattern       go to state 160
    tpattern_seq   go to state 161


State 92

   19 mod_val_stmt: vid • "=" expr
   20             | vid • tpattern_seq "=" expr
   21             | vid • type_spec "from" tid stringl
   22             | vid • tpattern_seq type_spec "from" tid stringl

    "<TypeId>"  shift, and go to state 10
    "Fn"        shift, and go to state 31
    "("         shift, and go to state 162
    "["         shift, and go to state 155
    "="         shift, and go to state 163

    tid                go to state 44
    mod_prefix         go to state 164
    type_spec          go to state 165
    primary_type_spec  go to state 76
    tuple_type_spec    go to state 77
    mod_prefix_tid     go to state 78
    fn_type_spec       go to state 79
    postfix_type_spec  go to state 80
    tcall_type_spec    go to state 81
    unary_type_spec    go to state 82
    tpattern           go to state 160
    tpattern_seq       go to state 166


State 93

   34 import_stmt: "import" tid "from" stringl "type" stringl •

    $default  reduce using rule 34 (import_stmt)


State 94

   63 paren_exp: "(" • long_exp ")"
   64 vtupleExpr: "(" • ")"
   65           | "(" • expr "," ")"
   66           | "(" • expr_cl2 ")"

    "<val_id>"               shift, and go to state 28
    "<TypeId>"               shift, and go to state 10
    "if"                     shift, and go to state 29
    "fn"                     shift, and go to state 30
    "Fn"                     shift, and go to state 31
    "not"                    shift, and go to state 32
    "42"                     shift, and go to state 33
    "0x2a"                   shift, and go to state 34
    "42u"                    shift, and go to state 35
    "0x2Au"                  shift, and go to state 36
    "4.2"                    shift, and go to state 37
    "\"dq-string-literal\""  shift, and go to state 38
    "'sq-string-literal'"    shift, and go to state 39
    "("                      shift, and go to state 40
    ")"                      shift, and go to state 99
    "{"                      shift, and go to state 41
    "+"                      shift, and go to state 42
    "-"                      shift, and go to state 43

    tid                go to state 44
    vid                go to state 45
    floatl             go to state 46
    mod_prefix         go to state 47
    expr               go to state 100
    long_exp           go to state 49
    expr_cl2           go to state 101
    bracketed_exp      go to state 50
    paren_exp          go to state 51
    vtupleExpr         go to state 52
    vstructExpr        go to state 53
    primary_exp        go to state 54
    int_expr           go to state 55
    stringls           go to state 56
    if_exp             go to state 57
    chain_exp          go to state 58
    lambda_exp         go to state 59
    postfix_exp        go to state 60
    tcall_exp          go to state 61
    vcall_exp          go to state 62
    dot_name_exp       go to state 63
    dot_index_exp      go to state 64
    unary_exp          go to state 65
    unary_op           go to state 66
    binary_exp         go to state 67
    mul_binary_exp     go to state 68
    add_binary_exp     go to state 69
    cmp_binary_exp     go to state 70
    eq_binary_exp      go to state 71
    and_binary_exp     go to state 72
    xor_binary_exp     go to state 73
    or_binary_exp      go to state 74
    type_spec          go to state 75
    primary_type_spec  go to state 76
    tuple_type_spec    go to state 77
    mod_prefix_tid     go to state 78
    fn_type_spec       go to state 79
    postfix_type_spec  go to state 80
    tcall_type_spec    go to state 81
    unary_type_spec    go to state 82


State 95

   83 if_exp: "if" bracketed_exp • "then" bracketed_exp
   84       | "if" bracketed_exp • "then" bracketed_exp "else" primary_exp

    "then"  shift, and go to state 167


State 96

  186 vpattern: "(" • vpattern_field_cl ")"
  187         | "(" • ")"

    "<val_id>"  shift, and go to state 28
    "out"       shift, and go to state 168
    "inout"     shift, and go to state 169
    ")"         shift, and go to state 170

    vid                go to state 171
    vpattern_field     go to state 172
    vpattern_field_cl  go to state 173


State 97

   90 lambda_exp: "fn" vpattern • "->" bracketed_exp
   91           | "fn" vpattern • "->" type_spec bracketed_exp

    "->"  shift, and go to state 174


State 98

  154 fn_type_spec: "Fn" vpattern • primary_type_spec

    "<TypeId>"  shift, and go to state 10
    "Fn"        shift, and go to state 31
    "("         shift, and go to state 162

    tid                go to state 44
    mod_prefix         go to state 164
    primary_type_spec  go to state 175
    tuple_type_spec    go to state 77
    mod_prefix_tid     go to state 78
    fn_type_spec       go to state 79


State 99

   64 vtupleExpr: "(" ")" •

    $default  reduce using rule 64 (vtupleExpr)


State 100

   54 long_exp: expr •
   55 expr_cl2: expr • "," expr
   65 vtupleExpr: "(" expr • "," ")"

    ","  shift, and go to state 176

    $default  reduce using rule 54 (long_exp)


State 101

   56 expr_cl2: expr_cl2 • "," expr
   66 vtupleExpr: "(" expr_cl2 • ")"

    ","  shift, and go to state 177
    ")"  shift, and go to state 178


State 102

  101 dot_name_exp: type_spec • "." "<TypeId>"
  102             | type_spec • "." "<TypeId>" "using" paren_exp
  142 type_spec_cl2: type_spec • "," type_spec
  151 tuple_type_spec: "(" type_spec • "," ")"

    "."  shift, and go to state 149
    ","  shift, and go to state 179


State 103

  143 type_spec_cl2: type_spec_cl2 • "," type_spec
  152 tuple_type_spec: "(" type_spec_cl2 • ")"

    ","  shift, and go to state 180
    ")"  shift, and go to state 181


State 104

   41 const_stmt: "const" • lpattern "=" expr

    "<val_id>"  shift, and go to state 28
    "("         shift, and go to state 182

    vid                    go to state 183
    lpattern_field         go to state 184
    destructured_lpattern  go to state 185
    lpattern               go to state 186


State 105

   42 val_stmt: "val" • lpattern "=" expr

    "<val_id>"  shift, and go to state 28
    "("         shift, and go to state 182

    vid                    go to state 183
    lpattern_field         go to state 184
    destructured_lpattern  go to state 185
    lpattern               go to state 187


State 106

   43 var_stmt: "var" • lpattern "=" expr

    "<val_id>"  shift, and go to state 28
    "("         shift, and go to state 182

    vid                    go to state 183
    lpattern_field         go to state 184
    destructured_lpattern  go to state 185
    lpattern               go to state 188


State 107

   44 set_stmt: "set" • expr "=" expr

    "<val_id>"               shift, and go to state 28
    "<TypeId>"               shift, and go to state 10
    "if"                     shift, and go to state 29
    "fn"                     shift, and go to state 30
    "Fn"                     shift, and go to state 31
    "not"                    shift, and go to state 32
    "42"                     shift, and go to state 33
    "0x2a"                   shift, and go to state 34
    "42u"                    shift, and go to state 35
    "0x2Au"                  shift, and go to state 36
    "4.2"                    shift, and go to state 37
    "\"dq-string-literal\""  shift, and go to state 38
    "'sq-string-literal'"    shift, and go to state 39
    "("                      shift, and go to state 40
    "{"                      shift, and go to state 41
    "+"                      shift, and go to state 42
    "-"                      shift, and go to state 43

    tid                go to state 44
    vid                go to state 45
    floatl             go to state 46
    mod_prefix         go to state 47
    expr               go to state 189
    bracketed_exp      go to state 50
    paren_exp          go to state 51
    vtupleExpr         go to state 52
    vstructExpr        go to state 53
    primary_exp        go to state 54
    int_expr           go to state 55
    stringls           go to state 56
    if_exp             go to state 57
    chain_exp          go to state 58
    lambda_exp         go to state 59
    postfix_exp        go to state 60
    tcall_exp          go to state 61
    vcall_exp          go to state 62
    dot_name_exp       go to state 63
    dot_index_exp      go to state 64
    unary_exp          go to state 65
    unary_op           go to state 66
    binary_exp         go to state 67
    mul_binary_exp     go to state 68
    add_binary_exp     go to state 69
    cmp_binary_exp     go to state 70
    eq_binary_exp      go to state 71
    and_binary_exp     go to state 72
    xor_binary_exp     go to state 73
    or_binary_exp      go to state 74
    type_spec          go to state 75
    primary_type_spec  go to state 76
    tuple_type_spec    go to state 77
    mod_prefix_tid     go to state 78
    fn_type_spec       go to state 79
    postfix_type_spec  go to state 80
    tcall_type_spec    go to state 81
    unary_type_spec    go to state 82


State 108

   45 discard_stmt: "discard" • expr

    "<val_id>"               shift, and go to state 28
    "<TypeId>"               shift, and go to state 10
    "if"                     shift, and go to state 29
    "fn"                     shift, and go to state 30
    "Fn"                     shift, and go to state 31
    "not"                    shift, and go to state 32
    "42"                     shift, and go to state 33
    "0x2a"                   shift, and go to state 34
    "42u"                    shift, and go to state 35
    "0x2Au"                  shift, and go to state 36
    "4.2"                    shift, and go to state 37
    "\"dq-string-literal\""  shift, and go to state 38
    "'sq-string-literal'"    shift, and go to state 39
    "("                      shift, and go to state 40
    "{"                      shift, and go to state 41
    "+"                      shift, and go to state 42
    "-"                      shift, and go to state 43

    tid                go to state 44
    vid                go to state 45
    floatl             go to state 46
    mod_prefix         go to state 47
    expr               go to state 190
    bracketed_exp      go to state 50
    paren_exp          go to state 51
    vtupleExpr         go to state 52
    vstructExpr        go to state 53
    primary_exp        go to state 54
    int_expr           go to state 55
    stringls           go to state 56
    if_exp             go to state 57
    chain_exp          go to state 58
    lambda_exp         go to state 59
    postfix_exp        go to state 60
    tcall_exp          go to state 61
    vcall_exp          go to state 62
    dot_name_exp       go to state 63
    dot_index_exp      go to state 64
    unary_exp          go to state 65
    unary_op           go to state 66
    binary_exp         go to state 67
    mul_binary_exp     go to state 68
    add_binary_exp     go to state 69
    cmp_binary_exp     go to state 70
    eq_binary_exp      go to state 71
    and_binary_exp     go to state 72
    xor_binary_exp     go to state 73
    or_binary_exp      go to state 74
    type_spec          go to state 75
    primary_type_spec  go to state 76
    tuple_type_spec    go to state 77
    mod_prefix_tid     go to state 78
    fn_type_spec       go to state 79
    postfix_type_spec  go to state 80
    tcall_type_spec    go to state 81
    unary_type_spec    go to state 82


State 109

   88 chain_prefix: chain_prefix_stmt • ";"

    ";"  shift, and go to state 191


State 110

   36 chain_prefix_stmt: const_stmt •

    $default  reduce using rule 36 (chain_prefix_stmt)


State 111

   37 chain_prefix_stmt: val_stmt •

    $default  reduce using rule 37 (chain_prefix_stmt)


State 112

   38 chain_prefix_stmt: var_stmt •

    $default  reduce using rule 38 (chain_prefix_stmt)


State 113

   39 chain_prefix_stmt: set_stmt •

    $default  reduce using rule 39 (chain_prefix_stmt)


State 114

   40 chain_prefix_stmt: discard_stmt •

    $default  reduce using rule 40 (chain_prefix_stmt)


State 115

   69 primary_exp: vid •
  175 struct_exp_field: vid • "=" expr

    "="  shift, and go to state 192

    $default  reduce using rule 69 (primary_exp)


State 116

   85 chain_exp: "{" expr • "}"

    "}"  shift, and go to state 193


State 117

   86 chain_exp: "{" chain_prefix • "}"
   87          | "{" chain_prefix • expr "}"
   89 chain_prefix: chain_prefix • chain_prefix_stmt ";"

    "<val_id>"               shift, and go to state 28
    "<TypeId>"               shift, and go to state 10
    "if"                     shift, and go to state 29
    "const"                  shift, and go to state 104
    "val"                    shift, and go to state 105
    "var"                    shift, and go to state 106
    "set"                    shift, and go to state 107
    "fn"                     shift, and go to state 30
    "Fn"                     shift, and go to state 31
    "not"                    shift, and go to state 32
    "discard"                shift, and go to state 108
    "42"                     shift, and go to state 33
    "0x2a"                   shift, and go to state 34
    "42u"                    shift, and go to state 35
    "0x2Au"                  shift, and go to state 36
    "4.2"                    shift, and go to state 37
    "\"dq-string-literal\""  shift, and go to state 38
    "'sq-string-literal'"    shift, and go to state 39
    "("                      shift, and go to state 40
    "{"                      shift, and go to state 41
    "}"                      shift, and go to state 194
    "+"                      shift, and go to state 42
    "-"                      shift, and go to state 43

    chain_prefix_stmt  go to state 195
    const_stmt         go to state 110
    val_stmt           go to state 111
    var_stmt           go to state 112
    set_stmt           go to state 113
    discard_stmt       go to state 114
    tid                go to state 44
    vid                go to state 45
    floatl             go to state 46
    mod_prefix         go to state 47
    expr               go to state 196
    bracketed_exp      go to state 50
    paren_exp          go to state 51
    vtupleExpr         go to state 52
    vstructExpr        go to state 53
    primary_exp        go to state 54
    int_expr           go to state 55
    stringls           go to state 56
    if_exp             go to state 57
    chain_exp          go to state 58
    lambda_exp         go to state 59
    postfix_exp        go to state 60
    tcall_exp          go to state 61
    vcall_exp          go to state 62
    dot_name_exp       go to state 63
    dot_index_exp      go to state 64
    unary_exp          go to state 65
    unary_op           go to state 66
    binary_exp         go to state 67
    mul_binary_exp     go to state 68
    add_binary_exp     go to state 69
    cmp_binary_exp     go to state 70
    eq_binary_exp      go to state 71
    and_binary_exp     go to state 72
    xor_binary_exp     go to state 73
    or_binary_exp      go to state 74
    type_spec          go to state 75
    primary_type_spec  go to state 76
    tuple_type_spec    go to state 77
    mod_prefix_tid     go to state 78
    fn_type_spec       go to state 79
    postfix_type_spec  go to state 80
    tcall_type_spec    go to state 81
    unary_type_spec    go to state 82


State 118

  195 struct_exp_field_cl: struct_exp_field •

    $default  reduce using rule 195 (struct_exp_field_cl)


State 119

   67 vstructExpr: "{" struct_exp_field_cl • "}"
  196 struct_exp_field_cl: struct_exp_field_cl • "," struct_exp_field

    ","  shift, and go to state 197
    "}"  shift, and go to state 198


State 120

   51 mod_prefix: tid ":" •

    $default  reduce using rule 51 (mod_prefix)


State 121

   47 vid: "<val_id>" •
  103 dot_name_exp: mod_prefix "<val_id>" •

    ":"       reduce using rule 47 (vid)
    $default  reduce using rule 103 (dot_name_exp)


State 122

  153 mod_prefix_tid: mod_prefix tid •

    $default  reduce using rule 153 (mod_prefix_tid)


State 123

   52 mod_prefix: mod_prefix vid • ":"

    ":"  shift, and go to state 199


State 124

   63 paren_exp: "(" long_exp ")" •

    $default  reduce using rule 63 (paren_exp)


State 125

   82 stringls: stringls "\"dq-string-literal\"" •

    $default  reduce using rule 82 (stringls)


State 126

   81 stringls: stringls "'sq-string-literal'" •

    $default  reduce using rule 81 (stringls)


State 127

  100 dot_name_exp: postfix_exp "." • "<val_id>"
  104 dot_index_exp: postfix_exp "." • int_expr
  105              | postfix_exp "." • bracketed_exp

    "<val_id>"  shift, and go to state 200
    "42"        shift, and go to state 33
    "0x2a"      shift, and go to state 34
    "42u"       shift, and go to state 35
    "0x2Au"     shift, and go to state 36
    "("         shift, and go to state 94
    "{"         shift, and go to state 41

    bracketed_exp  go to state 201
    paren_exp      go to state 51
    vtupleExpr     go to state 52
    vstructExpr    go to state 53
    int_expr       go to state 202
    chain_exp      go to state 58


State 128

   98 vcall_exp: postfix_exp "(" • ")"
   99          | postfix_exp "(" • varg_cl ")"

    "<val_id>"               shift, and go to state 28
    "<TypeId>"               shift, and go to state 10
    "if"                     shift, and go to state 29
    "fn"                     shift, and go to state 30
    "Fn"                     shift, and go to state 31
    "not"                    shift, and go to state 32
    "out"                    shift, and go to state 203
    "inout"                  shift, and go to state 204
    "42"                     shift, and go to state 33
    "0x2a"                   shift, and go to state 34
    "42u"                    shift, and go to state 35
    "0x2Au"                  shift, and go to state 36
    "4.2"                    shift, and go to state 37
    "\"dq-string-literal\""  shift, and go to state 38
    "'sq-string-literal'"    shift, and go to state 39
    "("                      shift, and go to state 40
    ")"                      shift, and go to state 205
    "{"                      shift, and go to state 41
    "+"                      shift, and go to state 42
    "-"                      shift, and go to state 43

    tid                go to state 44
    vid                go to state 45
    floatl             go to state 46
    mod_prefix         go to state 47
    expr               go to state 206
    bracketed_exp      go to state 50
    paren_exp          go to state 51
    vtupleExpr         go to state 52
    vstructExpr        go to state 53
    primary_exp        go to state 54
    int_expr           go to state 55
    stringls           go to state 56
    if_exp             go to state 57
    chain_exp          go to state 58
    lambda_exp         go to state 59
    postfix_exp        go to state 60
    tcall_exp          go to state 61
    vcall_exp          go to state 62
    dot_name_exp       go to state 63
    dot_index_exp      go to state 64
    unary_exp          go to state 65
    unary_op           go to state 66
    binary_exp         go to state 67
    mul_binary_exp     go to state 68
    add_binary_exp     go to state 69
    cmp_binary_exp     go to state 70
    eq_binary_exp      go to state 71
    and_binary_exp     go to state 72
    xor_binary_exp     go to state 73
    or_binary_exp      go to state 74
    type_spec          go to state 75
    primary_type_spec  go to state 76
    tuple_type_spec    go to state 77
    mod_prefix_tid     go to state 78
    fn_type_spec       go to state 79
    postfix_type_spec  go to state 80
    tcall_type_spec    go to state 81
    unary_type_spec    go to state 82
    varg               go to state 207
    varg_cl            go to state 208


State 129

   97 tcall_exp: postfix_exp "[" • targ_cl "]"

    "<val_id>"               shift, and go to state 28
    "<TypeId>"               shift, and go to state 10
    "if"                     shift, and go to state 29
    "fn"                     shift, and go to state 30
    "Fn"                     shift, and go to state 31
    "not"                    shift, and go to state 32
    "42"                     shift, and go to state 33
    "0x2a"                   shift, and go to state 34
    "42u"                    shift, and go to state 35
    "0x2Au"                  shift, and go to state 36
    "4.2"                    shift, and go to state 37
    "\"dq-string-literal\""  shift, and go to state 38
    "'sq-string-literal'"    shift, and go to state 39
    "("                      shift, and go to state 40
    "{"                      shift, and go to state 41
    "+"                      shift, and go to state 42
    "-"                      shift, and go to state 43

    tid                go to state 44
    vid                go to state 45
    floatl             go to state 46
    mod_prefix         go to state 47
    expr               go to state 209
    bracketed_exp      go to state 50
    paren_exp          go to state 51
    vtupleExpr         go to state 52
    vstructExpr        go to state 53
    primary_exp        go to state 54
    int_expr           go to state 55
    stringls           go to state 56
    if_exp             go to state 57
    chain_exp          go to state 58
    lambda_exp         go to state 59
    postfix_exp        go to state 60
    tcall_exp          go to state 61
    vcall_exp          go to state 62
    dot_name_exp       go to state 63
    dot_index_exp      go to state 64
    unary_exp          go to state 65
    unary_op           go to state 66
    binary_exp         go to state 67
    mul_binary_exp     go to state 68
    add_binary_exp     go to state 69
    cmp_binary_exp     go to state 70
    eq_binary_exp      go to state 71
    and_binary_exp     go to state 72
    xor_binary_exp     go to state 73
    or_binary_exp      go to state 74
    type_spec          go to state 210
    primary_type_spec  go to state 76
    tuple_type_spec    go to state 77
    mod_prefix_tid     go to state 78
    fn_type_spec       go to state 79
    postfix_type_spec  go to state 80
    tcall_type_spec    go to state 81
    unary_type_spec    go to state 82
    targ               go to state 211
    targ_cl            go to state 212


State 130

  107 unary_exp: unary_op unary_exp •

    $default  reduce using rule 107 (unary_exp)


State 131

  112 mul_binary_op: "*" •

    $default  reduce using rule 112 (mul_binary_op)


State 132

  113 mul_binary_op: "/" •

    $default  reduce using rule 113 (mul_binary_op)


State 133

  114 mul_binary_op: "%" •

    $default  reduce using rule 114 (mul_binary_op)


State 134

  116 mul_binary_exp: mul_binary_exp mul_binary_op • unary_exp

    "<val_id>"               shift, and go to state 28
    "<TypeId>"               shift, and go to state 10
    "if"                     shift, and go to state 29
    "fn"                     shift, and go to state 30
    "Fn"                     shift, and go to state 31
    "not"                    shift, and go to state 32
    "42"                     shift, and go to state 33
    "0x2a"                   shift, and go to state 34
    "42u"                    shift, and go to state 35
    "0x2Au"                  shift, and go to state 36
    "4.2"                    shift, and go to state 37
    "\"dq-string-literal\""  shift, and go to state 38
    "'sq-string-literal'"    shift, and go to state 39
    "("                      shift, and go to state 40
    "{"                      shift, and go to state 41
    "+"                      shift, and go to state 42
    "-"                      shift, and go to state 43

    tid                go to state 44
    vid                go to state 45
    floatl             go to state 46
    mod_prefix         go to state 47
    bracketed_exp      go to state 50
    paren_exp          go to state 51
    vtupleExpr         go to state 52
    vstructExpr        go to state 53
    primary_exp        go to state 54
    int_expr           go to state 55
    stringls           go to state 56
    if_exp             go to state 57
    chain_exp          go to state 58
    lambda_exp         go to state 59
    postfix_exp        go to state 60
    tcall_exp          go to state 61
    vcall_exp          go to state 62
    dot_name_exp       go to state 63
    dot_index_exp      go to state 64
    unary_exp          go to state 213
    unary_op           go to state 66
    type_spec          go to state 75
    primary_type_spec  go to state 76
    tuple_type_spec    go to state 77
    mod_prefix_tid     go to state 78
    fn_type_spec       go to state 79
    postfix_type_spec  go to state 80
    tcall_type_spec    go to state 81
    unary_type_spec    go to state 82


State 135

  117 add_binary_op: "+" •

    $default  reduce using rule 117 (add_binary_op)


State 136

  118 add_binary_op: "-" •

    $default  reduce using rule 118 (add_binary_op)


State 137

  120 add_binary_exp: add_binary_exp add_binary_op • mul_binary_exp

    "<val_id>"               shift, and go to state 28
    "<TypeId>"               shift, and go to state 10
    "if"                     shift, and go to state 29
    "fn"                     shift, and go to state 30
    "Fn"                     shift, and go to state 31
    "not"                    shift, and go to state 32
    "42"                     shift, and go to state 33
    "0x2a"                   shift, and go to state 34
    "42u"                    shift, and go to state 35
    "0x2Au"                  shift, and go to state 36
    "4.2"                    shift, and go to state 37
    "\"dq-string-literal\""  shift, and go to state 38
    "'sq-string-literal'"    shift, and go to state 39
    "("                      shift, and go to state 40
    "{"                      shift, and go to state 41
    "+"                      shift, and go to state 42
    "-"                      shift, and go to state 43

    tid                go to state 44
    vid                go to state 45
    floatl             go to state 46
    mod_prefix         go to state 47
    bracketed_exp      go to state 50
    paren_exp          go to state 51
    vtupleExpr         go to state 52
    vstructExpr        go to state 53
    primary_exp        go to state 54
    int_expr           go to state 55
    stringls           go to state 56
    if_exp             go to state 57
    chain_exp          go to state 58
    lambda_exp         go to state 59
    postfix_exp        go to state 60
    tcall_exp          go to state 61
    vcall_exp          go to state 62
    dot_name_exp       go to state 63
    dot_index_exp      go to state 64
    unary_exp          go to state 65
    unary_op           go to state 66
    mul_binary_exp     go to state 214
    type_spec          go to state 75
    primary_type_spec  go to state 76
    tuple_type_spec    go to state 77
    mod_prefix_tid     go to state 78
    fn_type_spec       go to state 79
    postfix_type_spec  go to state 80
    tcall_type_spec    go to state 81
    unary_type_spec    go to state 82


State 138

  121 cmp_binary_op: "<" •

    $default  reduce using rule 121 (cmp_binary_op)


State 139

  122 cmp_binary_op: "<=" •

    $default  reduce using rule 122 (cmp_binary_op)


State 140

  123 cmp_binary_op: ">" •

    $default  reduce using rule 123 (cmp_binary_op)


State 141

  124 cmp_binary_op: ">=" •

    $default  reduce using rule 124 (cmp_binary_op)


State 142

  126 cmp_binary_exp: cmp_binary_exp cmp_binary_op • add_binary_exp

    "<val_id>"               shift, and go to state 28
    "<TypeId>"               shift, and go to state 10
    "if"                     shift, and go to state 29
    "fn"                     shift, and go to state 30
    "Fn"                     shift, and go to state 31
    "not"                    shift, and go to state 32
    "42"                     shift, and go to state 33
    "0x2a"                   shift, and go to state 34
    "42u"                    shift, and go to state 35
    "0x2Au"                  shift, and go to state 36
    "4.2"                    shift, and go to state 37
    "\"dq-string-literal\""  shift, and go to state 38
    "'sq-string-literal'"    shift, and go to state 39
    "("                      shift, and go to state 40
    "{"                      shift, and go to state 41
    "+"                      shift, and go to state 42
    "-"                      shift, and go to state 43

    tid                go to state 44
    vid                go to state 45
    floatl             go to state 46
    mod_prefix         go to state 47
    bracketed_exp      go to state 50
    paren_exp          go to state 51
    vtupleExpr         go to state 52
    vstructExpr        go to state 53
    primary_exp        go to state 54
    int_expr           go to state 55
    stringls           go to state 56
    if_exp             go to state 57
    chain_exp          go to state 58
    lambda_exp         go to state 59
    postfix_exp        go to state 60
    tcall_exp          go to state 61
    vcall_exp          go to state 62
    dot_name_exp       go to state 63
    dot_index_exp      go to state 64
    unary_exp          go to state 65
    unary_op           go to state 66
    mul_binary_exp     go to state 68
    add_binary_exp     go to state 215
    type_spec          go to state 75
    primary_type_spec  go to state 76
    tuple_type_spec    go to state 77
    mod_prefix_tid     go to state 78
    fn_type_spec       go to state 79
    postfix_type_spec  go to state 80
    tcall_type_spec    go to state 81
    unary_type_spec    go to state 82


State 143

  127 eq_binary_op: "==" •

    $default  reduce using rule 127 (eq_binary_op)


State 144

  128 eq_binary_op: "!=" •

    $default  reduce using rule 128 (eq_binary_op)


State 145

  130 eq_binary_exp: eq_binary_exp eq_binary_op • cmp_binary_exp

    "<val_id>"               shift, and go to state 28
    "<TypeId>"               shift, and go to state 10
    "if"                     shift, and go to state 29
    "fn"                     shift, and go to state 30
    "Fn"                     shift, and go to state 31
    "not"                    shift, and go to state 32
    "42"                     shift, and go to state 33
    "0x2a"                   shift, and go to state 34
    "42u"                    shift, and go to state 35
    "0x2Au"                  shift, and go to state 36
    "4.2"                    shift, and go to state 37
    "\"dq-string-literal\""  shift, and go to state 38
    "'sq-string-literal'"    shift, and go to state 39
    "("                      shift, and go to state 40
    "{"                      shift, and go to state 41
    "+"                      shift, and go to state 42
    "-"                      shift, and go to state 43

    tid                go to state 44
    vid                go to state 45
    floatl             go to state 46
    mod_prefix         go to state 47
    bracketed_exp      go to state 50
    paren_exp          go to state 51
    vtupleExpr         go to state 52
    vstructExpr        go to state 53
    primary_exp        go to state 54
    int_expr           go to state 55
    stringls           go to state 56
    if_exp             go to state 57
    chain_exp          go to state 58
    lambda_exp         go to state 59
    postfix_exp        go to state 60
    tcall_exp          go to state 61
    vcall_exp          go to state 62
    dot_name_exp       go to state 63
    dot_index_exp      go to state 64
    unary_exp          go to state 65
    unary_op           go to state 66
    mul_binary_exp     go to state 68
    add_binary_exp     go to state 69
    cmp_binary_exp     go to state 216
    type_spec          go to state 75
    primary_type_spec  go to state 76
    tuple_type_spec    go to state 77
    mod_prefix_tid     go to state 78
    fn_type_spec       go to state 79
    postfix_type_spec  go to state 80
    tcall_type_spec    go to state 81
    unary_type_spec    go to state 82


State 146

  132 and_binary_exp: and_binary_exp "and" • eq_binary_exp

    "<val_id>"               shift, and go to state 28
    "<TypeId>"               shift, and go to state 10
    "if"                     shift, and go to state 29
    "fn"                     shift, and go to state 30
    "Fn"                     shift, and go to state 31
    "not"                    shift, and go to state 32
    "42"                     shift, and go to state 33
    "0x2a"                   shift, and go to state 34
    "42u"                    shift, and go to state 35
    "0x2Au"                  shift, and go to state 36
    "4.2"                    shift, and go to state 37
    "\"dq-string-literal\""  shift, and go to state 38
    "'sq-string-literal'"    shift, and go to state 39
    "("                      shift, and go to state 40
    "{"                      shift, and go to state 41
    "+"                      shift, and go to state 42
    "-"                      shift, and go to state 43

    tid                go to state 44
    vid                go to state 45
    floatl             go to state 46
    mod_prefix         go to state 47
    bracketed_exp      go to state 50
    paren_exp          go to state 51
    vtupleExpr         go to state 52
    vstructExpr        go to state 53
    primary_exp        go to state 54
    int_expr           go to state 55
    stringls           go to state 56
    if_exp             go to state 57
    chain_exp          go to state 58
    lambda_exp         go to state 59
    postfix_exp        go to state 60
    tcall_exp          go to state 61
    vcall_exp          go to state 62
    dot_name_exp       go to state 63
    dot_index_exp      go to state 64
    unary_exp          go to state 65
    unary_op           go to state 66
    mul_binary_exp     go to state 68
    add_binary_exp     go to state 69
    cmp_binary_exp     go to state 70
    eq_binary_exp      go to state 217
    type_spec          go to state 75
    primary_type_spec  go to state 76
    tuple_type_spec    go to state 77
    mod_prefix_tid     go to state 78
    fn_type_spec       go to state 79
    postfix_type_spec  go to state 80
    tcall_type_spec    go to state 81
    unary_type_spec    go to state 82


State 147

  134 xor_binary_exp: xor_binary_exp "xor" • and_binary_exp

    "<val_id>"               shift, and go to state 28
    "<TypeId>"               shift, and go to state 10
    "if"                     shift, and go to state 29
    "fn"                     shift, and go to state 30
    "Fn"                     shift, and go to state 31
    "not"                    shift, and go to state 32
    "42"                     shift, and go to state 33
    "0x2a"                   shift, and go to state 34
    "42u"                    shift, and go to state 35
    "0x2Au"                  shift, and go to state 36
    "4.2"                    shift, and go to state 37
    "\"dq-string-literal\""  shift, and go to state 38
    "'sq-string-literal'"    shift, and go to state 39
    "("                      shift, and go to state 40
    "{"                      shift, and go to state 41
    "+"                      shift, and go to state 42
    "-"                      shift, and go to state 43

    tid                go to state 44
    vid                go to state 45
    floatl             go to state 46
    mod_prefix         go to state 47
    bracketed_exp      go to state 50
    paren_exp          go to state 51
    vtupleExpr         go to state 52
    vstructExpr        go to state 53
    primary_exp        go to state 54
    int_expr           go to state 55
    stringls           go to state 56
    if_exp             go to state 57
    chain_exp          go to state 58
    lambda_exp         go to state 59
    postfix_exp        go to state 60
    tcall_exp          go to state 61
    vcall_exp          go to state 62
    dot_name_exp       go to state 63
    dot_index_exp      go to state 64
    unary_exp          go to state 65
    unary_op           go to state 66
    mul_binary_exp     go to state 68
    add_binary_exp     go to state 69
    cmp_binary_exp     go to state 70
    eq_binary_exp      go to state 71
    and_binary_exp     go to state 218
    type_spec          go to state 75
    primary_type_spec  go to state 76
    tuple_type_spec    go to state 77
    mod_prefix_tid     go to state 78
    fn_type_spec       go to state 79
    postfix_type_spec  go to state 80
    tcall_type_spec    go to state 81
    unary_type_spec    go to state 82


State 148

  136 or_binary_exp: or_binary_exp "or" • xor_binary_exp

    "<val_id>"               shift, and go to state 28
    "<TypeId>"               shift, and go to state 10
    "if"                     shift, and go to state 29
    "fn"                     shift, and go to state 30
    "Fn"                     shift, and go to state 31
    "not"                    shift, and go to state 32
    "42"                     shift, and go to state 33
    "0x2a"                   shift, and go to state 34
    "42u"                    shift, and go to state 35
    "0x2Au"                  shift, and go to state 36
    "4.2"                    shift, and go to state 37
    "\"dq-string-literal\""  shift, and go to state 38
    "'sq-string-literal'"    shift, and go to state 39
    "("                      shift, and go to state 40
    "{"                      shift, and go to state 41
    "+"                      shift, and go to state 42
    "-"                      shift, and go to state 43

    tid                go to state 44
    vid                go to state 45
    floatl             go to state 46
    mod_prefix         go to state 47
    bracketed_exp      go to state 50
    paren_exp          go to state 51
    vtupleExpr         go to state 52
    vstructExpr        go to state 53
    primary_exp        go to state 54
    int_expr           go to state 55
    stringls           go to state 56
    if_exp             go to state 57
    chain_exp          go to state 58
    lambda_exp         go to state 59
    postfix_exp        go to state 60
    tcall_exp          go to state 61
    vcall_exp          go to state 62
    dot_name_exp       go to state 63
    dot_index_exp      go to state 64
    unary_exp          go to state 65
    unary_op           go to state 66
    mul_binary_exp     go to state 68
    add_binary_exp     go to state 69
    cmp_binary_exp     go to state 70
    eq_binary_exp      go to state 71
    and_binary_exp     go to state 72
    xor_binary_exp     go to state 219
    type_spec          go to state 75
    primary_type_spec  go to state 76
    tuple_type_spec    go to state 77
    mod_prefix_tid     go to state 78
    fn_type_spec       go to state 79
    postfix_type_spec  go to state 80
    tcall_type_spec    go to state 81
    unary_type_spec    go to state 82


State 149

  101 dot_name_exp: type_spec "." • "<TypeId>"
  102             | type_spec "." • "<TypeId>" "using" paren_exp

    "<TypeId>"  shift, and go to state 220


State 150

  157 tcall_type_spec: postfix_type_spec "[" • targ_cl "]"

    "<val_id>"               shift, and go to state 28
    "<TypeId>"               shift, and go to state 10
    "if"                     shift, and go to state 29
    "fn"                     shift, and go to state 30
    "Fn"                     shift, and go to state 31
    "not"                    shift, and go to state 32
    "42"                     shift, and go to state 33
    "0x2a"                   shift, and go to state 34
    "42u"                    shift, and go to state 35
    "0x2Au"                  shift, and go to state 36
    "4.2"                    shift, and go to state 37
    "\"dq-string-literal\""  shift, and go to state 38
    "'sq-string-literal'"    shift, and go to state 39
    "("                      shift, and go to state 40
    "{"                      shift, and go to state 41
    "+"                      shift, and go to state 42
    "-"                      shift, and go to state 43

    tid                go to state 44
    vid                go to state 45
    floatl             go to state 46
    mod_prefix         go to state 47
    expr               go to state 209
    bracketed_exp      go to state 50
    paren_exp          go to state 51
    vtupleExpr         go to state 52
    vstructExpr        go to state 53
    primary_exp        go to state 54
    int_expr           go to state 55
    stringls           go to state 56
    if_exp             go to state 57
    chain_exp          go to state 58
    lambda_exp         go to state 59
    postfix_exp        go to state 60
    tcall_exp          go to state 61
    vcall_exp          go to state 62
    dot_name_exp       go to state 63
    dot_index_exp      go to state 64
    unary_exp          go to state 65
    unary_op           go to state 66
    binary_exp         go to state 67
    mul_binary_exp     go to state 68
    add_binary_exp     go to state 69
    cmp_binary_exp     go to state 70
    eq_binary_exp      go to state 71
    and_binary_exp     go to state 72
    xor_binary_exp     go to state 73
    or_binary_exp      go to state 74
    type_spec          go to state 210
    primary_type_spec  go to state 76
    tuple_type_spec    go to state 77
    mod_prefix_tid     go to state 78
    fn_type_spec       go to state 79
    postfix_type_spec  go to state 80
    tcall_type_spec    go to state 81
    unary_type_spec    go to state 82
    targ               go to state 211
    targ_cl            go to state 221


State 151

   10 sub_mod_stmt: "sub" "<TypeId>" • "{" mod_content "}"
   11             | "sub" "<TypeId>" • tpattern_seq "{" mod_content "}"

    "["  shift, and go to state 155
    "{"  shift, and go to state 222

    tpattern      go to state 160
    tpattern_seq  go to state 223


State 152

    9 top_mod_stmt: "module" "<TypeId>" "{" mod_content "}" •

    $default  reduce using rule 9 (top_mod_stmt)


State 153

   13 mod_content: mod_content mod_content_stmt • ";"

    ";"  shift, and go to state 224


State 154

   12 mod_content: mod_content_stmt ";" •

    $default  reduce using rule 12 (mod_content)


State 155

  188 tpattern: "[" • tpattern_field_cl "]"

    "<val_id>"  shift, and go to state 28
    "<TypeId>"  shift, and go to state 10

    tid                go to state 225
    vid                go to state 226
    tpattern_field     go to state 227
    tpattern_field_cl  go to state 228


State 156

   23 mod_type_stmt: tid "=" • long_type_spec

    "<TypeId>"  shift, and go to state 10
    "Fn"        shift, and go to state 31
    "("         shift, and go to state 162
    "{"         shift, and go to state 229

    tid                go to state 44
    mod_prefix         go to state 164
    primary_type_spec  go to state 76
    tuple_type_spec    go to state 77
    mod_prefix_tid     go to state 78
    fn_type_spec       go to state 79
    postfix_type_spec  go to state 80
    tcall_type_spec    go to state 81
    unary_type_spec    go to state 230
    long_type_spec     go to state 231
    struct_type_spec   go to state 232


State 157

   27 enum_field_pl: "|" • unprefixed_enum_field_pl

    "<TypeId>"  shift, and go to state 10

    unprefixed_enum_field_pl  go to state 233
    enum_field                go to state 234
    tid                       go to state 235


State 158

   32 mod_typeclass_stmt: tid ":-" • "<" tid class_spec ">" "{" type_query_exp_sl "}"

    "<"  shift, and go to state 236


State 159

   25 mod_enum_stmt: tid enum_field_pl •

    $default  reduce using rule 25 (mod_enum_stmt)


State 160

  197 tpattern_seq: tpattern •

    $default  reduce using rule 197 (tpattern_seq)


State 161

   24 mod_type_stmt: tid tpattern_seq • "=" long_type_spec
   26 mod_enum_stmt: tid tpattern_seq • enum_field_pl
   33 mod_typeclass_stmt: tid tpattern_seq • ":-" "<" tid class_spec ">" "{" type_query_exp_sl "}"
  198 tpattern_seq: tpattern_seq • tpattern

    "["   shift, and go to state 155
    "="   shift, and go to state 237
    "|"   shift, and go to state 157
    ":-"  shift, and go to state 238

    enum_field_pl  go to state 239
    tpattern       go to state 240


State 162

  151 tuple_type_spec: "(" • type_spec "," ")"
  152                | "(" • type_spec_cl2 ")"

    "<TypeId>"  shift, and go to state 10
    "Fn"        shift, and go to state 31
    "("         shift, and go to state 162

    tid                go to state 44
    mod_prefix         go to state 164
    type_spec          go to state 241
    type_spec_cl2      go to state 103
    primary_type_spec  go to state 76
    tuple_type_spec    go to state 77
    mod_prefix_tid     go to state 78
    fn_type_spec       go to state 79
    postfix_type_spec  go to state 80
    tcall_type_spec    go to state 81
    unary_type_spec    go to state 82


State 163

   19 mod_val_stmt: vid "=" • expr

    "<val_id>"               shift, and go to state 28
    "<TypeId>"               shift, and go to state 10
    "if"                     shift, and go to state 29
    "fn"                     shift, and go to state 30
    "Fn"                     shift, and go to state 31
    "not"                    shift, and go to state 32
    "42"                     shift, and go to state 33
    "0x2a"                   shift, and go to state 34
    "42u"                    shift, and go to state 35
    "0x2Au"                  shift, and go to state 36
    "4.2"                    shift, and go to state 37
    "\"dq-string-literal\""  shift, and go to state 38
    "'sq-string-literal'"    shift, and go to state 39
    "("                      shift, and go to state 40
    "{"                      shift, and go to state 41
    "+"                      shift, and go to state 42
    "-"                      shift, and go to state 43

    tid                go to state 44
    vid                go to state 45
    floatl             go to state 46
    mod_prefix         go to state 47
    expr               go to state 242
    bracketed_exp      go to state 50
    paren_exp          go to state 51
    vtupleExpr         go to state 52
    vstructExpr        go to state 53
    primary_exp        go to state 54
    int_expr           go to state 55
    stringls           go to state 56
    if_exp             go to state 57
    chain_exp          go to state 58
    lambda_exp         go to state 59
    postfix_exp        go to state 60
    tcall_exp          go to state 61
    vcall_exp          go to state 62
    dot_name_exp       go to state 63
    dot_index_exp      go to state 64
    unary_exp          go to state 65
    unary_op           go to state 66
    binary_exp         go to state 67
    mul_binary_exp     go to state 68
    add_binary_exp     go to state 69
    cmp_binary_exp     go to state 70
    eq_binary_exp      go to state 71
    and_binary_exp     go to state 72
    xor_binary_exp     go to state 73
    or_binary_exp      go to state 74
    type_spec          go to state 75
    primary_type_spec  go to state 76
    tuple_type_spec    go to state 77
    mod_prefix_tid     go to state 78
    fn_type_spec       go to state 79
    postfix_type_spec  go to state 80
    tcall_type_spec    go to state 81
    unary_type_spec    go to state 82


State 164

   52 mod_prefix: mod_prefix • vid ":"
  153 mod_prefix_tid: mod_prefix • tid

    "<val_id>"  shift, and go to state 28
    "<TypeId>"  shift, and go to state 10

    tid  go to state 122
    vid  go to state 123


State 165

   21 mod_val_stmt: vid type_spec • "from" tid stringl

    "from"  shift, and go to state 243


State 166

   20 mod_val_stmt: vid tpattern_seq • "=" expr
   22             | vid tpattern_seq • type_spec "from" tid stringl
  198 tpattern_seq: tpattern_seq • tpattern

    "<TypeId>"  shift, and go to state 10
    "Fn"        shift, and go to state 31
    "("         shift, and go to state 162
    "["         shift, and go to state 155
    "="         shift, and go to state 244

    tid                go to state 44
    mod_prefix         go to state 164
    type_spec          go to state 245
    primary_type_spec  go to state 76
    tuple_type_spec    go to state 77
    mod_prefix_tid     go to state 78
    fn_type_spec       go to state 79
    postfix_type_spec  go to state 80
    tcall_type_spec    go to state 81
    unary_type_spec    go to state 82
    tpattern           go to state 240


State 167

   83 if_exp: "if" bracketed_exp "then" • bracketed_exp
   84       | "if" bracketed_exp "then" • bracketed_exp "else" primary_exp

    "("  shift, and go to state 94
    "{"  shift, and go to state 41

    bracketed_exp  go to state 246
    paren_exp      go to state 51
    vtupleExpr     go to state 52
    vstructExpr    go to state 53
    chain_exp      go to state 58


State 168

  177 vpattern_field: "out" • vid type_spec

    "<val_id>"  shift, and go to state 28

    vid  go to state 247


State 169

  178 vpattern_field: "inout" • vid type_spec

    "<val_id>"  shift, and go to state 28

    vid  go to state 248


State 170

  187 vpattern: "(" ")" •

    $default  reduce using rule 187 (vpattern)


State 171

  176 vpattern_field: vid • type_spec

    "<TypeId>"  shift, and go to state 10
    "Fn"        shift, and go to state 31
    "("         shift, and go to state 162

    tid                go to state 44
    mod_prefix         go to state 164
    type_spec          go to state 249
    primary_type_spec  go to state 76
    tuple_type_spec    go to state 77
    mod_prefix_tid     go to state 78
    fn_type_spec       go to state 79
    postfix_type_spec  go to state 80
    tcall_type_spec    go to state 81
    unary_type_spec    go to state 82


State 172

  189 vpattern_field_cl: vpattern_field •

    $default  reduce using rule 189 (vpattern_field_cl)


State 173

  186 vpattern: "(" vpattern_field_cl • ")"
  190 vpattern_field_cl: vpattern_field_cl • "," vpattern_field

    ","  shift, and go to state 250
    ")"  shift, and go to state 251


State 174

   90 lambda_exp: "fn" vpattern "->" • bracketed_exp
   91           | "fn" vpattern "->" • type_spec bracketed_exp

    "<TypeId>"  shift, and go to state 10
    "Fn"        shift, and go to state 31
    "("         shift, and go to state 40
    "{"         shift, and go to state 41

    tid                go to state 44
    mod_prefix         go to state 164
    bracketed_exp      go to state 252
    paren_exp          go to state 51
    vtupleExpr         go to state 52
    vstructExpr        go to state 53
    chain_exp          go to state 58
    type_spec          go to state 253
    primary_type_spec  go to state 76
    tuple_type_spec    go to state 77
    mod_prefix_tid     go to state 78
    fn_type_spec       go to state 79
    postfix_type_spec  go to state 80
    tcall_type_spec    go to state 81
    unary_type_spec    go to state 82


State 175

  154 fn_type_spec: "Fn" vpattern primary_type_spec •

    $default  reduce using rule 154 (fn_type_spec)


State 176

   55 expr_cl2: expr "," • expr
   65 vtupleExpr: "(" expr "," • ")"

    "<val_id>"               shift, and go to state 28
    "<TypeId>"               shift, and go to state 10
    "if"                     shift, and go to state 29
    "fn"                     shift, and go to state 30
    "Fn"                     shift, and go to state 31
    "not"                    shift, and go to state 32
    "42"                     shift, and go to state 33
    "0x2a"                   shift, and go to state 34
    "42u"                    shift, and go to state 35
    "0x2Au"                  shift, and go to state 36
    "4.2"                    shift, and go to state 37
    "\"dq-string-literal\""  shift, and go to state 38
    "'sq-string-literal'"    shift, and go to state 39
    "("                      shift, and go to state 40
    ")"                      shift, and go to state 254
    "{"                      shift, and go to state 41
    "+"                      shift, and go to state 42
    "-"                      shift, and go to state 43

    tid                go to state 44
    vid                go to state 45
    floatl             go to state 46
    mod_prefix         go to state 47
    expr               go to state 255
    bracketed_exp      go to state 50
    paren_exp          go to state 51
    vtupleExpr         go to state 52
    vstructExpr        go to state 53
    primary_exp        go to state 54
    int_expr           go to state 55
    stringls           go to state 56
    if_exp             go to state 57
    chain_exp          go to state 58
    lambda_exp         go to state 59
    postfix_exp        go to state 60
    tcall_exp          go to state 61
    vcall_exp          go to state 62
    dot_name_exp       go to state 63
    dot_index_exp      go to state 64
    unary_exp          go to state 65
    unary_op           go to state 66
    binary_exp         go to state 67
    mul_binary_exp     go to state 68
    add_binary_exp     go to state 69
    cmp_binary_exp     go to state 70
    eq_binary_exp      go to state 71
    and_binary_exp     go to state 72
    xor_binary_exp     go to state 73
    or_binary_exp      go to state 74
    type_spec          go to state 75
    primary_type_spec  go to state 76
    tuple_type_spec    go to state 77
    mod_prefix_tid     go to state 78
    fn_type_spec       go to state 79
    postfix_type_spec  go to state 80
    tcall_type_spec    go to state 81
    unary_type_spec    go to state 82


State 177

   56 expr_cl2: expr_cl2 "," • expr

    "<val_id>"               shift, and go to state 28
    "<TypeId>"               shift, and go to state 10
    "if"                     shift, and go to state 29
    "fn"                     shift, and go to state 30
    "Fn"                     shift, and go to state 31
    "not"                    shift, and go to state 32
    "42"                     shift, and go to state 33
    "0x2a"                   shift, and go to state 34
    "42u"                    shift, and go to state 35
    "0x2Au"                  shift, and go to state 36
    "4.2"                    shift, and go to state 37
    "\"dq-string-literal\""  shift, and go to state 38
    "'sq-string-literal'"    shift, and go to state 39
    "("                      shift, and go to state 40
    "{"                      shift, and go to state 41
    "+"                      shift, and go to state 42
    "-"                      shift, and go to state 43

    tid                go to state 44
    vid                go to state 45
    floatl             go to state 46
    mod_prefix         go to state 47
    expr               go to state 256
    bracketed_exp      go to state 50
    paren_exp          go to state 51
    vtupleExpr         go to state 52
    vstructExpr        go to state 53
    primary_exp        go to state 54
    int_expr           go to state 55
    stringls           go to state 56
    if_exp             go to state 57
    chain_exp          go to state 58
    lambda_exp         go to state 59
    postfix_exp        go to state 60
    tcall_exp          go to state 61
    vcall_exp          go to state 62
    dot_name_exp       go to state 63
    dot_index_exp      go to state 64
    unary_exp          go to state 65
    unary_op           go to state 66
    binary_exp         go to state 67
    mul_binary_exp     go to state 68
    add_binary_exp     go to state 69
    cmp_binary_exp     go to state 70
    eq_binary_exp      go to state 71
    and_binary_exp     go to state 72
    xor_binary_exp     go to state 73
    or_binary_exp      go to state 74
    type_spec          go to state 75
    primary_type_spec  go to state 76
    tuple_type_spec    go to state 77
    mod_prefix_tid     go to state 78
    fn_type_spec       go to state 79
    postfix_type_spec  go to state 80
    tcall_type_spec    go to state 81
    unary_type_spec    go to state 82


State 178

   66 vtupleExpr: "(" expr_cl2 ")" •

    $default  reduce using rule 66 (vtupleExpr)


State 179

  142 type_spec_cl2: type_spec "," • type_spec
  151 tuple_type_spec: "(" type_spec "," • ")"

    "<TypeId>"  shift, and go to state 10
    "Fn"        shift, and go to state 31
    "("         shift, and go to state 162
    ")"         shift, and go to state 257

    tid                go to state 44
    mod_prefix         go to state 164
    type_spec          go to state 258
    primary_type_spec  go to state 76
    tuple_type_spec    go to state 77
    mod_prefix_tid     go to state 78
    fn_type_spec       go to state 79
    postfix_type_spec  go to state 80
    tcall_type_spec    go to state 81
    unary_type_spec    go to state 82


State 180

  143 type_spec_cl2: type_spec_cl2 "," • type_spec

    "<TypeId>"  shift, and go to state 10
    "Fn"        shift, and go to state 31
    "("         shift, and go to state 162

    tid                go to state 44
    mod_prefix         go to state 164
    type_spec          go to state 259
    primary_type_spec  go to state 76
    tuple_type_spec    go to state 77
    mod_prefix_tid     go to state 78
    fn_type_spec       go to state 79
    postfix_type_spec  go to state 80
    tcall_type_spec    go to state 81
    unary_type_spec    go to state 82


State 181

  152 tuple_type_spec: "(" type_spec_cl2 ")" •

    $default  reduce using rule 152 (tuple_type_spec)


State 182

  183 destructured_lpattern: "(" • lpattern_field_cl ")"

    "<val_id>"  shift, and go to state 28

    vid                go to state 183
    lpattern_field     go to state 260
    lpattern_field_cl  go to state 261


State 183

  179 lpattern_field: vid • type_spec
  180               | vid •

    "<TypeId>"  shift, and go to state 10
    "Fn"        shift, and go to state 31
    "("         shift, and go to state 162

    $default  reduce using rule 180 (lpattern_field)

    tid                go to state 44
    mod_prefix         go to state 164
    type_spec          go to state 262
    primary_type_spec  go to state 76
    tuple_type_spec    go to state 77
    mod_prefix_tid     go to state 78
    fn_type_spec       go to state 79
    postfix_type_spec  go to state 80
    tcall_type_spec    go to state 81
    unary_type_spec    go to state 82


State 184

  184 lpattern: lpattern_field •

    $default  reduce using rule 184 (lpattern)


State 185

  185 lpattern: destructured_lpattern •

    $default  reduce using rule 185 (lpattern)


State 186

   41 const_stmt: "const" lpattern • "=" expr

    "="  shift, and go to state 263


State 187

   42 val_stmt: "val" lpattern • "=" expr

    "="  shift, and go to state 264


State 188

   43 var_stmt: "var" lpattern • "=" expr

    "="  shift, and go to state 265


State 189

   44 set_stmt: "set" expr • "=" expr

    "="  shift, and go to state 266


State 190

   45 discard_stmt: "discard" expr •

    $default  reduce using rule 45 (discard_stmt)


State 191

   88 chain_prefix: chain_prefix_stmt ";" •

    $default  reduce using rule 88 (chain_prefix)


State 192

  175 struct_exp_field: vid "=" • expr

    "<val_id>"               shift, and go to state 28
    "<TypeId>"               shift, and go to state 10
    "if"                     shift, and go to state 29
    "fn"                     shift, and go to state 30
    "Fn"                     shift, and go to state 31
    "not"                    shift, and go to state 32
    "42"                     shift, and go to state 33
    "0x2a"                   shift, and go to state 34
    "42u"                    shift, and go to state 35
    "0x2Au"                  shift, and go to state 36
    "4.2"                    shift, and go to state 37
    "\"dq-string-literal\""  shift, and go to state 38
    "'sq-string-literal'"    shift, and go to state 39
    "("                      shift, and go to state 40
    "{"                      shift, and go to state 41
    "+"                      shift, and go to state 42
    "-"                      shift, and go to state 43

    tid                go to state 44
    vid                go to state 45
    floatl             go to state 46
    mod_prefix         go to state 47
    expr               go to state 267
    bracketed_exp      go to state 50
    paren_exp          go to state 51
    vtupleExpr         go to state 52
    vstructExpr        go to state 53
    primary_exp        go to state 54
    int_expr           go to state 55
    stringls           go to state 56
    if_exp             go to state 57
    chain_exp          go to state 58
    lambda_exp         go to state 59
    postfix_exp        go to state 60
    tcall_exp          go to state 61
    vcall_exp          go to state 62
    dot_name_exp       go to state 63
    dot_index_exp      go to state 64
    unary_exp          go to state 65
    unary_op           go to state 66
    binary_exp         go to state 67
    mul_binary_exp     go to state 68
    add_binary_exp     go to state 69
    cmp_binary_exp     go to state 70
    eq_binary_exp      go to state 71
    and_binary_exp     go to state 72
    xor_binary_exp     go to state 73
    or_binary_exp      go to state 74
    type_spec          go to state 75
    primary_type_spec  go to state 76
    tuple_type_spec    go to state 77
    mod_prefix_tid     go to state 78
    fn_type_spec       go to state 79
    postfix_type_spec  go to state 80
    tcall_type_spec    go to state 81
    unary_type_spec    go to state 82


State 193

   85 chain_exp: "{" expr "}" •

    $default  reduce using rule 85 (chain_exp)


State 194

   86 chain_exp: "{" chain_prefix "}" •

    $default  reduce using rule 86 (chain_exp)


State 195

   89 chain_prefix: chain_prefix chain_prefix_stmt • ";"

    ";"  shift, and go to state 268


State 196

   87 chain_exp: "{" chain_prefix expr • "}"

    "}"  shift, and go to state 269


State 197

  196 struct_exp_field_cl: struct_exp_field_cl "," • struct_exp_field

    "<val_id>"  shift, and go to state 28

    vid               go to state 270
    struct_exp_field  go to state 271


State 198

   67 vstructExpr: "{" struct_exp_field_cl "}" •

    $default  reduce using rule 67 (vstructExpr)


State 199

   52 mod_prefix: mod_prefix vid ":" •

    $default  reduce using rule 52 (mod_prefix)


State 200

  100 dot_name_exp: postfix_exp "." "<val_id>" •

    $default  reduce using rule 100 (dot_name_exp)


State 201

  105 dot_index_exp: postfix_exp "." bracketed_exp •

    $default  reduce using rule 105 (dot_index_exp)


State 202

  104 dot_index_exp: postfix_exp "." int_expr •

    $default  reduce using rule 104 (dot_index_exp)


State 203

  167 varg: "out" • expr

    "<val_id>"               shift, and go to state 28
    "<TypeId>"               shift, and go to state 10
    "if"                     shift, and go to state 29
    "fn"                     shift, and go to state 30
    "Fn"                     shift, and go to state 31
    "not"                    shift, and go to state 32
    "42"                     shift, and go to state 33
    "0x2a"                   shift, and go to state 34
    "42u"                    shift, and go to state 35
    "0x2Au"                  shift, and go to state 36
    "4.2"                    shift, and go to state 37
    "\"dq-string-literal\""  shift, and go to state 38
    "'sq-string-literal'"    shift, and go to state 39
    "("                      shift, and go to state 40
    "{"                      shift, and go to state 41
    "+"                      shift, and go to state 42
    "-"                      shift, and go to state 43

    tid                go to state 44
    vid                go to state 45
    floatl             go to state 46
    mod_prefix         go to state 47
    expr               go to state 272
    bracketed_exp      go to state 50
    paren_exp          go to state 51
    vtupleExpr         go to state 52
    vstructExpr        go to state 53
    primary_exp        go to state 54
    int_expr           go to state 55
    stringls           go to state 56
    if_exp             go to state 57
    chain_exp          go to state 58
    lambda_exp         go to state 59
    postfix_exp        go to state 60
    tcall_exp          go to state 61
    vcall_exp          go to state 62
    dot_name_exp       go to state 63
    dot_index_exp      go to state 64
    unary_exp          go to state 65
    unary_op           go to state 66
    binary_exp         go to state 67
    mul_binary_exp     go to state 68
    add_binary_exp     go to state 69
    cmp_binary_exp     go to state 70
    eq_binary_exp      go to state 71
    and_binary_exp     go to state 72
    xor_binary_exp     go to state 73
    or_binary_exp      go to state 74
    type_spec          go to state 75
    primary_type_spec  go to state 76
    tuple_type_spec    go to state 77
    mod_prefix_tid     go to state 78
    fn_type_spec       go to state 79
    postfix_type_spec  go to state 80
    tcall_type_spec    go to state 81
    unary_type_spec    go to state 82


State 204

  168 varg: "inout" • expr

    "<val_id>"               shift, and go to state 28
    "<TypeId>"               shift, and go to state 10
    "if"                     shift, and go to state 29
    "fn"                     shift, and go to state 30
    "Fn"                     shift, and go to state 31
    "not"                    shift, and go to state 32
    "42"                     shift, and go to state 33
    "0x2a"                   shift, and go to state 34
    "42u"                    shift, and go to state 35
    "0x2Au"                  shift, and go to state 36
    "4.2"                    shift, and go to state 37
    "\"dq-string-literal\""  shift, and go to state 38
    "'sq-string-literal'"    shift, and go to state 39
    "("                      shift, and go to state 40
    "{"                      shift, and go to state 41
    "+"                      shift, and go to state 42
    "-"                      shift, and go to state 43

    tid                go to state 44
    vid                go to state 45
    floatl             go to state 46
    mod_prefix         go to state 47
    expr               go to state 273
    bracketed_exp      go to state 50
    paren_exp          go to state 51
    vtupleExpr         go to state 52
    vstructExpr        go to state 53
    primary_exp        go to state 54
    int_expr           go to state 55
    stringls           go to state 56
    if_exp             go to state 57
    chain_exp          go to state 58
    lambda_exp         go to state 59
    postfix_exp        go to state 60
    tcall_exp          go to state 61
    vcall_exp          go to state 62
    dot_name_exp       go to state 63
    dot_index_exp      go to state 64
    unary_exp          go to state 65
    unary_op           go to state 66
    binary_exp         go to state 67
    mul_binary_exp     go to state 68
    add_binary_exp     go to state 69
    cmp_binary_exp     go to state 70
    eq_binary_exp      go to state 71
    and_binary_exp     go to state 72
    xor_binary_exp     go to state 73
    or_binary_exp      go to state 74
    type_spec          go to state 75
    primary_type_spec  go to state 76
    tuple_type_spec    go to state 77
    mod_prefix_tid     go to state 78
    fn_type_spec       go to state 79
    postfix_type_spec  go to state 80
    tcall_type_spec    go to state 81
    unary_type_spec    go to state 82


State 205

   98 vcall_exp: postfix_exp "(" ")" •

    $default  reduce using rule 98 (vcall_exp)


State 206

  166 varg: expr •

    $default  reduce using rule 166 (varg)


State 207

  169 varg_cl: varg •

    $default  reduce using rule 169 (varg_cl)


State 208

   99 vcall_exp: postfix_exp "(" varg_cl • ")"
  170 varg_cl: varg_cl • "," varg

    ","  shift, and go to state 274
    ")"  shift, and go to state 275


State 209

  163 targ: expr •

    $default  reduce using rule 163 (targ)


State 210

  101 dot_name_exp: type_spec • "." "<TypeId>"
  102             | type_spec • "." "<TypeId>" "using" paren_exp
  162 targ: type_spec •

    "."  shift, and go to state 149

    $default  reduce using rule 162 (targ)


State 211

  164 targ_cl: targ •

    $default  reduce using rule 164 (targ_cl)


State 212

   97 tcall_exp: postfix_exp "[" targ_cl • "]"
  165 targ_cl: targ_cl • "," targ

    ","  shift, and go to state 276
    "]"  shift, and go to state 277


State 213

  116 mul_binary_exp: mul_binary_exp mul_binary_op unary_exp •

    $default  reduce using rule 116 (mul_binary_exp)


State 214

  116 mul_binary_exp: mul_binary_exp • mul_binary_op unary_exp
  120 add_binary_exp: add_binary_exp add_binary_op mul_binary_exp •

    "*"  shift, and go to state 131
    "/"  shift, and go to state 132
    "%"  shift, and go to state 133

    $default  reduce using rule 120 (add_binary_exp)

    mul_binary_op  go to state 134


State 215

  120 add_binary_exp: add_binary_exp • add_binary_op mul_binary_exp
  126 cmp_binary_exp: cmp_binary_exp cmp_binary_op add_binary_exp •

    "+"  shift, and go to state 135
    "-"  shift, and go to state 136

    $default  reduce using rule 126 (cmp_binary_exp)

    add_binary_op  go to state 137


State 216

  126 cmp_binary_exp: cmp_binary_exp • cmp_binary_op add_binary_exp
  130 eq_binary_exp: eq_binary_exp eq_binary_op cmp_binary_exp •

    "<"   shift, and go to state 138
    "<="  shift, and go to state 139
    ">"   shift, and go to state 140
    ">="  shift, and go to state 141

    $default  reduce using rule 130 (eq_binary_exp)

    cmp_binary_op  go to state 142


State 217

  130 eq_binary_exp: eq_binary_exp • eq_binary_op cmp_binary_exp
  132 and_binary_exp: and_binary_exp "and" eq_binary_exp •

    "=="  shift, and go to state 143
    "!="  shift, and go to state 144

    $default  reduce using rule 132 (and_binary_exp)

    eq_binary_op  go to state 145


State 218

  132 and_binary_exp: and_binary_exp • "and" eq_binary_exp
  134 xor_binary_exp: xor_binary_exp "xor" and_binary_exp •

    "and"  shift, and go to state 146

    $default  reduce using rule 134 (xor_binary_exp)


State 219

  134 xor_binary_exp: xor_binary_exp • "xor" and_binary_exp
  136 or_binary_exp: or_binary_exp "or" xor_binary_exp •

    "xor"  shift, and go to state 147

    $default  reduce using rule 136 (or_binary_exp)


State 220

  101 dot_name_exp: type_spec "." "<TypeId>" •
  102             | type_spec "." "<TypeId>" • "using" paren_exp

    "using"  shift, and go to state 278

    $default  reduce using rule 101 (dot_name_exp)


State 221

  157 tcall_type_spec: postfix_type_spec "[" targ_cl • "]"
  165 targ_cl: targ_cl • "," targ

    ","  shift, and go to state 276
    "]"  shift, and go to state 279


State 222

   10 sub_mod_stmt: "sub" "<TypeId>" "{" • mod_content "}"

    "<val_id>"  shift, and go to state 28
    "<TypeId>"  shift, and go to state 10
    "sub"       shift, and go to state 83

    sub_mod_stmt        go to state 84
    mod_content         go to state 280
    mod_content_stmt    go to state 86
    mod_val_stmt        go to state 87
    mod_type_stmt       go to state 88
    mod_enum_stmt       go to state 89
    mod_typeclass_stmt  go to state 90
    tid                 go to state 91
    vid                 go to state 92


State 223

   11 sub_mod_stmt: "sub" "<TypeId>" tpattern_seq • "{" mod_content "}"
  198 tpattern_seq: tpattern_seq • tpattern

    "["  shift, and go to state 155
    "{"  shift, and go to state 281

    tpattern  go to state 240


State 224

   13 mod_content: mod_content mod_content_stmt ";" •

    $default  reduce using rule 13 (mod_content)


State 225

  182 tpattern_field: tid • class_spec

    "<TypeId>"  shift, and go to state 10

    tid                 go to state 282
    class_spec          go to state 283
    primary_class_spec  go to state 284
    postfix_class_spec  go to state 285


State 226

  181 tpattern_field: vid • type_spec

    "<TypeId>"  shift, and go to state 10
    "Fn"        shift, and go to state 31
    "("         shift, and go to state 162

    tid                go to state 44
    mod_prefix         go to state 164
    type_spec          go to state 286
    primary_type_spec  go to state 76
    tuple_type_spec    go to state 77
    mod_prefix_tid     go to state 78
    fn_type_spec       go to state 79
    postfix_type_spec  go to state 80
    tcall_type_spec    go to state 81
    unary_type_spec    go to state 82


State 227

  193 tpattern_field_cl: tpattern_field •

    $default  reduce using rule 193 (tpattern_field_cl)


State 228

  188 tpattern: "[" tpattern_field_cl • "]"
  194 tpattern_field_cl: tpattern_field_cl • "," tpattern_field

    ","  shift, and go to state 287
    "]"  shift, and go to state 288


State 229

  161 struct_type_spec: "{" • struct_type_spec_field_cl "}"

    "<val_id>"  shift, and go to state 28

    vid                        go to state 289
    struct_type_spec_field     go to state 290
    struct_type_spec_field_cl  go to state 291


State 230

  159 long_type_spec: unary_type_spec •

    $default  reduce using rule 159 (long_type_spec)


State 231

   23 mod_type_stmt: tid "=" long_type_spec •

    $default  reduce using rule 23 (mod_type_stmt)


State 232

  160 long_type_spec: struct_type_spec •

    $default  reduce using rule 160 (long_type_spec)


State 233

   27 enum_field_pl: "|" unprefixed_enum_field_pl •
   29 unprefixed_enum_field_pl: unprefixed_enum_field_pl • "|" enum_field

    "|"  shift, and go to state 292

    $default  reduce using rule 27 (enum_field_pl)


State 234

   28 unprefixed_enum_field_pl: enum_field •

    $default  reduce using rule 28 (unprefixed_enum_field_pl)


State 235

   30 enum_field: tid •
   31           | tid • type_spec

    "<TypeId>"  shift, and go to state 10
    "Fn"        shift, and go to state 31
    "("         shift, and go to state 162

    $default  reduce using rule 30 (enum_field)

    tid                go to state 44
    mod_prefix         go to state 164
    type_spec          go to state 293
    primary_type_spec  go to state 76
    tuple_type_spec    go to state 77
    mod_prefix_tid     go to state 78
    fn_type_spec       go to state 79
    postfix_type_spec  go to state 80
    tcall_type_spec    go to state 81
    unary_type_spec    go to state 82


State 236

   32 mod_typeclass_stmt: tid ":-" "<" • tid class_spec ">" "{" type_query_exp_sl "}"

    "<TypeId>"  shift, and go to state 10

    tid  go to state 294


State 237

   24 mod_type_stmt: tid tpattern_seq "=" • long_type_spec

    "<TypeId>"  shift, and go to state 10
    "Fn"        shift, and go to state 31
    "("         shift, and go to state 162
    "{"         shift, and go to state 229

    tid                go to state 44
    mod_prefix         go to state 164
    primary_type_spec  go to state 76
    tuple_type_spec    go to state 77
    mod_prefix_tid     go to state 78
    fn_type_spec       go to state 79
    postfix_type_spec  go to state 80
    tcall_type_spec    go to state 81
    unary_type_spec    go to state 230
    long_type_spec     go to state 295
    struct_type_spec   go to state 232


State 238

   33 mod_typeclass_stmt: tid tpattern_seq ":-" • "<" tid class_spec ">" "{" type_query_exp_sl "}"

    "<"  shift, and go to state 296


State 239

   26 mod_enum_stmt: tid tpattern_seq enum_field_pl •

    $default  reduce using rule 26 (mod_enum_stmt)


State 240

  198 tpattern_seq: tpattern_seq tpattern •

    $default  reduce using rule 198 (tpattern_seq)


State 241

  142 type_spec_cl2: type_spec • "," type_spec
  151 tuple_type_spec: "(" type_spec • "," ")"

    ","  shift, and go to state 179


State 242

   19 mod_val_stmt: vid "=" expr •

    $default  reduce using rule 19 (mod_val_stmt)


State 243

   21 mod_val_stmt: vid type_spec "from" • tid stringl

    "<TypeId>"  shift, and go to state 10

    tid  go to state 297


State 244

   20 mod_val_stmt: vid tpattern_seq "=" • expr

    "<val_id>"               shift, and go to state 28
    "<TypeId>"               shift, and go to state 10
    "if"                     shift, and go to state 29
    "fn"                     shift, and go to state 30
    "Fn"                     shift, and go to state 31
    "not"                    shift, and go to state 32
    "42"                     shift, and go to state 33
    "0x2a"                   shift, and go to state 34
    "42u"                    shift, and go to state 35
    "0x2Au"                  shift, and go to state 36
    "4.2"                    shift, and go to state 37
    "\"dq-string-literal\""  shift, and go to state 38
    "'sq-string-literal'"    shift, and go to state 39
    "("                      shift, and go to state 40
    "{"                      shift, and go to state 41
    "+"                      shift, and go to state 42
    "-"                      shift, and go to state 43

    tid                go to state 44
    vid                go to state 45
    floatl             go to state 46
    mod_prefix         go to state 47
    expr               go to state 298
    bracketed_exp      go to state 50
    paren_exp          go to state 51
    vtupleExpr         go to state 52
    vstructExpr        go to state 53
    primary_exp        go to state 54
    int_expr           go to state 55
    stringls           go to state 56
    if_exp             go to state 57
    chain_exp          go to state 58
    lambda_exp         go to state 59
    postfix_exp        go to state 60
    tcall_exp          go to state 61
    vcall_exp          go to state 62
    dot_name_exp       go to state 63
    dot_index_exp      go to state 64
    unary_exp          go to state 65
    unary_op           go to state 66
    binary_exp         go to state 67
    mul_binary_exp     go to state 68
    add_binary_exp     go to state 69
    cmp_binary_exp     go to state 70
    eq_binary_exp      go to state 71
    and_binary_exp     go to state 72
    xor_binary_exp     go to state 73
    or_binary_exp      go to state 74
    type_spec          go to state 75
    primary_type_spec  go to state 76
    tuple_type_spec    go to state 77
    mod_prefix_tid     go to state 78
    fn_type_spec       go to state 79
    postfix_type_spec  go to state 80
    tcall_type_spec    go to state 81
    unary_type_spec    go to state 82


State 245

   22 mod_val_stmt: vid tpattern_seq type_spec • "from" tid stringl

    "from"  shift, and go to state 299


State 246

   83 if_exp: "if" bracketed_exp "then" bracketed_exp •
   84       | "if" bracketed_exp "then" bracketed_exp • "else" primary_exp

    "else"  shift, and go to state 300

    $default  reduce using rule 83 (if_exp)


State 247

  177 vpattern_field: "out" vid • type_spec

    "<TypeId>"  shift, and go to state 10
    "Fn"        shift, and go to state 31
    "("         shift, and go to state 162

    tid                go to state 44
    mod_prefix         go to state 164
    type_spec          go to state 301
    primary_type_spec  go to state 76
    tuple_type_spec    go to state 77
    mod_prefix_tid     go to state 78
    fn_type_spec       go to state 79
    postfix_type_spec  go to state 80
    tcall_type_spec    go to state 81
    unary_type_spec    go to state 82


State 248

  178 vpattern_field: "inout" vid • type_spec

    "<TypeId>"  shift, and go to state 10
    "Fn"        shift, and go to state 31
    "("         shift, and go to state 162

    tid                go to state 44
    mod_prefix         go to state 164
    type_spec          go to state 302
    primary_type_spec  go to state 76
    tuple_type_spec    go to state 77
    mod_prefix_tid     go to state 78
    fn_type_spec       go to state 79
    postfix_type_spec  go to state 80
    tcall_type_spec    go to state 81
    unary_type_spec    go to state 82


State 249

  176 vpattern_field: vid type_spec •

    $default  reduce using rule 176 (vpattern_field)


State 250

  190 vpattern_field_cl: vpattern_field_cl "," • vpattern_field

    "<val_id>"  shift, and go to state 28
    "out"       shift, and go to state 168
    "inout"     shift, and go to state 169

    vid             go to state 171
    vpattern_field  go to state 303


State 251

  186 vpattern: "(" vpattern_field_cl ")" •

    $default  reduce using rule 186 (vpattern)


State 252

   90 lambda_exp: "fn" vpattern "->" bracketed_exp •

    $default  reduce using rule 90 (lambda_exp)


State 253

   91 lambda_exp: "fn" vpattern "->" type_spec • bracketed_exp

    "("  shift, and go to state 94
    "{"  shift, and go to state 41

    bracketed_exp  go to state 304
    paren_exp      go to state 51
    vtupleExpr     go to state 52
    vstructExpr    go to state 53
    chain_exp      go to state 58


State 254

   65 vtupleExpr: "(" expr "," ")" •

    $default  reduce using rule 65 (vtupleExpr)


State 255

   55 expr_cl2: expr "," expr •

    $default  reduce using rule 55 (expr_cl2)


State 256

   56 expr_cl2: expr_cl2 "," expr •

    $default  reduce using rule 56 (expr_cl2)


State 257

  151 tuple_type_spec: "(" type_spec "," ")" •

    $default  reduce using rule 151 (tuple_type_spec)


State 258

  142 type_spec_cl2: type_spec "," type_spec •

    $default  reduce using rule 142 (type_spec_cl2)


State 259

  143 type_spec_cl2: type_spec_cl2 "," type_spec •

    $default  reduce using rule 143 (type_spec_cl2)


State 260

  191 lpattern_field_cl: lpattern_field •

    $default  reduce using rule 191 (lpattern_field_cl)


State 261

  183 destructured_lpattern: "(" lpattern_field_cl • ")"
  192 lpattern_field_cl: lpattern_field_cl • "," lpattern_field

    ","  shift, and go to state 305
    ")"  shift, and go to state 306


State 262

  179 lpattern_field: vid type_spec •

    $default  reduce using rule 179 (lpattern_field)


State 263

   41 const_stmt: "const" lpattern "=" • expr

    "<val_id>"               shift, and go to state 28
    "<TypeId>"               shift, and go to state 10
    "if"                     shift, and go to state 29
    "fn"                     shift, and go to state 30
    "Fn"                     shift, and go to state 31
    "not"                    shift, and go to state 32
    "42"                     shift, and go to state 33
    "0x2a"                   shift, and go to state 34
    "42u"                    shift, and go to state 35
    "0x2Au"                  shift, and go to state 36
    "4.2"                    shift, and go to state 37
    "\"dq-string-literal\""  shift, and go to state 38
    "'sq-string-literal'"    shift, and go to state 39
    "("                      shift, and go to state 40
    "{"                      shift, and go to state 41
    "+"                      shift, and go to state 42
    "-"                      shift, and go to state 43

    tid                go to state 44
    vid                go to state 45
    floatl             go to state 46
    mod_prefix         go to state 47
    expr               go to state 307
    bracketed_exp      go to state 50
    paren_exp          go to state 51
    vtupleExpr         go to state 52
    vstructExpr        go to state 53
    primary_exp        go to state 54
    int_expr           go to state 55
    stringls           go to state 56
    if_exp             go to state 57
    chain_exp          go to state 58
    lambda_exp         go to state 59
    postfix_exp        go to state 60
    tcall_exp          go to state 61
    vcall_exp          go to state 62
    dot_name_exp       go to state 63
    dot_index_exp      go to state 64
    unary_exp          go to state 65
    unary_op           go to state 66
    binary_exp         go to state 67
    mul_binary_exp     go to state 68
    add_binary_exp     go to state 69
    cmp_binary_exp     go to state 70
    eq_binary_exp      go to state 71
    and_binary_exp     go to state 72
    xor_binary_exp     go to state 73
    or_binary_exp      go to state 74
    type_spec          go to state 75
    primary_type_spec  go to state 76
    tuple_type_spec    go to state 77
    mod_prefix_tid     go to state 78
    fn_type_spec       go to state 79
    postfix_type_spec  go to state 80
    tcall_type_spec    go to state 81
    unary_type_spec    go to state 82


State 264

   42 val_stmt: "val" lpattern "=" • expr

    "<val_id>"               shift, and go to state 28
    "<TypeId>"               shift, and go to state 10
    "if"                     shift, and go to state 29
    "fn"                     shift, and go to state 30
    "Fn"                     shift, and go to state 31
    "not"                    shift, and go to state 32
    "42"                     shift, and go to state 33
    "0x2a"                   shift, and go to state 34
    "42u"                    shift, and go to state 35
    "0x2Au"                  shift, and go to state 36
    "4.2"                    shift, and go to state 37
    "\"dq-string-literal\""  shift, and go to state 38
    "'sq-string-literal'"    shift, and go to state 39
    "("                      shift, and go to state 40
    "{"                      shift, and go to state 41
    "+"                      shift, and go to state 42
    "-"                      shift, and go to state 43

    tid                go to state 44
    vid                go to state 45
    floatl             go to state 46
    mod_prefix         go to state 47
    expr               go to state 308
    bracketed_exp      go to state 50
    paren_exp          go to state 51
    vtupleExpr         go to state 52
    vstructExpr        go to state 53
    primary_exp        go to state 54
    int_expr           go to state 55
    stringls           go to state 56
    if_exp             go to state 57
    chain_exp          go to state 58
    lambda_exp         go to state 59
    postfix_exp        go to state 60
    tcall_exp          go to state 61
    vcall_exp          go to state 62
    dot_name_exp       go to state 63
    dot_index_exp      go to state 64
    unary_exp          go to state 65
    unary_op           go to state 66
    binary_exp         go to state 67
    mul_binary_exp     go to state 68
    add_binary_exp     go to state 69
    cmp_binary_exp     go to state 70
    eq_binary_exp      go to state 71
    and_binary_exp     go to state 72
    xor_binary_exp     go to state 73
    or_binary_exp      go to state 74
    type_spec          go to state 75
    primary_type_spec  go to state 76
    tuple_type_spec    go to state 77
    mod_prefix_tid     go to state 78
    fn_type_spec       go to state 79
    postfix_type_spec  go to state 80
    tcall_type_spec    go to state 81
    unary_type_spec    go to state 82


State 265

   43 var_stmt: "var" lpattern "=" • expr

    "<val_id>"               shift, and go to state 28
    "<TypeId>"               shift, and go to state 10
    "if"                     shift, and go to state 29
    "fn"                     shift, and go to state 30
    "Fn"                     shift, and go to state 31
    "not"                    shift, and go to state 32
    "42"                     shift, and go to state 33
    "0x2a"                   shift, and go to state 34
    "42u"                    shift, and go to state 35
    "0x2Au"                  shift, and go to state 36
    "4.2"                    shift, and go to state 37
    "\"dq-string-literal\""  shift, and go to state 38
    "'sq-string-literal'"    shift, and go to state 39
    "("                      shift, and go to state 40
    "{"                      shift, and go to state 41
    "+"                      shift, and go to state 42
    "-"                      shift, and go to state 43

    tid                go to state 44
    vid                go to state 45
    floatl             go to state 46
    mod_prefix         go to state 47
    expr               go to state 309
    bracketed_exp      go to state 50
    paren_exp          go to state 51
    vtupleExpr         go to state 52
    vstructExpr        go to state 53
    primary_exp        go to state 54
    int_expr           go to state 55
    stringls           go to state 56
    if_exp             go to state 57
    chain_exp          go to state 58
    lambda_exp         go to state 59
    postfix_exp        go to state 60
    tcall_exp          go to state 61
    vcall_exp          go to state 62
    dot_name_exp       go to state 63
    dot_index_exp      go to state 64
    unary_exp          go to state 65
    unary_op           go to state 66
    binary_exp         go to state 67
    mul_binary_exp     go to state 68
    add_binary_exp     go to state 69
    cmp_binary_exp     go to state 70
    eq_binary_exp      go to state 71
    and_binary_exp     go to state 72
    xor_binary_exp     go to state 73
    or_binary_exp      go to state 74
    type_spec          go to state 75
    primary_type_spec  go to state 76
    tuple_type_spec    go to state 77
    mod_prefix_tid     go to state 78
    fn_type_spec       go to state 79
    postfix_type_spec  go to state 80
    tcall_type_spec    go to state 81
    unary_type_spec    go to state 82


State 266

   44 set_stmt: "set" expr "=" • expr

    "<val_id>"               shift, and go to state 28
    "<TypeId>"               shift, and go to state 10
    "if"                     shift, and go to state 29
    "fn"                     shift, and go to state 30
    "Fn"                     shift, and go to state 31
    "not"                    shift, and go to state 32
    "42"                     shift, and go to state 33
    "0x2a"                   shift, and go to state 34
    "42u"                    shift, and go to state 35
    "0x2Au"                  shift, and go to state 36
    "4.2"                    shift, and go to state 37
    "\"dq-string-literal\""  shift, and go to state 38
    "'sq-string-literal'"    shift, and go to state 39
    "("                      shift, and go to state 40
    "{"                      shift, and go to state 41
    "+"                      shift, and go to state 42
    "-"                      shift, and go to state 43

    tid                go to state 44
    vid                go to state 45
    floatl             go to state 46
    mod_prefix         go to state 47
    expr               go to state 310
    bracketed_exp      go to state 50
    paren_exp          go to state 51
    vtupleExpr         go to state 52
    vstructExpr        go to state 53
    primary_exp        go to state 54
    int_expr           go to state 55
    stringls           go to state 56
    if_exp             go to state 57
    chain_exp          go to state 58
    lambda_exp         go to state 59
    postfix_exp        go to state 60
    tcall_exp          go to state 61
    vcall_exp          go to state 62
    dot_name_exp       go to state 63
    dot_index_exp      go to state 64
    unary_exp          go to state 65
    unary_op           go to state 66
    binary_exp         go to state 67
    mul_binary_exp     go to state 68
    add_binary_exp     go to state 69
    cmp_binary_exp     go to state 70
    eq_binary_exp      go to state 71
    and_binary_exp     go to state 72
    xor_binary_exp     go to state 73
    or_binary_exp      go to state 74
    type_spec          go to state 75
    primary_type_spec  go to state 76
    tuple_type_spec    go to state 77
    mod_prefix_tid     go to state 78
    fn_type_spec       go to state 79
    postfix_type_spec  go to state 80
    tcall_type_spec    go to state 81
    unary_type_spec    go to state 82


State 267

  175 struct_exp_field: vid "=" expr •

    $default  reduce using rule 175 (struct_exp_field)


State 268

   89 chain_prefix: chain_prefix chain_prefix_stmt ";" •

    $default  reduce using rule 89 (chain_prefix)


State 269

   87 chain_exp: "{" chain_prefix expr "}" •

    $default  reduce using rule 87 (chain_exp)


State 270

  175 struct_exp_field: vid • "=" expr

    "="  shift, and go to state 192


State 271

  196 struct_exp_field_cl: struct_exp_field_cl "," struct_exp_field •

    $default  reduce using rule 196 (struct_exp_field_cl)


State 272

  167 varg: "out" expr •

    $default  reduce using rule 167 (varg)


State 273

  168 varg: "inout" expr •

    $default  reduce using rule 168 (varg)


State 274

  170 varg_cl: varg_cl "," • varg

    "<val_id>"               shift, and go to state 28
    "<TypeId>"               shift, and go to state 10
    "if"                     shift, and go to state 29
    "fn"                     shift, and go to state 30
    "Fn"                     shift, and go to state 31
    "not"                    shift, and go to state 32
    "out"                    shift, and go to state 203
    "inout"                  shift, and go to state 204
    "42"                     shift, and go to state 33
    "0x2a"                   shift, and go to state 34
    "42u"                    shift, and go to state 35
    "0x2Au"                  shift, and go to state 36
    "4.2"                    shift, and go to state 37
    "\"dq-string-literal\""  shift, and go to state 38
    "'sq-string-literal'"    shift, and go to state 39
    "("                      shift, and go to state 40
    "{"                      shift, and go to state 41
    "+"                      shift, and go to state 42
    "-"                      shift, and go to state 43

    tid                go to state 44
    vid                go to state 45
    floatl             go to state 46
    mod_prefix         go to state 47
    expr               go to state 206
    bracketed_exp      go to state 50
    paren_exp          go to state 51
    vtupleExpr         go to state 52
    vstructExpr        go to state 53
    primary_exp        go to state 54
    int_expr           go to state 55
    stringls           go to state 56
    if_exp             go to state 57
    chain_exp          go to state 58
    lambda_exp         go to state 59
    postfix_exp        go to state 60
    tcall_exp          go to state 61
    vcall_exp          go to state 62
    dot_name_exp       go to state 63
    dot_index_exp      go to state 64
    unary_exp          go to state 65
    unary_op           go to state 66
    binary_exp         go to state 67
    mul_binary_exp     go to state 68
    add_binary_exp     go to state 69
    cmp_binary_exp     go to state 70
    eq_binary_exp      go to state 71
    and_binary_exp     go to state 72
    xor_binary_exp     go to state 73
    or_binary_exp      go to state 74
    type_spec          go to state 75
    primary_type_spec  go to state 76
    tuple_type_spec    go to state 77
    mod_prefix_tid     go to state 78
    fn_type_spec       go to state 79
    postfix_type_spec  go to state 80
    tcall_type_spec    go to state 81
    unary_type_spec    go to state 82
    varg               go to state 311


State 275

   99 vcall_exp: postfix_exp "(" varg_cl ")" •

    $default  reduce using rule 99 (vcall_exp)


State 276

  165 targ_cl: targ_cl "," • targ

    "<val_id>"               shift, and go to state 28
    "<TypeId>"               shift, and go to state 10
    "if"                     shift, and go to state 29
    "fn"                     shift, and go to state 30
    "Fn"                     shift, and go to state 31
    "not"                    shift, and go to state 32
    "42"                     shift, and go to state 33
    "0x2a"                   shift, and go to state 34
    "42u"                    shift, and go to state 35
    "0x2Au"                  shift, and go to state 36
    "4.2"                    shift, and go to state 37
    "\"dq-string-literal\""  shift, and go to state 38
    "'sq-string-literal'"    shift, and go to state 39
    "("                      shift, and go to state 40
    "{"                      shift, and go to state 41
    "+"                      shift, and go to state 42
    "-"                      shift, and go to state 43

    tid                go to state 44
    vid                go to state 45
    floatl             go to state 46
    mod_prefix         go to state 47
    expr               go to state 209
    bracketed_exp      go to state 50
    paren_exp          go to state 51
    vtupleExpr         go to state 52
    vstructExpr        go to state 53
    primary_exp        go to state 54
    int_expr           go to state 55
    stringls           go to state 56
    if_exp             go to state 57
    chain_exp          go to state 58
    lambda_exp         go to state 59
    postfix_exp        go to state 60
    tcall_exp          go to state 61
    vcall_exp          go to state 62
    dot_name_exp       go to state 63
    dot_index_exp      go to state 64
    unary_exp          go to state 65
    unary_op           go to state 66
    binary_exp         go to state 67
    mul_binary_exp     go to state 68
    add_binary_exp     go to state 69
    cmp_binary_exp     go to state 70
    eq_binary_exp      go to state 71
    and_binary_exp     go to state 72
    xor_binary_exp     go to state 73
    or_binary_exp      go to state 74
    type_spec          go to state 210
    primary_type_spec  go to state 76
    tuple_type_spec    go to state 77
    mod_prefix_tid     go to state 78
    fn_type_spec       go to state 79
    postfix_type_spec  go to state 80
    tcall_type_spec    go to state 81
    unary_type_spec    go to state 82
    targ               go to state 312


State 277

   97 tcall_exp: postfix_exp "[" targ_cl "]" •

    $default  reduce using rule 97 (tcall_exp)


State 278

  102 dot_name_exp: type_spec "." "<TypeId>" "using" • paren_exp

    "("  shift, and go to state 24

    paren_exp  go to state 313


State 279

  157 tcall_type_spec: postfix_type_spec "[" targ_cl "]" •

    $default  reduce using rule 157 (tcall_type_spec)


State 280

   10 sub_mod_stmt: "sub" "<TypeId>" "{" mod_content • "}"
   13 mod_content: mod_content • mod_content_stmt ";"

    "<val_id>"  shift, and go to state 28
    "<TypeId>"  shift, and go to state 10
    "sub"       shift, and go to state 83
    "}"         shift, and go to state 314

    sub_mod_stmt        go to state 84
    mod_content_stmt    go to state 153
    mod_val_stmt        go to state 87
    mod_type_stmt       go to state 88
    mod_enum_stmt       go to state 89
    mod_typeclass_stmt  go to state 90
    tid                 go to state 91
    vid                 go to state 92


State 281

   11 sub_mod_stmt: "sub" "<TypeId>" tpattern_seq "{" • mod_content "}"

    "<val_id>"  shift, and go to state 28
    "<TypeId>"  shift, and go to state 10
    "sub"       shift, and go to state 83

    sub_mod_stmt        go to state 84
    mod_content         go to state 315
    mod_content_stmt    go to state 86
    mod_val_stmt        go to state 87
    mod_type_stmt       go to state 88
    mod_enum_stmt       go to state 89
    mod_typeclass_stmt  go to state 90
    tid                 go to state 91
    vid                 go to state 92


State 282

  172 primary_class_spec: tid •

    $default  reduce using rule 172 (primary_class_spec)


State 283

  182 tpattern_field: tid class_spec •

    $default  reduce using rule 182 (tpattern_field)


State 284

  173 postfix_class_spec: primary_class_spec •

    $default  reduce using rule 173 (postfix_class_spec)


State 285

  171 class_spec: postfix_class_spec •
  174 postfix_class_spec: postfix_class_spec • "[" targ_cl "]"

    "["  shift, and go to state 316

    $default  reduce using rule 171 (class_spec)


State 286

  181 tpattern_field: vid type_spec •

    $default  reduce using rule 181 (tpattern_field)


State 287

  194 tpattern_field_cl: tpattern_field_cl "," • tpattern_field

    "<val_id>"  shift, and go to state 28
    "<TypeId>"  shift, and go to state 10

    tid             go to state 225
    vid             go to state 226
    tpattern_field  go to state 317


State 288

  188 tpattern: "[" tpattern_field_cl "]" •

    $default  reduce using rule 188 (tpattern)


State 289

  144 struct_type_spec_field: vid • type_spec

    "<TypeId>"  shift, and go to state 10
    "Fn"        shift, and go to state 31
    "("         shift, and go to state 162

    tid                go to state 44
    mod_prefix         go to state 164
    type_spec          go to state 318
    primary_type_spec  go to state 76
    tuple_type_spec    go to state 77
    mod_prefix_tid     go to state 78
    fn_type_spec       go to state 79
    postfix_type_spec  go to state 80
    tcall_type_spec    go to state 81
    unary_type_spec    go to state 82


State 290

  145 struct_type_spec_field_cl: struct_type_spec_field •

    $default  reduce using rule 145 (struct_type_spec_field_cl)


State 291

  146 struct_type_spec_field_cl: struct_type_spec_field_cl • "," struct_type_spec_field
  161 struct_type_spec: "{" struct_type_spec_field_cl • "}"

    ","  shift, and go to state 319
    "}"  shift, and go to state 320


State 292

   29 unprefixed_enum_field_pl: unprefixed_enum_field_pl "|" • enum_field

    "<TypeId>"  shift, and go to state 10

    enum_field  go to state 321
    tid         go to state 235


State 293

   31 enum_field: tid type_spec •

    $default  reduce using rule 31 (enum_field)


State 294

   32 mod_typeclass_stmt: tid ":-" "<" tid • class_spec ">" "{" type_query_exp_sl "}"

    "<TypeId>"  shift, and go to state 10

    tid                 go to state 282
    class_spec          go to state 322
    primary_class_spec  go to state 284
    postfix_class_spec  go to state 285


State 295

   24 mod_type_stmt: tid tpattern_seq "=" long_type_spec •

    $default  reduce using rule 24 (mod_type_stmt)


State 296

   33 mod_typeclass_stmt: tid tpattern_seq ":-" "<" • tid class_spec ">" "{" type_query_exp_sl "}"

    "<TypeId>"  shift, and go to state 10

    tid  go to state 323


State 297

   21 mod_val_stmt: vid type_spec "from" tid • stringl

    "\"dq-string-literal\""  shift, and go to state 21
    "'sq-string-literal'"    shift, and go to state 22

    stringl  go to state 324


State 298

   20 mod_val_stmt: vid tpattern_seq "=" expr •

    $default  reduce using rule 20 (mod_val_stmt)


State 299

   22 mod_val_stmt: vid tpattern_seq type_spec "from" • tid stringl

    "<TypeId>"  shift, and go to state 10

    tid  go to state 325


State 300

   84 if_exp: "if" bracketed_exp "then" bracketed_exp "else" • primary_exp

    "<val_id>"               shift, and go to state 28
    "if"                     shift, and go to state 29
    "fn"                     shift, and go to state 30
    "42"                     shift, and go to state 33
    "0x2a"                   shift, and go to state 34
    "42u"                    shift, and go to state 35
    "0x2Au"                  shift, and go to state 36
    "4.2"                    shift, and go to state 37
    "\"dq-string-literal\""  shift, and go to state 38
    "'sq-string-literal'"    shift, and go to state 39
    "("                      shift, and go to state 94
    "{"                      shift, and go to state 41

    vid            go to state 45
    floatl         go to state 46
    bracketed_exp  go to state 50
    paren_exp      go to state 51
    vtupleExpr     go to state 52
    vstructExpr    go to state 53
    primary_exp    go to state 326
    int_expr       go to state 55
    stringls       go to state 56
    if_exp         go to state 57
    chain_exp      go to state 58
    lambda_exp     go to state 59


State 301

  177 vpattern_field: "out" vid type_spec •

    $default  reduce using rule 177 (vpattern_field)


State 302

  178 vpattern_field: "inout" vid type_spec •

    $default  reduce using rule 178 (vpattern_field)


State 303

  190 vpattern_field_cl: vpattern_field_cl "," vpattern_field •

    $default  reduce using rule 190 (vpattern_field_cl)


State 304

   91 lambda_exp: "fn" vpattern "->" type_spec bracketed_exp •

    $default  reduce using rule 91 (lambda_exp)


State 305

  192 lpattern_field_cl: lpattern_field_cl "," • lpattern_field

    "<val_id>"  shift, and go to state 28

    vid             go to state 183
    lpattern_field  go to state 327


State 306

  183 destructured_lpattern: "(" lpattern_field_cl ")" •

    $default  reduce using rule 183 (destructured_lpattern)


State 307

   41 const_stmt: "const" lpattern "=" expr •

    $default  reduce using rule 41 (const_stmt)


State 308

   42 val_stmt: "val" lpattern "=" expr •

    $default  reduce using rule 42 (val_stmt)


State 309

   43 var_stmt: "var" lpattern "=" expr •

    $default  reduce using rule 43 (var_stmt)


State 310

   44 set_stmt: "set" expr "=" expr •

    $default  reduce using rule 44 (set_stmt)


State 311

  170 varg_cl: varg_cl "," varg •

    $default  reduce using rule 170 (varg_cl)


State 312

  165 targ_cl: targ_cl "," targ •

    $default  reduce using rule 165 (targ_cl)


State 313

  102 dot_name_exp: type_spec "." "<TypeId>" "using" paren_exp •

    $default  reduce using rule 102 (dot_name_exp)


State 314

   10 sub_mod_stmt: "sub" "<TypeId>" "{" mod_content "}" •

    $default  reduce using rule 10 (sub_mod_stmt)


State 315

   11 sub_mod_stmt: "sub" "<TypeId>" tpattern_seq "{" mod_content • "}"
   13 mod_content: mod_content • mod_content_stmt ";"

    "<val_id>"  shift, and go to state 28
    "<TypeId>"  shift, and go to state 10
    "sub"       shift, and go to state 83
    "}"         shift, and go to state 328

    sub_mod_stmt        go to state 84
    mod_content_stmt    go to state 153
    mod_val_stmt        go to state 87
    mod_type_stmt       go to state 88
    mod_enum_stmt       go to state 89
    mod_typeclass_stmt  go to state 90
    tid                 go to state 91
    vid                 go to state 92


State 316

  174 postfix_class_spec: postfix_class_spec "[" • targ_cl "]"

    "<val_id>"               shift, and go to state 28
    "<TypeId>"               shift, and go to state 10
    "if"                     shift, and go to state 29
    "fn"                     shift, and go to state 30
    "Fn"                     shift, and go to state 31
    "not"                    shift, and go to state 32
    "42"                     shift, and go to state 33
    "0x2a"                   shift, and go to state 34
    "42u"                    shift, and go to state 35
    "0x2Au"                  shift, and go to state 36
    "4.2"                    shift, and go to state 37
    "\"dq-string-literal\""  shift, and go to state 38
    "'sq-string-literal'"    shift, and go to state 39
    "("                      shift, and go to state 40
    "{"                      shift, and go to state 41
    "+"                      shift, and go to state 42
    "-"                      shift, and go to state 43

    tid                go to state 44
    vid                go to state 45
    floatl             go to state 46
    mod_prefix         go to state 47
    expr               go to state 209
    bracketed_exp      go to state 50
    paren_exp          go to state 51
    vtupleExpr         go to state 52
    vstructExpr        go to state 53
    primary_exp        go to state 54
    int_expr           go to state 55
    stringls           go to state 56
    if_exp             go to state 57
    chain_exp          go to state 58
    lambda_exp         go to state 59
    postfix_exp        go to state 60
    tcall_exp          go to state 61
    vcall_exp          go to state 62
    dot_name_exp       go to state 63
    dot_index_exp      go to state 64
    unary_exp          go to state 65
    unary_op           go to state 66
    binary_exp         go to state 67
    mul_binary_exp     go to state 68
    add_binary_exp     go to state 69
    cmp_binary_exp     go to state 70
    eq_binary_exp      go to state 71
    and_binary_exp     go to state 72
    xor_binary_exp     go to state 73
    or_binary_exp      go to state 74
    type_spec          go to state 210
    primary_type_spec  go to state 76
    tuple_type_spec    go to state 77
    mod_prefix_tid     go to state 78
    fn_type_spec       go to state 79
    postfix_type_spec  go to state 80
    tcall_type_spec    go to state 81
    unary_type_spec    go to state 82
    targ               go to state 211
    targ_cl            go to state 329


State 317

  194 tpattern_field_cl: tpattern_field_cl "," tpattern_field •

    $default  reduce using rule 194 (tpattern_field_cl)


State 318

  144 struct_type_spec_field: vid type_spec •

    $default  reduce using rule 144 (struct_type_spec_field)


State 319

  146 struct_type_spec_field_cl: struct_type_spec_field_cl "," • struct_type_spec_field

    "<val_id>"  shift, and go to state 28

    vid                     go to state 289
    struct_type_spec_field  go to state 330


State 320

  161 struct_type_spec: "{" struct_type_spec_field_cl "}" •

    $default  reduce using rule 161 (struct_type_spec)


State 321

   29 unprefixed_enum_field_pl: unprefixed_enum_field_pl "|" enum_field •

    $default  reduce using rule 29 (unprefixed_enum_field_pl)


State 322

   32 mod_typeclass_stmt: tid ":-" "<" tid class_spec • ">" "{" type_query_exp_sl "}"

    ">"  shift, and go to state 331


State 323

   33 mod_typeclass_stmt: tid tpattern_seq ":-" "<" tid • class_spec ">" "{" type_query_exp_sl "}"

    "<TypeId>"  shift, and go to state 10

    tid                 go to state 282
    class_spec          go to state 332
    primary_class_spec  go to state 284
    postfix_class_spec  go to state 285


State 324

   21 mod_val_stmt: vid type_spec "from" tid stringl •

    $default  reduce using rule 21 (mod_val_stmt)


State 325

   22 mod_val_stmt: vid tpattern_seq type_spec "from" tid • stringl

    "\"dq-string-literal\""  shift, and go to state 21
    "'sq-string-literal'"    shift, and go to state 22

    stringl  go to state 333


State 326

   84 if_exp: "if" bracketed_exp "then" bracketed_exp "else" primary_exp •

    $default  reduce using rule 84 (if_exp)


State 327

  192 lpattern_field_cl: lpattern_field_cl "," lpattern_field •

    $default  reduce using rule 192 (lpattern_field_cl)


State 328

   11 sub_mod_stmt: "sub" "<TypeId>" tpattern_seq "{" mod_content "}" •

    $default  reduce using rule 11 (sub_mod_stmt)


State 329

  165 targ_cl: targ_cl • "," targ
  174 postfix_class_spec: postfix_class_spec "[" targ_cl • "]"

    ","  shift, and go to state 276
    "]"  shift, and go to state 334


State 330

  146 struct_type_spec_field_cl: struct_type_spec_field_cl "," struct_type_spec_field •

    $default  reduce using rule 146 (struct_type_spec_field_cl)


State 331

   32 mod_typeclass_stmt: tid ":-" "<" tid class_spec ">" • "{" type_query_exp_sl "}"

    "{"  shift, and go to state 335


State 332

   33 mod_typeclass_stmt: tid tpattern_seq ":-" "<" tid class_spec • ">" "{" type_query_exp_sl "}"

    ">"  shift, and go to state 336


State 333

   22 mod_val_stmt: vid tpattern_seq type_spec "from" tid stringl •

    $default  reduce using rule 22 (mod_val_stmt)


State 334

  174 postfix_class_spec: postfix_class_spec "[" targ_cl "]" •

    $default  reduce using rule 174 (postfix_class_spec)


State 335

   32 mod_typeclass_stmt: tid ":-" "<" tid class_spec ">" "{" • type_query_exp_sl "}"

    "<TypeId>"  shift, and go to state 10
    "Fn"        shift, and go to state 31
    "("         shift, and go to state 162

    tid                go to state 44
    mod_prefix         go to state 164
    type_query_exp_sl  go to state 337
    type_query_exp     go to state 338
    type_spec          go to state 339
    primary_type_spec  go to state 76
    tuple_type_spec    go to state 77
    mod_prefix_tid     go to state 78
    fn_type_spec       go to state 79
    postfix_type_spec  go to state 80
    tcall_type_spec    go to state 81
    unary_type_spec    go to state 82


State 336

   33 mod_typeclass_stmt: tid tpattern_seq ":-" "<" tid class_spec ">" • "{" type_query_exp_sl "}"

    "{"  shift, and go to state 340


State 337

   32 mod_typeclass_stmt: tid ":-" "<" tid class_spec ">" "{" type_query_exp_sl • "}"
   58 type_query_exp_sl: type_query_exp_sl • type_query_exp ";"

    "<TypeId>"  shift, and go to state 10
    "Fn"        shift, and go to state 31
    "("         shift, and go to state 162
    "}"         shift, and go to state 341

    tid                go to state 44
    mod_prefix         go to state 164
    type_query_exp     go to state 342
    type_spec          go to state 339
    primary_type_spec  go to state 76
    tuple_type_spec    go to state 77
    mod_prefix_tid     go to state 78
    fn_type_spec       go to state 79
    postfix_type_spec  go to state 80
    tcall_type_spec    go to state 81
    unary_type_spec    go to state 82


State 338

   57 type_query_exp_sl: type_query_exp • ";"

    ";"  shift, and go to state 343


State 339

  137 type_query_exp: type_spec • type_query_op long_type_spec

    "::"  shift, and go to state 344
    ":<"  shift, and go to state 345
    ">:"  shift, and go to state 346

    type_query_op  go to state 347


State 340

   33 mod_typeclass_stmt: tid tpattern_seq ":-" "<" tid class_spec ">" "{" • type_query_exp_sl "}"

    "<TypeId>"  shift, and go to state 10
    "Fn"        shift, and go to state 31
    "("         shift, and go to state 162

    tid                go to state 44
    mod_prefix         go to state 164
    type_query_exp_sl  go to state 348
    type_query_exp     go to state 338
    type_spec          go to state 339
    primary_type_spec  go to state 76
    tuple_type_spec    go to state 77
    mod_prefix_tid     go to state 78
    fn_type_spec       go to state 79
    postfix_type_spec  go to state 80
    tcall_type_spec    go to state 81
    unary_type_spec    go to state 82


State 341

   32 mod_typeclass_stmt: tid ":-" "<" tid class_spec ">" "{" type_query_exp_sl "}" •

    $default  reduce using rule 32 (mod_typeclass_stmt)


State 342

   58 type_query_exp_sl: type_query_exp_sl type_query_exp • ";"

    ";"  shift, and go to state 349


State 343

   57 type_query_exp_sl: type_query_exp ";" •

    $default  reduce using rule 57 (type_query_exp_sl)


State 344

  140 type_query_op: "::" •

    $default  reduce using rule 140 (type_query_op)


State 345

  138 type_query_op: ":<" •

    $default  reduce using rule 138 (type_query_op)


State 346

  139 type_query_op: ">:" •

    $default  reduce using rule 139 (type_query_op)


State 347

  137 type_query_exp: type_spec type_query_op • long_type_spec

    "<TypeId>"  shift, and go to state 10
    "Fn"        shift, and go to state 31
    "("         shift, and go to state 162
    "{"         shift, and go to state 229

    tid                go to state 44
    mod_prefix         go to state 164
    primary_type_spec  go to state 76
    tuple_type_spec    go to state 77
    mod_prefix_tid     go to state 78
    fn_type_spec       go to state 79
    postfix_type_spec  go to state 80
    tcall_type_spec    go to state 81
    unary_type_spec    go to state 230
    long_type_spec     go to state 350
    struct_type_spec   go to state 232


State 348

   33 mod_typeclass_stmt: tid tpattern_seq ":-" "<" tid class_spec ">" "{" type_query_exp_sl • "}"
   58 type_query_exp_sl: type_query_exp_sl • type_query_exp ";"

    "<TypeId>"  shift, and go to state 10
    "Fn"        shift, and go to state 31
    "("         shift, and go to state 162
    "}"         shift, and go to state 351

    tid                go to state 44
    mod_prefix         go to state 164
    type_query_exp     go to state 342
    type_spec          go to state 339
    primary_type_spec  go to state 76
    tuple_type_spec    go to state 77
    mod_prefix_tid     go to state 78
    fn_type_spec       go to state 79
    postfix_type_spec  go to state 80
    tcall_type_spec    go to state 81
    unary_type_spec    go to state 82


State 349

   58 type_query_exp_sl: type_query_exp_sl type_query_exp ";" •

    $default  reduce using rule 58 (type_query_exp_sl)


State 350

  137 type_query_exp: type_spec type_query_op long_type_spec •

    $default  reduce using rule 137 (type_query_exp)


State 351

   33 mod_typeclass_stmt: tid tpattern_seq ":-" "<" tid class_spec ">" "{" type_query_exp_sl "}" •

    $default  reduce using rule 33 (mod_typeclass_stmt)
