Terminals unused in grammar

    "a HOLE (ID without any letters)"
    "'namespace'"
    "'do'"
    "'operator'"
    "'match'"
    "'with'"
    "'return'"
    "'discard'"
    "'require'"
    "'export'"
    "'::'"
    "':::'"
    "'$'"
    "'!'"
    "EOS"


Grammar

    0 $accept: script $end

    1 script: scriptContent

    2 scriptContent: scriptContentStmt "';'"
    3              | scriptContent scriptContentStmt "';'"

    4 scriptContentStmt: moduleStmt

    5 moduleStmt: "'mod'" "a VID (ID with first letter lowercase)" "'{'" moduleContent "'}'"

    6 moduleContent: moduleContentStmt "';'"
    7              | moduleContent moduleContentStmt "';'"

    8 chainPrefixStmt: letStmt
    9                | setStmt
   10                | discardStmt

   11 letStmt: "'let'" lpattern "'='" expr

   12 setStmt: "'set'" expr "'='" expr

   13 discardStmt: expr

   14 moduleContentStmt: defStmt
   15                  | typedefStmt
   16                  | typedefStmt_enum
   17                  | importStmt
   18                  | linkStmt
   19                  | moduleStmt

   20 defStmt: "'def'" vid vpattern "'->'" castExpr
   21        | "'def'" vid tpattern vpattern "'->'" castExpr

   22 typedefStmt: "'type'" tid tpattern "'='" typespec

   23 typedefStmt_enum: "'enum'" tid tpattern "'='" vstruct

   24 importStmt: "'import'" vid "'from'" stringl "'as'" stringl

   25 linkStmt: "'link'" stringl "'{'" linkStmtContent "'}'"

   26 linkStmtItem: vid vpattern "'->'" typespec "'from'" stringl

   27 linkStmtContent: linkStmtItem "';'"
   28                | linkStmtContent linkStmtItem "';'"

   29 tid: "a TID (ID with first letter uppercase)"

   30 vid: "a VID (ID with first letter lowercase)"

   31 floatl: TK_FLOAT_LIT

   32 stringl: TK_SQSTRING_LIT
   33        | TK_DQSTRING_LIT

   34 unit: "'('" "')'"

   35 expr: binaryExpr

   36 expr_cl: expr
   37        | expr_cl "','" expr

   38 expr_cl2: expr "','" expr
   39         | expr_cl2 "','" expr

   40 parenExpr: unit
   41          | vparen
   42          | vtuple
   43          | vstruct
   44          | chain
   45          | vlambda

   46 primaryExpr: parenExpr
   47            | vid
   48            | TK_DINT_LIT
   49            | TK_XINT_LIT
   50            | floatl
   51            | stringl
   52            | ifThenElse

   53 vparen: "'('" expr "')'"

   54 vtuple: "'('" expr_cl2 "')'"

   55 vstruct: "'{'" vstructField_cl "'}'"

   56 ifThenElse: "'if'" parenExpr "'then'" parenExpr
   57           | "'if'" parenExpr "'then'" parenExpr "'else'" primaryExpr

   58 chain: "'{'" expr "'}'"
   59      | "'{'" chainPrefix "'}'"
   60      | "'{'" chainPrefix expr "'}'"

   61 chainPrefix: chainPrefixStmt "';'"
   62            | chainPrefix chainPrefixStmt "';'"

   63 vlambda: "'fun'" lpattern "'->'" parenExpr

   64 postfixExpr: primaryExpr
   65            | vtcall
   66            | vvcall
   67            | dotNmExpr
   68            | dotIxExpr
   69            | colonNmExpr

   70 vtcall: postfixExpr "'['" vtarg_cl "']'"

   71 vvcall: postfixExpr "'('" "')'"
   72       | postfixExpr "'('" expr_cl "')'"

   73 dotNmExpr: postfixExpr "'.'" "a VID (ID with first letter lowercase)"

   74 dotIxExpr: postfixExpr "'.'" TK_DINT_LIT

   75 colonNmExpr: postfixExpr "':'" "a VID (ID with first letter lowercase)"

   76 castExpr: postfixExpr
   77         | typespec parenExpr

   78 unaryExpr: castExpr
   79          | unaryOp unaryExpr

   80 unaryOp: "'+'"
   81        | "'-'"
   82        | "'*'"
   83        | "'^'"
   84        | "'not'"

   85 binaryExpr: orBinaryExpr

   86 mulBinaryOp: "'*'"
   87            | "'/'"
   88            | "'%'"

   89 mulBinaryExpr: unaryExpr
   90              | mulBinaryExpr mulBinaryOp unaryExpr

   91 addBinaryOp: "'+'"
   92            | "'-'"

   93 addBinaryExpr: mulBinaryExpr
   94              | addBinaryExpr addBinaryOp mulBinaryExpr

   95 cmpBinaryOp: "'<'"
   96            | "'<='"
   97            | "'>'"
   98            | "'>='"

   99 cmpBinaryExpr: addBinaryExpr
  100              | cmpBinaryExpr cmpBinaryOp addBinaryExpr

  101 eqBinaryOp: "'=='"
  102           | "'!='"

  103 eqBinaryExpr: cmpBinaryExpr
  104             | eqBinaryExpr eqBinaryOp cmpBinaryExpr

  105 andBinaryExpr: eqBinaryExpr
  106              | andBinaryExpr "'and'" eqBinaryExpr

  107 xorBinaryExpr: andBinaryExpr
  108              | xorBinaryExpr "'xor'" andBinaryExpr

  109 orBinaryExpr: xorBinaryExpr
  110             | orBinaryExpr "'or'" xorBinaryExpr

  111 typespec: postfixTypespec

  112 typespec_cl: typespec
  113            | typespec_cl "','" typespec

  114 primaryTypespec: tid
  115                | "'Tuple'" "'['" typespec_cl "']'"
  116                | "'Array'" "'['" typespec "','" expr "']'"

  117 postfixTypespec: primaryTypespec
  118                | postfixTypespec "'['" ttarg_cl "']'"
  119                | postfixTypespec "'^'"

  120 ttarg: typespec
  121      | expr

  122 ttarg_cl: ttarg
  123         | ttarg_cl "','" ttarg

  124 vtarg: typespec
  125      | expr

  126 vtarg_cl: vtarg
  127         | vtarg_cl "','" vtarg

  128 vstructField: vid "'='" expr

  129 vstructField_cl: vstructField
  130                | vstructField_cl "','" vstructField

  131 vpatternField: vid typespec

  132 lpatternField: vpatternField
  133              | vid

  134 tpatternField: tid
  135              | vpatternField

  136 lpattern: lpatternField
  137         | "'('" lpatternField_cl "')'"
  138         | unit

  139 vpattern: "'('" vpatternField_cl "')'"
  140         | unit

  141 tpattern: "'['" tpatternField_cl "']'"

  142 vpatternField_cl: vpatternField
  143                 | vpatternField_cl "','" vpatternField

  144 lpatternField_cl: lpatternField
  145                 | lpatternField_cl "','" lpatternField

  146 tpatternField_cl: tpatternField
  147                 | tpatternField_cl "','" tpatternField


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    "a VID (ID with first letter lowercase)" <token> (258) 5 30 73 75
    "a TID (ID with first letter uppercase)" <token> (259) 29
    "a HOLE (ID without any letters)" <token> (260)
    "'namespace'" (261)
    "'mod'" (262) 5
    "'do'" (263)
    "'if'" (264) 56 57
    "'then'" (265) 56 57
    "'else'" (266) 57
    "'operator'" (267)
    "'match'" (268)
    "'with'" (269)
    "'return'" (270)
    "'discard'" (271)
    "'require'" (272)
    "'import'" (273) 24
    "'export'" (274)
    "'link'" (275) 25
    "'from'" (276) 24 26
    "'as'" (277) 24
    "'fun'" (278) 63
    "'let'" (279) 11
    "'set'" (280) 12
    "'def'" (281) 20 21
    "'type'" (282) 22
    "'enum'" (283) 23
    "'and'" (284) 106
    "'xor'" (285) 108
    "'or'" (286) 110
    "'not'" (287) 84
    "'Tuple'" (288) 115
    "'Array'" (289) 116
    TK_DINT_LIT <token> (290) 48 74
    TK_XINT_LIT <token> (291) 49
    TK_FLOAT_LIT <token> (292) 31
    TK_DQSTRING_LIT <token> (293) 33
    TK_SQSTRING_LIT <token> (294) 32
    "'.'" (295) 73 74
    "':'" (296) 75
    "','" (297) 37 38 39 113 116 123 127 130 143 145 147
    "';'" (298) 2 3 6 7 27 28 61 62
    "'::'" (299)
    "':::'" (300)
    "'('" (301) 34 53 54 71 72 137 139
    "')'" (302) 34 53 54 71 72 137 139
    "'['" (303) 70 115 116 118 141
    "']'" (304) 70 115 116 118 141
    "'{'" (305) 5 25 55 58 59 60
    "'}'" (306) 5 25 55 58 59 60
    "'->'" (307) 20 21 26 63
    "'*'" (308) 82 86
    "'/'" (309) 87
    "'%'" (310) 88
    "'+'" (311) 80 91
    "'-'" (312) 81 92
    "'<'" (313) 95
    "'<='" (314) 96
    "'>'" (315) 97
    "'>='" (316) 98
    "'='" (317) 11 12 22 23 128
    "'=='" (318) 101
    "'!='" (319) 102
    "'$'" (320)
    "'^'" (321) 83 119
    "'!'" (322)
    "EOS" (323)


Nonterminals, with rules where they appear

    $accept (69)
        on left: 0
    script <nt> (70)
        on left: 1
        on right: 0
    scriptContent <ntSb> (71)
        on left: 2 3
        on right: 1 3
    scriptContentStmt <nt> (72)
        on left: 4
        on right: 2 3
    moduleStmt <nt> (73)
        on left: 5
        on right: 4 19
    moduleContent <ntSb> (74)
        on left: 6 7
        on right: 5 7
    chainPrefixStmt <nt> (75)
        on left: 8 9 10
        on right: 61 62
    letStmt <nt> (76)
        on left: 11
        on right: 8
    setStmt <nt> (77)
        on left: 12
        on right: 9
    discardStmt <nt> (78)
        on left: 13
        on right: 10
    moduleContentStmt <nt> (79)
        on left: 14 15 16 17 18 19
        on right: 6 7
    defStmt <nt> (80)
        on left: 20 21
        on right: 14
    typedefStmt <nt> (81)
        on left: 22
        on right: 15
    typedefStmt_enum <nt> (82)
        on left: 23
        on right: 16
    importStmt <nt> (83)
        on left: 24
        on right: 17
    linkStmt <nt> (84)
        on left: 25
        on right: 18
    linkStmtItem <nt> (85)
        on left: 26
        on right: 27 28
    linkStmtContent <ntSb> (86)
        on left: 27 28
        on right: 25 28
    tid <token> (87)
        on left: 29
        on right: 22 23 114 134
    vid <token> (88)
        on left: 30
        on right: 20 21 24 26 47 128 131 133
    floatl <token> (89)
        on left: 31
        on right: 50
    stringl <token> (90)
        on left: 32 33
        on right: 24 25 26 51
    unit <nt> (91)
        on left: 34
        on right: 40 138 140
    expr <nt> (92)
        on left: 35
        on right: 11 12 13 36 37 38 39 53 58 60 116 121 125 128
    expr_cl <ntSb> (93)
        on left: 36 37
        on right: 37 72
    expr_cl2 <ntSb> (94)
        on left: 38 39
        on right: 39 54
    parenExpr <nt> (95)
        on left: 40 41 42 43 44 45
        on right: 46 56 57 63 77
    primaryExpr <nt> (96)
        on left: 46 47 48 49 50 51 52
        on right: 57 64
    vparen <nt> (97)
        on left: 53
        on right: 41
    vtuple <nt> (98)
        on left: 54
        on right: 42
    vstruct <nt> (99)
        on left: 55
        on right: 23 43
    ifThenElse <nt> (100)
        on left: 56 57
        on right: 52
    chain <nt> (101)
        on left: 58 59 60
        on right: 44
    chainPrefix <ntSb> (102)
        on left: 61 62
        on right: 59 60 62
    vlambda <nt> (103)
        on left: 63
        on right: 45
    postfixExpr <nt> (104)
        on left: 64 65 66 67 68 69
        on right: 70 71 72 73 74 75 76
    vtcall <nt> (105)
        on left: 70
        on right: 65
    vvcall <nt> (106)
        on left: 71 72
        on right: 66
    dotNmExpr <nt> (107)
        on left: 73
        on right: 67
    dotIxExpr <nt> (108)
        on left: 74
        on right: 68
    colonNmExpr <nt> (109)
        on left: 75
        on right: 69
    castExpr <nt> (110)
        on left: 76 77
        on right: 20 21 78
    unaryExpr <nt> (111)
        on left: 78 79
        on right: 79 89 90
    unaryOp <uop> (112)
        on left: 80 81 82 83 84
        on right: 79
    binaryExpr <nt> (113)
        on left: 85
        on right: 35
    mulBinaryOp <bop> (114)
        on left: 86 87 88
        on right: 90
    mulBinaryExpr <nt> (115)
        on left: 89 90
        on right: 90 93 94
    addBinaryOp <bop> (116)
        on left: 91 92
        on right: 94
    addBinaryExpr <nt> (117)
        on left: 93 94
        on right: 94 99 100
    cmpBinaryOp <bop> (118)
        on left: 95 96 97 98
        on right: 100
    cmpBinaryExpr <nt> (119)
        on left: 99 100
        on right: 100 103 104
    eqBinaryOp <bop> (120)
        on left: 101 102
        on right: 104
    eqBinaryExpr <nt> (121)
        on left: 103 104
        on right: 104 105 106
    andBinaryExpr <nt> (122)
        on left: 105 106
        on right: 106 107 108
    xorBinaryExpr <nt> (123)
        on left: 107 108
        on right: 108 109 110
    orBinaryExpr <nt> (124)
        on left: 109 110
        on right: 85 110
    typespec <nt> (125)
        on left: 111
        on right: 22 26 77 112 113 116 120 124 131
    typespec_cl <ntSb> (126)
        on left: 112 113
        on right: 113 115
    primaryTypespec <nt> (127)
        on left: 114 115 116
        on right: 117
    postfixTypespec <nt> (128)
        on left: 117 118 119
        on right: 111 118 119
    ttarg <nt> (129)
        on left: 120 121
        on right: 122 123
    ttarg_cl <ntSb> (130)
        on left: 122 123
        on right: 118 123
    vtarg <nt> (131)
        on left: 124 125
        on right: 126 127
    vtarg_cl <ntSb> (132)
        on left: 126 127
        on right: 70 127
    vstructField <nt> (133)
        on left: 128
        on right: 129 130
    vstructField_cl <ntSb> (134)
        on left: 129 130
        on right: 55 130
    vpatternField <nt> (135)
        on left: 131
        on right: 132 135 142 143
    lpatternField <nt> (136)
        on left: 132 133
        on right: 136 144 145
    tpatternField <nt> (137)
        on left: 134 135
        on right: 146 147
    lpattern <nt> (138)
        on left: 136 137 138
        on right: 11 63
    vpattern <nt> (139)
        on left: 139 140
        on right: 20 21 26
    tpattern <nt> (140)
        on left: 141
        on right: 21 22 23
    vpatternField_cl <ntSb> (141)
        on left: 142 143
        on right: 139 143
    lpatternField_cl <ntSb> (142)
        on left: 144 145
        on right: 137 145
    tpatternField_cl <ntSb> (143)
        on left: 146 147
        on right: 141 147


State 0

    0 $accept: • script $end

    "'mod'"  shift, and go to state 1

    script             go to state 2
    scriptContent      go to state 3
    scriptContentStmt  go to state 4
    moduleStmt         go to state 5


State 1

    5 moduleStmt: "'mod'" • "a VID (ID with first letter lowercase)" "'{'" moduleContent "'}'"

    "a VID (ID with first letter lowercase)"  shift, and go to state 6


State 2

    0 $accept: script • $end

    $end  shift, and go to state 7


State 3

    1 script: scriptContent •
    3 scriptContent: scriptContent • scriptContentStmt "';'"

    "'mod'"  shift, and go to state 1

    $default  reduce using rule 1 (script)

    scriptContentStmt  go to state 8
    moduleStmt         go to state 5


State 4

    2 scriptContent: scriptContentStmt • "';'"

    "';'"  shift, and go to state 9


State 5

    4 scriptContentStmt: moduleStmt •

    $default  reduce using rule 4 (scriptContentStmt)


State 6

    5 moduleStmt: "'mod'" "a VID (ID with first letter lowercase)" • "'{'" moduleContent "'}'"

    "'{'"  shift, and go to state 10


State 7

    0 $accept: script $end •

    $default  accept


State 8

    3 scriptContent: scriptContent scriptContentStmt • "';'"

    "';'"  shift, and go to state 11


State 9

    2 scriptContent: scriptContentStmt "';'" •

    $default  reduce using rule 2 (scriptContent)


State 10

    5 moduleStmt: "'mod'" "a VID (ID with first letter lowercase)" "'{'" • moduleContent "'}'"

    "'mod'"     shift, and go to state 1
    "'import'"  shift, and go to state 12
    "'link'"    shift, and go to state 13
    "'def'"     shift, and go to state 14
    "'type'"    shift, and go to state 15
    "'enum'"    shift, and go to state 16

    moduleStmt         go to state 17
    moduleContent      go to state 18
    moduleContentStmt  go to state 19
    defStmt            go to state 20
    typedefStmt        go to state 21
    typedefStmt_enum   go to state 22
    importStmt         go to state 23
    linkStmt           go to state 24


State 11

    3 scriptContent: scriptContent scriptContentStmt "';'" •

    $default  reduce using rule 3 (scriptContent)


State 12

   24 importStmt: "'import'" • vid "'from'" stringl "'as'" stringl

    "a VID (ID with first letter lowercase)"  shift, and go to state 25

    vid  go to state 26


State 13

   25 linkStmt: "'link'" • stringl "'{'" linkStmtContent "'}'"

    TK_DQSTRING_LIT  shift, and go to state 27
    TK_SQSTRING_LIT  shift, and go to state 28

    stringl  go to state 29


State 14

   20 defStmt: "'def'" • vid vpattern "'->'" castExpr
   21        | "'def'" • vid tpattern vpattern "'->'" castExpr

    "a VID (ID with first letter lowercase)"  shift, and go to state 25

    vid  go to state 30


State 15

   22 typedefStmt: "'type'" • tid tpattern "'='" typespec

    "a TID (ID with first letter uppercase)"  shift, and go to state 31

    tid  go to state 32


State 16

   23 typedefStmt_enum: "'enum'" • tid tpattern "'='" vstruct

    "a TID (ID with first letter uppercase)"  shift, and go to state 31

    tid  go to state 33


State 17

   19 moduleContentStmt: moduleStmt •

    $default  reduce using rule 19 (moduleContentStmt)


State 18

    5 moduleStmt: "'mod'" "a VID (ID with first letter lowercase)" "'{'" moduleContent • "'}'"
    7 moduleContent: moduleContent • moduleContentStmt "';'"

    "'mod'"     shift, and go to state 1
    "'import'"  shift, and go to state 12
    "'link'"    shift, and go to state 13
    "'def'"     shift, and go to state 14
    "'type'"    shift, and go to state 15
    "'enum'"    shift, and go to state 16
    "'}'"       shift, and go to state 34

    moduleStmt         go to state 17
    moduleContentStmt  go to state 35
    defStmt            go to state 20
    typedefStmt        go to state 21
    typedefStmt_enum   go to state 22
    importStmt         go to state 23
    linkStmt           go to state 24


State 19

    6 moduleContent: moduleContentStmt • "';'"

    "';'"  shift, and go to state 36


State 20

   14 moduleContentStmt: defStmt •

    $default  reduce using rule 14 (moduleContentStmt)


State 21

   15 moduleContentStmt: typedefStmt •

    $default  reduce using rule 15 (moduleContentStmt)


State 22

   16 moduleContentStmt: typedefStmt_enum •

    $default  reduce using rule 16 (moduleContentStmt)


State 23

   17 moduleContentStmt: importStmt •

    $default  reduce using rule 17 (moduleContentStmt)


State 24

   18 moduleContentStmt: linkStmt •

    $default  reduce using rule 18 (moduleContentStmt)


State 25

   30 vid: "a VID (ID with first letter lowercase)" •

    $default  reduce using rule 30 (vid)


State 26

   24 importStmt: "'import'" vid • "'from'" stringl "'as'" stringl

    "'from'"  shift, and go to state 37


State 27

   33 stringl: TK_DQSTRING_LIT •

    $default  reduce using rule 33 (stringl)


State 28

   32 stringl: TK_SQSTRING_LIT •

    $default  reduce using rule 32 (stringl)


State 29

   25 linkStmt: "'link'" stringl • "'{'" linkStmtContent "'}'"

    "'{'"  shift, and go to state 38


State 30

   20 defStmt: "'def'" vid • vpattern "'->'" castExpr
   21        | "'def'" vid • tpattern vpattern "'->'" castExpr

    "'('"  shift, and go to state 39
    "'['"  shift, and go to state 40

    unit      go to state 41
    vpattern  go to state 42
    tpattern  go to state 43


State 31

   29 tid: "a TID (ID with first letter uppercase)" •

    $default  reduce using rule 29 (tid)


State 32

   22 typedefStmt: "'type'" tid • tpattern "'='" typespec

    "'['"  shift, and go to state 40

    tpattern  go to state 44


State 33

   23 typedefStmt_enum: "'enum'" tid • tpattern "'='" vstruct

    "'['"  shift, and go to state 40

    tpattern  go to state 45


State 34

    5 moduleStmt: "'mod'" "a VID (ID with first letter lowercase)" "'{'" moduleContent "'}'" •

    $default  reduce using rule 5 (moduleStmt)


State 35

    7 moduleContent: moduleContent moduleContentStmt • "';'"

    "';'"  shift, and go to state 46


State 36

    6 moduleContent: moduleContentStmt "';'" •

    $default  reduce using rule 6 (moduleContent)


State 37

   24 importStmt: "'import'" vid "'from'" • stringl "'as'" stringl

    TK_DQSTRING_LIT  shift, and go to state 27
    TK_SQSTRING_LIT  shift, and go to state 28

    stringl  go to state 47


State 38

   25 linkStmt: "'link'" stringl "'{'" • linkStmtContent "'}'"

    "a VID (ID with first letter lowercase)"  shift, and go to state 25

    linkStmtItem     go to state 48
    linkStmtContent  go to state 49
    vid              go to state 50


State 39

   34 unit: "'('" • "')'"
  139 vpattern: "'('" • vpatternField_cl "')'"

    "a VID (ID with first letter lowercase)"  shift, and go to state 25
    "')'"                                     shift, and go to state 51

    vid               go to state 52
    vpatternField     go to state 53
    vpatternField_cl  go to state 54


State 40

  141 tpattern: "'['" • tpatternField_cl "']'"

    "a VID (ID with first letter lowercase)"  shift, and go to state 25
    "a TID (ID with first letter uppercase)"  shift, and go to state 31

    tid               go to state 55
    vid               go to state 52
    vpatternField     go to state 56
    tpatternField     go to state 57
    tpatternField_cl  go to state 58


State 41

  140 vpattern: unit •

    $default  reduce using rule 140 (vpattern)


State 42

   20 defStmt: "'def'" vid vpattern • "'->'" castExpr

    "'->'"  shift, and go to state 59


State 43

   21 defStmt: "'def'" vid tpattern • vpattern "'->'" castExpr

    "'('"  shift, and go to state 39

    unit      go to state 41
    vpattern  go to state 60


State 44

   22 typedefStmt: "'type'" tid tpattern • "'='" typespec

    "'='"  shift, and go to state 61


State 45

   23 typedefStmt_enum: "'enum'" tid tpattern • "'='" vstruct

    "'='"  shift, and go to state 62


State 46

    7 moduleContent: moduleContent moduleContentStmt "';'" •

    $default  reduce using rule 7 (moduleContent)


State 47

   24 importStmt: "'import'" vid "'from'" stringl • "'as'" stringl

    "'as'"  shift, and go to state 63


State 48

   27 linkStmtContent: linkStmtItem • "';'"

    "';'"  shift, and go to state 64


State 49

   25 linkStmt: "'link'" stringl "'{'" linkStmtContent • "'}'"
   28 linkStmtContent: linkStmtContent • linkStmtItem "';'"

    "a VID (ID with first letter lowercase)"  shift, and go to state 25
    "'}'"                                     shift, and go to state 65

    linkStmtItem  go to state 66
    vid           go to state 50


State 50

   26 linkStmtItem: vid • vpattern "'->'" typespec "'from'" stringl

    "'('"  shift, and go to state 39

    unit      go to state 41
    vpattern  go to state 67


State 51

   34 unit: "'('" "')'" •

    $default  reduce using rule 34 (unit)


State 52

  131 vpatternField: vid • typespec

    "a TID (ID with first letter uppercase)"  shift, and go to state 31
    "'Tuple'"                                 shift, and go to state 68
    "'Array'"                                 shift, and go to state 69

    tid              go to state 70
    typespec         go to state 71
    primaryTypespec  go to state 72
    postfixTypespec  go to state 73


State 53

  142 vpatternField_cl: vpatternField •

    $default  reduce using rule 142 (vpatternField_cl)


State 54

  139 vpattern: "'('" vpatternField_cl • "')'"
  143 vpatternField_cl: vpatternField_cl • "','" vpatternField

    "','"  shift, and go to state 74
    "')'"  shift, and go to state 75


State 55

  134 tpatternField: tid •

    $default  reduce using rule 134 (tpatternField)


State 56

  135 tpatternField: vpatternField •

    $default  reduce using rule 135 (tpatternField)


State 57

  146 tpatternField_cl: tpatternField •

    $default  reduce using rule 146 (tpatternField_cl)


State 58

  141 tpattern: "'['" tpatternField_cl • "']'"
  147 tpatternField_cl: tpatternField_cl • "','" tpatternField

    "','"  shift, and go to state 76
    "']'"  shift, and go to state 77


State 59

   20 defStmt: "'def'" vid vpattern "'->'" • castExpr

    "a VID (ID with first letter lowercase)"  shift, and go to state 25
    "a TID (ID with first letter uppercase)"  shift, and go to state 31
    "'if'"                                    shift, and go to state 78
    "'fun'"                                   shift, and go to state 79
    "'Tuple'"                                 shift, and go to state 68
    "'Array'"                                 shift, and go to state 69
    TK_DINT_LIT                               shift, and go to state 80
    TK_XINT_LIT                               shift, and go to state 81
    TK_FLOAT_LIT                              shift, and go to state 82
    TK_DQSTRING_LIT                           shift, and go to state 27
    TK_SQSTRING_LIT                           shift, and go to state 28
    "'('"                                     shift, and go to state 83
    "'{'"                                     shift, and go to state 84

    tid              go to state 70
    vid              go to state 85
    floatl           go to state 86
    stringl          go to state 87
    unit             go to state 88
    parenExpr        go to state 89
    primaryExpr      go to state 90
    vparen           go to state 91
    vtuple           go to state 92
    vstruct          go to state 93
    ifThenElse       go to state 94
    chain            go to state 95
    vlambda          go to state 96
    postfixExpr      go to state 97
    vtcall           go to state 98
    vvcall           go to state 99
    dotNmExpr        go to state 100
    dotIxExpr        go to state 101
    colonNmExpr      go to state 102
    castExpr         go to state 103
    typespec         go to state 104
    primaryTypespec  go to state 72
    postfixTypespec  go to state 73


State 60

   21 defStmt: "'def'" vid tpattern vpattern • "'->'" castExpr

    "'->'"  shift, and go to state 105


State 61

   22 typedefStmt: "'type'" tid tpattern "'='" • typespec

    "a TID (ID with first letter uppercase)"  shift, and go to state 31
    "'Tuple'"                                 shift, and go to state 68
    "'Array'"                                 shift, and go to state 69

    tid              go to state 70
    typespec         go to state 106
    primaryTypespec  go to state 72
    postfixTypespec  go to state 73


State 62

   23 typedefStmt_enum: "'enum'" tid tpattern "'='" • vstruct

    "'{'"  shift, and go to state 107

    vstruct  go to state 108


State 63

   24 importStmt: "'import'" vid "'from'" stringl "'as'" • stringl

    TK_DQSTRING_LIT  shift, and go to state 27
    TK_SQSTRING_LIT  shift, and go to state 28

    stringl  go to state 109


State 64

   27 linkStmtContent: linkStmtItem "';'" •

    $default  reduce using rule 27 (linkStmtContent)


State 65

   25 linkStmt: "'link'" stringl "'{'" linkStmtContent "'}'" •

    $default  reduce using rule 25 (linkStmt)


State 66

   28 linkStmtContent: linkStmtContent linkStmtItem • "';'"

    "';'"  shift, and go to state 110


State 67

   26 linkStmtItem: vid vpattern • "'->'" typespec "'from'" stringl

    "'->'"  shift, and go to state 111


State 68

  115 primaryTypespec: "'Tuple'" • "'['" typespec_cl "']'"

    "'['"  shift, and go to state 112


State 69

  116 primaryTypespec: "'Array'" • "'['" typespec "','" expr "']'"

    "'['"  shift, and go to state 113


State 70

  114 primaryTypespec: tid •

    $default  reduce using rule 114 (primaryTypespec)


State 71

  131 vpatternField: vid typespec •

    $default  reduce using rule 131 (vpatternField)


State 72

  117 postfixTypespec: primaryTypespec •

    $default  reduce using rule 117 (postfixTypespec)


State 73

  111 typespec: postfixTypespec •
  118 postfixTypespec: postfixTypespec • "'['" ttarg_cl "']'"
  119                | postfixTypespec • "'^'"

    "'['"  shift, and go to state 114
    "'^'"  shift, and go to state 115

    $default  reduce using rule 111 (typespec)


State 74

  143 vpatternField_cl: vpatternField_cl "','" • vpatternField

    "a VID (ID with first letter lowercase)"  shift, and go to state 25

    vid            go to state 52
    vpatternField  go to state 116


State 75

  139 vpattern: "'('" vpatternField_cl "')'" •

    $default  reduce using rule 139 (vpattern)


State 76

  147 tpatternField_cl: tpatternField_cl "','" • tpatternField

    "a VID (ID with first letter lowercase)"  shift, and go to state 25
    "a TID (ID with first letter uppercase)"  shift, and go to state 31

    tid            go to state 55
    vid            go to state 52
    vpatternField  go to state 56
    tpatternField  go to state 117


State 77

  141 tpattern: "'['" tpatternField_cl "']'" •

    $default  reduce using rule 141 (tpattern)


State 78

   56 ifThenElse: "'if'" • parenExpr "'then'" parenExpr
   57           | "'if'" • parenExpr "'then'" parenExpr "'else'" primaryExpr

    "'fun'"  shift, and go to state 79
    "'('"    shift, and go to state 83
    "'{'"    shift, and go to state 84

    unit       go to state 88
    parenExpr  go to state 118
    vparen     go to state 91
    vtuple     go to state 92
    vstruct    go to state 93
    chain      go to state 95
    vlambda    go to state 96


State 79

   63 vlambda: "'fun'" • lpattern "'->'" parenExpr

    "a VID (ID with first letter lowercase)"  shift, and go to state 25
    "'('"                                     shift, and go to state 119

    vid            go to state 120
    unit           go to state 121
    vpatternField  go to state 122
    lpatternField  go to state 123
    lpattern       go to state 124


State 80

   48 primaryExpr: TK_DINT_LIT •

    $default  reduce using rule 48 (primaryExpr)


State 81

   49 primaryExpr: TK_XINT_LIT •

    $default  reduce using rule 49 (primaryExpr)


State 82

   31 floatl: TK_FLOAT_LIT •

    $default  reduce using rule 31 (floatl)


State 83

   34 unit: "'('" • "')'"
   53 vparen: "'('" • expr "')'"
   54 vtuple: "'('" • expr_cl2 "')'"

    "a VID (ID with first letter lowercase)"  shift, and go to state 25
    "a TID (ID with first letter uppercase)"  shift, and go to state 31
    "'if'"                                    shift, and go to state 78
    "'fun'"                                   shift, and go to state 79
    "'not'"                                   shift, and go to state 125
    "'Tuple'"                                 shift, and go to state 68
    "'Array'"                                 shift, and go to state 69
    TK_DINT_LIT                               shift, and go to state 80
    TK_XINT_LIT                               shift, and go to state 81
    TK_FLOAT_LIT                              shift, and go to state 82
    TK_DQSTRING_LIT                           shift, and go to state 27
    TK_SQSTRING_LIT                           shift, and go to state 28
    "'('"                                     shift, and go to state 83
    "')'"                                     shift, and go to state 51
    "'{'"                                     shift, and go to state 84
    "'*'"                                     shift, and go to state 126
    "'+'"                                     shift, and go to state 127
    "'-'"                                     shift, and go to state 128
    "'^'"                                     shift, and go to state 129

    tid              go to state 70
    vid              go to state 85
    floatl           go to state 86
    stringl          go to state 87
    unit             go to state 88
    expr             go to state 130
    expr_cl2         go to state 131
    parenExpr        go to state 89
    primaryExpr      go to state 90
    vparen           go to state 91
    vtuple           go to state 92
    vstruct          go to state 93
    ifThenElse       go to state 94
    chain            go to state 95
    vlambda          go to state 96
    postfixExpr      go to state 97
    vtcall           go to state 98
    vvcall           go to state 99
    dotNmExpr        go to state 100
    dotIxExpr        go to state 101
    colonNmExpr      go to state 102
    castExpr         go to state 132
    unaryExpr        go to state 133
    unaryOp          go to state 134
    binaryExpr       go to state 135
    mulBinaryExpr    go to state 136
    addBinaryExpr    go to state 137
    cmpBinaryExpr    go to state 138
    eqBinaryExpr     go to state 139
    andBinaryExpr    go to state 140
    xorBinaryExpr    go to state 141
    orBinaryExpr     go to state 142
    typespec         go to state 104
    primaryTypespec  go to state 72
    postfixTypespec  go to state 73


State 84

   55 vstruct: "'{'" • vstructField_cl "'}'"
   58 chain: "'{'" • expr "'}'"
   59      | "'{'" • chainPrefix "'}'"
   60      | "'{'" • chainPrefix expr "'}'"

    "a VID (ID with first letter lowercase)"  shift, and go to state 25
    "a TID (ID with first letter uppercase)"  shift, and go to state 31
    "'if'"                                    shift, and go to state 78
    "'fun'"                                   shift, and go to state 79
    "'let'"                                   shift, and go to state 143
    "'set'"                                   shift, and go to state 144
    "'not'"                                   shift, and go to state 125
    "'Tuple'"                                 shift, and go to state 68
    "'Array'"                                 shift, and go to state 69
    TK_DINT_LIT                               shift, and go to state 80
    TK_XINT_LIT                               shift, and go to state 81
    TK_FLOAT_LIT                              shift, and go to state 82
    TK_DQSTRING_LIT                           shift, and go to state 27
    TK_SQSTRING_LIT                           shift, and go to state 28
    "'('"                                     shift, and go to state 83
    "'{'"                                     shift, and go to state 84
    "'*'"                                     shift, and go to state 126
    "'+'"                                     shift, and go to state 127
    "'-'"                                     shift, and go to state 128
    "'^'"                                     shift, and go to state 129

    chainPrefixStmt  go to state 145
    letStmt          go to state 146
    setStmt          go to state 147
    discardStmt      go to state 148
    tid              go to state 70
    vid              go to state 149
    floatl           go to state 86
    stringl          go to state 87
    unit             go to state 88
    expr             go to state 150
    parenExpr        go to state 89
    primaryExpr      go to state 90
    vparen           go to state 91
    vtuple           go to state 92
    vstruct          go to state 93
    ifThenElse       go to state 94
    chain            go to state 95
    chainPrefix      go to state 151
    vlambda          go to state 96
    postfixExpr      go to state 97
    vtcall           go to state 98
    vvcall           go to state 99
    dotNmExpr        go to state 100
    dotIxExpr        go to state 101
    colonNmExpr      go to state 102
    castExpr         go to state 132
    unaryExpr        go to state 133
    unaryOp          go to state 134
    binaryExpr       go to state 135
    mulBinaryExpr    go to state 136
    addBinaryExpr    go to state 137
    cmpBinaryExpr    go to state 138
    eqBinaryExpr     go to state 139
    andBinaryExpr    go to state 140
    xorBinaryExpr    go to state 141
    orBinaryExpr     go to state 142
    typespec         go to state 104
    primaryTypespec  go to state 72
    postfixTypespec  go to state 73
    vstructField     go to state 152
    vstructField_cl  go to state 153


State 85

   47 primaryExpr: vid •

    $default  reduce using rule 47 (primaryExpr)


State 86

   50 primaryExpr: floatl •

    $default  reduce using rule 50 (primaryExpr)


State 87

   51 primaryExpr: stringl •

    $default  reduce using rule 51 (primaryExpr)


State 88

   40 parenExpr: unit •

    $default  reduce using rule 40 (parenExpr)


State 89

   46 primaryExpr: parenExpr •

    $default  reduce using rule 46 (primaryExpr)


State 90

   64 postfixExpr: primaryExpr •

    $default  reduce using rule 64 (postfixExpr)


State 91

   41 parenExpr: vparen •

    $default  reduce using rule 41 (parenExpr)


State 92

   42 parenExpr: vtuple •

    $default  reduce using rule 42 (parenExpr)


State 93

   43 parenExpr: vstruct •

    $default  reduce using rule 43 (parenExpr)


State 94

   52 primaryExpr: ifThenElse •

    $default  reduce using rule 52 (primaryExpr)


State 95

   44 parenExpr: chain •

    $default  reduce using rule 44 (parenExpr)


State 96

   45 parenExpr: vlambda •

    $default  reduce using rule 45 (parenExpr)


State 97

   70 vtcall: postfixExpr • "'['" vtarg_cl "']'"
   71 vvcall: postfixExpr • "'('" "')'"
   72       | postfixExpr • "'('" expr_cl "')'"
   73 dotNmExpr: postfixExpr • "'.'" "a VID (ID with first letter lowercase)"
   74 dotIxExpr: postfixExpr • "'.'" TK_DINT_LIT
   75 colonNmExpr: postfixExpr • "':'" "a VID (ID with first letter lowercase)"
   76 castExpr: postfixExpr •

    "'.'"  shift, and go to state 154
    "':'"  shift, and go to state 155
    "'('"  shift, and go to state 156
    "'['"  shift, and go to state 157

    $default  reduce using rule 76 (castExpr)


State 98

   65 postfixExpr: vtcall •

    $default  reduce using rule 65 (postfixExpr)


State 99

   66 postfixExpr: vvcall •

    $default  reduce using rule 66 (postfixExpr)


State 100

   67 postfixExpr: dotNmExpr •

    $default  reduce using rule 67 (postfixExpr)


State 101

   68 postfixExpr: dotIxExpr •

    $default  reduce using rule 68 (postfixExpr)


State 102

   69 postfixExpr: colonNmExpr •

    $default  reduce using rule 69 (postfixExpr)


State 103

   20 defStmt: "'def'" vid vpattern "'->'" castExpr •

    $default  reduce using rule 20 (defStmt)


State 104

   77 castExpr: typespec • parenExpr

    "'fun'"  shift, and go to state 79
    "'('"    shift, and go to state 83
    "'{'"    shift, and go to state 84

    unit       go to state 88
    parenExpr  go to state 158
    vparen     go to state 91
    vtuple     go to state 92
    vstruct    go to state 93
    chain      go to state 95
    vlambda    go to state 96


State 105

   21 defStmt: "'def'" vid tpattern vpattern "'->'" • castExpr

    "a VID (ID with first letter lowercase)"  shift, and go to state 25
    "a TID (ID with first letter uppercase)"  shift, and go to state 31
    "'if'"                                    shift, and go to state 78
    "'fun'"                                   shift, and go to state 79
    "'Tuple'"                                 shift, and go to state 68
    "'Array'"                                 shift, and go to state 69
    TK_DINT_LIT                               shift, and go to state 80
    TK_XINT_LIT                               shift, and go to state 81
    TK_FLOAT_LIT                              shift, and go to state 82
    TK_DQSTRING_LIT                           shift, and go to state 27
    TK_SQSTRING_LIT                           shift, and go to state 28
    "'('"                                     shift, and go to state 83
    "'{'"                                     shift, and go to state 84

    tid              go to state 70
    vid              go to state 85
    floatl           go to state 86
    stringl          go to state 87
    unit             go to state 88
    parenExpr        go to state 89
    primaryExpr      go to state 90
    vparen           go to state 91
    vtuple           go to state 92
    vstruct          go to state 93
    ifThenElse       go to state 94
    chain            go to state 95
    vlambda          go to state 96
    postfixExpr      go to state 97
    vtcall           go to state 98
    vvcall           go to state 99
    dotNmExpr        go to state 100
    dotIxExpr        go to state 101
    colonNmExpr      go to state 102
    castExpr         go to state 159
    typespec         go to state 104
    primaryTypespec  go to state 72
    postfixTypespec  go to state 73


State 106

   22 typedefStmt: "'type'" tid tpattern "'='" typespec •

    $default  reduce using rule 22 (typedefStmt)


State 107

   55 vstruct: "'{'" • vstructField_cl "'}'"

    "a VID (ID with first letter lowercase)"  shift, and go to state 25

    vid              go to state 160
    vstructField     go to state 152
    vstructField_cl  go to state 153


State 108

   23 typedefStmt_enum: "'enum'" tid tpattern "'='" vstruct •

    $default  reduce using rule 23 (typedefStmt_enum)


State 109

   24 importStmt: "'import'" vid "'from'" stringl "'as'" stringl •

    $default  reduce using rule 24 (importStmt)


State 110

   28 linkStmtContent: linkStmtContent linkStmtItem "';'" •

    $default  reduce using rule 28 (linkStmtContent)


State 111

   26 linkStmtItem: vid vpattern "'->'" • typespec "'from'" stringl

    "a TID (ID with first letter uppercase)"  shift, and go to state 31
    "'Tuple'"                                 shift, and go to state 68
    "'Array'"                                 shift, and go to state 69

    tid              go to state 70
    typespec         go to state 161
    primaryTypespec  go to state 72
    postfixTypespec  go to state 73


State 112

  115 primaryTypespec: "'Tuple'" "'['" • typespec_cl "']'"

    "a TID (ID with first letter uppercase)"  shift, and go to state 31
    "'Tuple'"                                 shift, and go to state 68
    "'Array'"                                 shift, and go to state 69

    tid              go to state 70
    typespec         go to state 162
    typespec_cl      go to state 163
    primaryTypespec  go to state 72
    postfixTypespec  go to state 73


State 113

  116 primaryTypespec: "'Array'" "'['" • typespec "','" expr "']'"

    "a TID (ID with first letter uppercase)"  shift, and go to state 31
    "'Tuple'"                                 shift, and go to state 68
    "'Array'"                                 shift, and go to state 69

    tid              go to state 70
    typespec         go to state 164
    primaryTypespec  go to state 72
    postfixTypespec  go to state 73


State 114

  118 postfixTypespec: postfixTypespec "'['" • ttarg_cl "']'"

    "a VID (ID with first letter lowercase)"  shift, and go to state 25
    "a TID (ID with first letter uppercase)"  shift, and go to state 31
    "'if'"                                    shift, and go to state 78
    "'fun'"                                   shift, and go to state 79
    "'not'"                                   shift, and go to state 125
    "'Tuple'"                                 shift, and go to state 68
    "'Array'"                                 shift, and go to state 69
    TK_DINT_LIT                               shift, and go to state 80
    TK_XINT_LIT                               shift, and go to state 81
    TK_FLOAT_LIT                              shift, and go to state 82
    TK_DQSTRING_LIT                           shift, and go to state 27
    TK_SQSTRING_LIT                           shift, and go to state 28
    "'('"                                     shift, and go to state 83
    "'{'"                                     shift, and go to state 84
    "'*'"                                     shift, and go to state 126
    "'+'"                                     shift, and go to state 127
    "'-'"                                     shift, and go to state 128
    "'^'"                                     shift, and go to state 129

    tid              go to state 70
    vid              go to state 85
    floatl           go to state 86
    stringl          go to state 87
    unit             go to state 88
    expr             go to state 165
    parenExpr        go to state 89
    primaryExpr      go to state 90
    vparen           go to state 91
    vtuple           go to state 92
    vstruct          go to state 93
    ifThenElse       go to state 94
    chain            go to state 95
    vlambda          go to state 96
    postfixExpr      go to state 97
    vtcall           go to state 98
    vvcall           go to state 99
    dotNmExpr        go to state 100
    dotIxExpr        go to state 101
    colonNmExpr      go to state 102
    castExpr         go to state 132
    unaryExpr        go to state 133
    unaryOp          go to state 134
    binaryExpr       go to state 135
    mulBinaryExpr    go to state 136
    addBinaryExpr    go to state 137
    cmpBinaryExpr    go to state 138
    eqBinaryExpr     go to state 139
    andBinaryExpr    go to state 140
    xorBinaryExpr    go to state 141
    orBinaryExpr     go to state 142
    typespec         go to state 166
    primaryTypespec  go to state 72
    postfixTypespec  go to state 73
    ttarg            go to state 167
    ttarg_cl         go to state 168


State 115

  119 postfixTypespec: postfixTypespec "'^'" •

    $default  reduce using rule 119 (postfixTypespec)


State 116

  143 vpatternField_cl: vpatternField_cl "','" vpatternField •

    $default  reduce using rule 143 (vpatternField_cl)


State 117

  147 tpatternField_cl: tpatternField_cl "','" tpatternField •

    $default  reduce using rule 147 (tpatternField_cl)


State 118

   56 ifThenElse: "'if'" parenExpr • "'then'" parenExpr
   57           | "'if'" parenExpr • "'then'" parenExpr "'else'" primaryExpr

    "'then'"  shift, and go to state 169


State 119

   34 unit: "'('" • "')'"
  137 lpattern: "'('" • lpatternField_cl "')'"

    "a VID (ID with first letter lowercase)"  shift, and go to state 25
    "')'"                                     shift, and go to state 51

    vid               go to state 120
    vpatternField     go to state 122
    lpatternField     go to state 170
    lpatternField_cl  go to state 171


State 120

  131 vpatternField: vid • typespec
  133 lpatternField: vid •

    "a TID (ID with first letter uppercase)"  shift, and go to state 31
    "'Tuple'"                                 shift, and go to state 68
    "'Array'"                                 shift, and go to state 69

    $default  reduce using rule 133 (lpatternField)

    tid              go to state 70
    typespec         go to state 71
    primaryTypespec  go to state 72
    postfixTypespec  go to state 73


State 121

  138 lpattern: unit •

    $default  reduce using rule 138 (lpattern)


State 122

  132 lpatternField: vpatternField •

    $default  reduce using rule 132 (lpatternField)


State 123

  136 lpattern: lpatternField •

    $default  reduce using rule 136 (lpattern)


State 124

   63 vlambda: "'fun'" lpattern • "'->'" parenExpr

    "'->'"  shift, and go to state 172


State 125

   84 unaryOp: "'not'" •

    $default  reduce using rule 84 (unaryOp)


State 126

   82 unaryOp: "'*'" •

    $default  reduce using rule 82 (unaryOp)


State 127

   80 unaryOp: "'+'" •

    $default  reduce using rule 80 (unaryOp)


State 128

   81 unaryOp: "'-'" •

    $default  reduce using rule 81 (unaryOp)


State 129

   83 unaryOp: "'^'" •

    $default  reduce using rule 83 (unaryOp)


State 130

   38 expr_cl2: expr • "','" expr
   53 vparen: "'('" expr • "')'"

    "','"  shift, and go to state 173
    "')'"  shift, and go to state 174


State 131

   39 expr_cl2: expr_cl2 • "','" expr
   54 vtuple: "'('" expr_cl2 • "')'"

    "','"  shift, and go to state 175
    "')'"  shift, and go to state 176


State 132

   78 unaryExpr: castExpr •

    $default  reduce using rule 78 (unaryExpr)


State 133

   89 mulBinaryExpr: unaryExpr •

    $default  reduce using rule 89 (mulBinaryExpr)


State 134

   79 unaryExpr: unaryOp • unaryExpr

    "a VID (ID with first letter lowercase)"  shift, and go to state 25
    "a TID (ID with first letter uppercase)"  shift, and go to state 31
    "'if'"                                    shift, and go to state 78
    "'fun'"                                   shift, and go to state 79
    "'not'"                                   shift, and go to state 125
    "'Tuple'"                                 shift, and go to state 68
    "'Array'"                                 shift, and go to state 69
    TK_DINT_LIT                               shift, and go to state 80
    TK_XINT_LIT                               shift, and go to state 81
    TK_FLOAT_LIT                              shift, and go to state 82
    TK_DQSTRING_LIT                           shift, and go to state 27
    TK_SQSTRING_LIT                           shift, and go to state 28
    "'('"                                     shift, and go to state 83
    "'{'"                                     shift, and go to state 84
    "'*'"                                     shift, and go to state 126
    "'+'"                                     shift, and go to state 127
    "'-'"                                     shift, and go to state 128
    "'^'"                                     shift, and go to state 129

    tid              go to state 70
    vid              go to state 85
    floatl           go to state 86
    stringl          go to state 87
    unit             go to state 88
    parenExpr        go to state 89
    primaryExpr      go to state 90
    vparen           go to state 91
    vtuple           go to state 92
    vstruct          go to state 93
    ifThenElse       go to state 94
    chain            go to state 95
    vlambda          go to state 96
    postfixExpr      go to state 97
    vtcall           go to state 98
    vvcall           go to state 99
    dotNmExpr        go to state 100
    dotIxExpr        go to state 101
    colonNmExpr      go to state 102
    castExpr         go to state 132
    unaryExpr        go to state 177
    unaryOp          go to state 134
    typespec         go to state 104
    primaryTypespec  go to state 72
    postfixTypespec  go to state 73


State 135

   35 expr: binaryExpr •

    $default  reduce using rule 35 (expr)


State 136

   90 mulBinaryExpr: mulBinaryExpr • mulBinaryOp unaryExpr
   93 addBinaryExpr: mulBinaryExpr •

    "'*'"  shift, and go to state 178
    "'/'"  shift, and go to state 179
    "'%'"  shift, and go to state 180

    $default  reduce using rule 93 (addBinaryExpr)

    mulBinaryOp  go to state 181


State 137

   94 addBinaryExpr: addBinaryExpr • addBinaryOp mulBinaryExpr
   99 cmpBinaryExpr: addBinaryExpr •

    "'+'"  shift, and go to state 182
    "'-'"  shift, and go to state 183

    $default  reduce using rule 99 (cmpBinaryExpr)

    addBinaryOp  go to state 184


State 138

  100 cmpBinaryExpr: cmpBinaryExpr • cmpBinaryOp addBinaryExpr
  103 eqBinaryExpr: cmpBinaryExpr •

    "'<'"   shift, and go to state 185
    "'<='"  shift, and go to state 186
    "'>'"   shift, and go to state 187
    "'>='"  shift, and go to state 188

    $default  reduce using rule 103 (eqBinaryExpr)

    cmpBinaryOp  go to state 189


State 139

  104 eqBinaryExpr: eqBinaryExpr • eqBinaryOp cmpBinaryExpr
  105 andBinaryExpr: eqBinaryExpr •

    "'=='"  shift, and go to state 190
    "'!='"  shift, and go to state 191

    $default  reduce using rule 105 (andBinaryExpr)

    eqBinaryOp  go to state 192


State 140

  106 andBinaryExpr: andBinaryExpr • "'and'" eqBinaryExpr
  107 xorBinaryExpr: andBinaryExpr •

    "'and'"  shift, and go to state 193

    $default  reduce using rule 107 (xorBinaryExpr)


State 141

  108 xorBinaryExpr: xorBinaryExpr • "'xor'" andBinaryExpr
  109 orBinaryExpr: xorBinaryExpr •

    "'xor'"  shift, and go to state 194

    $default  reduce using rule 109 (orBinaryExpr)


State 142

   85 binaryExpr: orBinaryExpr •
  110 orBinaryExpr: orBinaryExpr • "'or'" xorBinaryExpr

    "'or'"  shift, and go to state 195

    $default  reduce using rule 85 (binaryExpr)


State 143

   11 letStmt: "'let'" • lpattern "'='" expr

    "a VID (ID with first letter lowercase)"  shift, and go to state 25
    "'('"                                     shift, and go to state 119

    vid            go to state 120
    unit           go to state 121
    vpatternField  go to state 122
    lpatternField  go to state 123
    lpattern       go to state 196


State 144

   12 setStmt: "'set'" • expr "'='" expr

    "a VID (ID with first letter lowercase)"  shift, and go to state 25
    "a TID (ID with first letter uppercase)"  shift, and go to state 31
    "'if'"                                    shift, and go to state 78
    "'fun'"                                   shift, and go to state 79
    "'not'"                                   shift, and go to state 125
    "'Tuple'"                                 shift, and go to state 68
    "'Array'"                                 shift, and go to state 69
    TK_DINT_LIT                               shift, and go to state 80
    TK_XINT_LIT                               shift, and go to state 81
    TK_FLOAT_LIT                              shift, and go to state 82
    TK_DQSTRING_LIT                           shift, and go to state 27
    TK_SQSTRING_LIT                           shift, and go to state 28
    "'('"                                     shift, and go to state 83
    "'{'"                                     shift, and go to state 84
    "'*'"                                     shift, and go to state 126
    "'+'"                                     shift, and go to state 127
    "'-'"                                     shift, and go to state 128
    "'^'"                                     shift, and go to state 129

    tid              go to state 70
    vid              go to state 85
    floatl           go to state 86
    stringl          go to state 87
    unit             go to state 88
    expr             go to state 197
    parenExpr        go to state 89
    primaryExpr      go to state 90
    vparen           go to state 91
    vtuple           go to state 92
    vstruct          go to state 93
    ifThenElse       go to state 94
    chain            go to state 95
    vlambda          go to state 96
    postfixExpr      go to state 97
    vtcall           go to state 98
    vvcall           go to state 99
    dotNmExpr        go to state 100
    dotIxExpr        go to state 101
    colonNmExpr      go to state 102
    castExpr         go to state 132
    unaryExpr        go to state 133
    unaryOp          go to state 134
    binaryExpr       go to state 135
    mulBinaryExpr    go to state 136
    addBinaryExpr    go to state 137
    cmpBinaryExpr    go to state 138
    eqBinaryExpr     go to state 139
    andBinaryExpr    go to state 140
    xorBinaryExpr    go to state 141
    orBinaryExpr     go to state 142
    typespec         go to state 104
    primaryTypespec  go to state 72
    postfixTypespec  go to state 73


State 145

   61 chainPrefix: chainPrefixStmt • "';'"

    "';'"  shift, and go to state 198


State 146

    8 chainPrefixStmt: letStmt •

    $default  reduce using rule 8 (chainPrefixStmt)


State 147

    9 chainPrefixStmt: setStmt •

    $default  reduce using rule 9 (chainPrefixStmt)


State 148

   10 chainPrefixStmt: discardStmt •

    $default  reduce using rule 10 (chainPrefixStmt)


State 149

   47 primaryExpr: vid •
  128 vstructField: vid • "'='" expr

    "'='"  shift, and go to state 199

    $default  reduce using rule 47 (primaryExpr)


State 150

   13 discardStmt: expr •
   58 chain: "'{'" expr • "'}'"

    "'}'"  shift, and go to state 200

    $default  reduce using rule 13 (discardStmt)


State 151

   59 chain: "'{'" chainPrefix • "'}'"
   60      | "'{'" chainPrefix • expr "'}'"
   62 chainPrefix: chainPrefix • chainPrefixStmt "';'"

    "a VID (ID with first letter lowercase)"  shift, and go to state 25
    "a TID (ID with first letter uppercase)"  shift, and go to state 31
    "'if'"                                    shift, and go to state 78
    "'fun'"                                   shift, and go to state 79
    "'let'"                                   shift, and go to state 143
    "'set'"                                   shift, and go to state 144
    "'not'"                                   shift, and go to state 125
    "'Tuple'"                                 shift, and go to state 68
    "'Array'"                                 shift, and go to state 69
    TK_DINT_LIT                               shift, and go to state 80
    TK_XINT_LIT                               shift, and go to state 81
    TK_FLOAT_LIT                              shift, and go to state 82
    TK_DQSTRING_LIT                           shift, and go to state 27
    TK_SQSTRING_LIT                           shift, and go to state 28
    "'('"                                     shift, and go to state 83
    "'{'"                                     shift, and go to state 84
    "'}'"                                     shift, and go to state 201
    "'*'"                                     shift, and go to state 126
    "'+'"                                     shift, and go to state 127
    "'-'"                                     shift, and go to state 128
    "'^'"                                     shift, and go to state 129

    chainPrefixStmt  go to state 202
    letStmt          go to state 146
    setStmt          go to state 147
    discardStmt      go to state 148
    tid              go to state 70
    vid              go to state 85
    floatl           go to state 86
    stringl          go to state 87
    unit             go to state 88
    expr             go to state 203
    parenExpr        go to state 89
    primaryExpr      go to state 90
    vparen           go to state 91
    vtuple           go to state 92
    vstruct          go to state 93
    ifThenElse       go to state 94
    chain            go to state 95
    vlambda          go to state 96
    postfixExpr      go to state 97
    vtcall           go to state 98
    vvcall           go to state 99
    dotNmExpr        go to state 100
    dotIxExpr        go to state 101
    colonNmExpr      go to state 102
    castExpr         go to state 132
    unaryExpr        go to state 133
    unaryOp          go to state 134
    binaryExpr       go to state 135
    mulBinaryExpr    go to state 136
    addBinaryExpr    go to state 137
    cmpBinaryExpr    go to state 138
    eqBinaryExpr     go to state 139
    andBinaryExpr    go to state 140
    xorBinaryExpr    go to state 141
    orBinaryExpr     go to state 142
    typespec         go to state 104
    primaryTypespec  go to state 72
    postfixTypespec  go to state 73


State 152

  129 vstructField_cl: vstructField •

    $default  reduce using rule 129 (vstructField_cl)


State 153

   55 vstruct: "'{'" vstructField_cl • "'}'"
  130 vstructField_cl: vstructField_cl • "','" vstructField

    "','"  shift, and go to state 204
    "'}'"  shift, and go to state 205


State 154

   73 dotNmExpr: postfixExpr "'.'" • "a VID (ID with first letter lowercase)"
   74 dotIxExpr: postfixExpr "'.'" • TK_DINT_LIT

    "a VID (ID with first letter lowercase)"  shift, and go to state 206
    TK_DINT_LIT                               shift, and go to state 207


State 155

   75 colonNmExpr: postfixExpr "':'" • "a VID (ID with first letter lowercase)"

    "a VID (ID with first letter lowercase)"  shift, and go to state 208


State 156

   71 vvcall: postfixExpr "'('" • "')'"
   72       | postfixExpr "'('" • expr_cl "')'"

    "a VID (ID with first letter lowercase)"  shift, and go to state 25
    "a TID (ID with first letter uppercase)"  shift, and go to state 31
    "'if'"                                    shift, and go to state 78
    "'fun'"                                   shift, and go to state 79
    "'not'"                                   shift, and go to state 125
    "'Tuple'"                                 shift, and go to state 68
    "'Array'"                                 shift, and go to state 69
    TK_DINT_LIT                               shift, and go to state 80
    TK_XINT_LIT                               shift, and go to state 81
    TK_FLOAT_LIT                              shift, and go to state 82
    TK_DQSTRING_LIT                           shift, and go to state 27
    TK_SQSTRING_LIT                           shift, and go to state 28
    "'('"                                     shift, and go to state 83
    "')'"                                     shift, and go to state 209
    "'{'"                                     shift, and go to state 84
    "'*'"                                     shift, and go to state 126
    "'+'"                                     shift, and go to state 127
    "'-'"                                     shift, and go to state 128
    "'^'"                                     shift, and go to state 129

    tid              go to state 70
    vid              go to state 85
    floatl           go to state 86
    stringl          go to state 87
    unit             go to state 88
    expr             go to state 210
    expr_cl          go to state 211
    parenExpr        go to state 89
    primaryExpr      go to state 90
    vparen           go to state 91
    vtuple           go to state 92
    vstruct          go to state 93
    ifThenElse       go to state 94
    chain            go to state 95
    vlambda          go to state 96
    postfixExpr      go to state 97
    vtcall           go to state 98
    vvcall           go to state 99
    dotNmExpr        go to state 100
    dotIxExpr        go to state 101
    colonNmExpr      go to state 102
    castExpr         go to state 132
    unaryExpr        go to state 133
    unaryOp          go to state 134
    binaryExpr       go to state 135
    mulBinaryExpr    go to state 136
    addBinaryExpr    go to state 137
    cmpBinaryExpr    go to state 138
    eqBinaryExpr     go to state 139
    andBinaryExpr    go to state 140
    xorBinaryExpr    go to state 141
    orBinaryExpr     go to state 142
    typespec         go to state 104
    primaryTypespec  go to state 72
    postfixTypespec  go to state 73


State 157

   70 vtcall: postfixExpr "'['" • vtarg_cl "']'"

    "a VID (ID with first letter lowercase)"  shift, and go to state 25
    "a TID (ID with first letter uppercase)"  shift, and go to state 31
    "'if'"                                    shift, and go to state 78
    "'fun'"                                   shift, and go to state 79
    "'not'"                                   shift, and go to state 125
    "'Tuple'"                                 shift, and go to state 68
    "'Array'"                                 shift, and go to state 69
    TK_DINT_LIT                               shift, and go to state 80
    TK_XINT_LIT                               shift, and go to state 81
    TK_FLOAT_LIT                              shift, and go to state 82
    TK_DQSTRING_LIT                           shift, and go to state 27
    TK_SQSTRING_LIT                           shift, and go to state 28
    "'('"                                     shift, and go to state 83
    "'{'"                                     shift, and go to state 84
    "'*'"                                     shift, and go to state 126
    "'+'"                                     shift, and go to state 127
    "'-'"                                     shift, and go to state 128
    "'^'"                                     shift, and go to state 129

    tid              go to state 70
    vid              go to state 85
    floatl           go to state 86
    stringl          go to state 87
    unit             go to state 88
    expr             go to state 212
    parenExpr        go to state 89
    primaryExpr      go to state 90
    vparen           go to state 91
    vtuple           go to state 92
    vstruct          go to state 93
    ifThenElse       go to state 94
    chain            go to state 95
    vlambda          go to state 96
    postfixExpr      go to state 97
    vtcall           go to state 98
    vvcall           go to state 99
    dotNmExpr        go to state 100
    dotIxExpr        go to state 101
    colonNmExpr      go to state 102
    castExpr         go to state 132
    unaryExpr        go to state 133
    unaryOp          go to state 134
    binaryExpr       go to state 135
    mulBinaryExpr    go to state 136
    addBinaryExpr    go to state 137
    cmpBinaryExpr    go to state 138
    eqBinaryExpr     go to state 139
    andBinaryExpr    go to state 140
    xorBinaryExpr    go to state 141
    orBinaryExpr     go to state 142
    typespec         go to state 213
    primaryTypespec  go to state 72
    postfixTypespec  go to state 73
    vtarg            go to state 214
    vtarg_cl         go to state 215


State 158

   77 castExpr: typespec parenExpr •

    $default  reduce using rule 77 (castExpr)


State 159

   21 defStmt: "'def'" vid tpattern vpattern "'->'" castExpr •

    $default  reduce using rule 21 (defStmt)


State 160

  128 vstructField: vid • "'='" expr

    "'='"  shift, and go to state 199


State 161

   26 linkStmtItem: vid vpattern "'->'" typespec • "'from'" stringl

    "'from'"  shift, and go to state 216


State 162

  112 typespec_cl: typespec •

    $default  reduce using rule 112 (typespec_cl)


State 163

  113 typespec_cl: typespec_cl • "','" typespec
  115 primaryTypespec: "'Tuple'" "'['" typespec_cl • "']'"

    "','"  shift, and go to state 217
    "']'"  shift, and go to state 218


State 164

  116 primaryTypespec: "'Array'" "'['" typespec • "','" expr "']'"

    "','"  shift, and go to state 219


State 165

  121 ttarg: expr •

    $default  reduce using rule 121 (ttarg)


State 166

   77 castExpr: typespec • parenExpr
  120 ttarg: typespec •

    "'fun'"  shift, and go to state 79
    "'('"    shift, and go to state 83
    "'{'"    shift, and go to state 84

    $default  reduce using rule 120 (ttarg)

    unit       go to state 88
    parenExpr  go to state 158
    vparen     go to state 91
    vtuple     go to state 92
    vstruct    go to state 93
    chain      go to state 95
    vlambda    go to state 96


State 167

  122 ttarg_cl: ttarg •

    $default  reduce using rule 122 (ttarg_cl)


State 168

  118 postfixTypespec: postfixTypespec "'['" ttarg_cl • "']'"
  123 ttarg_cl: ttarg_cl • "','" ttarg

    "','"  shift, and go to state 220
    "']'"  shift, and go to state 221


State 169

   56 ifThenElse: "'if'" parenExpr "'then'" • parenExpr
   57           | "'if'" parenExpr "'then'" • parenExpr "'else'" primaryExpr

    "'fun'"  shift, and go to state 79
    "'('"    shift, and go to state 83
    "'{'"    shift, and go to state 84

    unit       go to state 88
    parenExpr  go to state 222
    vparen     go to state 91
    vtuple     go to state 92
    vstruct    go to state 93
    chain      go to state 95
    vlambda    go to state 96


State 170

  144 lpatternField_cl: lpatternField •

    $default  reduce using rule 144 (lpatternField_cl)


State 171

  137 lpattern: "'('" lpatternField_cl • "')'"
  145 lpatternField_cl: lpatternField_cl • "','" lpatternField

    "','"  shift, and go to state 223
    "')'"  shift, and go to state 224


State 172

   63 vlambda: "'fun'" lpattern "'->'" • parenExpr

    "'fun'"  shift, and go to state 79
    "'('"    shift, and go to state 83
    "'{'"    shift, and go to state 84

    unit       go to state 88
    parenExpr  go to state 225
    vparen     go to state 91
    vtuple     go to state 92
    vstruct    go to state 93
    chain      go to state 95
    vlambda    go to state 96


State 173

   38 expr_cl2: expr "','" • expr

    "a VID (ID with first letter lowercase)"  shift, and go to state 25
    "a TID (ID with first letter uppercase)"  shift, and go to state 31
    "'if'"                                    shift, and go to state 78
    "'fun'"                                   shift, and go to state 79
    "'not'"                                   shift, and go to state 125
    "'Tuple'"                                 shift, and go to state 68
    "'Array'"                                 shift, and go to state 69
    TK_DINT_LIT                               shift, and go to state 80
    TK_XINT_LIT                               shift, and go to state 81
    TK_FLOAT_LIT                              shift, and go to state 82
    TK_DQSTRING_LIT                           shift, and go to state 27
    TK_SQSTRING_LIT                           shift, and go to state 28
    "'('"                                     shift, and go to state 83
    "'{'"                                     shift, and go to state 84
    "'*'"                                     shift, and go to state 126
    "'+'"                                     shift, and go to state 127
    "'-'"                                     shift, and go to state 128
    "'^'"                                     shift, and go to state 129

    tid              go to state 70
    vid              go to state 85
    floatl           go to state 86
    stringl          go to state 87
    unit             go to state 88
    expr             go to state 226
    parenExpr        go to state 89
    primaryExpr      go to state 90
    vparen           go to state 91
    vtuple           go to state 92
    vstruct          go to state 93
    ifThenElse       go to state 94
    chain            go to state 95
    vlambda          go to state 96
    postfixExpr      go to state 97
    vtcall           go to state 98
    vvcall           go to state 99
    dotNmExpr        go to state 100
    dotIxExpr        go to state 101
    colonNmExpr      go to state 102
    castExpr         go to state 132
    unaryExpr        go to state 133
    unaryOp          go to state 134
    binaryExpr       go to state 135
    mulBinaryExpr    go to state 136
    addBinaryExpr    go to state 137
    cmpBinaryExpr    go to state 138
    eqBinaryExpr     go to state 139
    andBinaryExpr    go to state 140
    xorBinaryExpr    go to state 141
    orBinaryExpr     go to state 142
    typespec         go to state 104
    primaryTypespec  go to state 72
    postfixTypespec  go to state 73


State 174

   53 vparen: "'('" expr "')'" •

    $default  reduce using rule 53 (vparen)


State 175

   39 expr_cl2: expr_cl2 "','" • expr

    "a VID (ID with first letter lowercase)"  shift, and go to state 25
    "a TID (ID with first letter uppercase)"  shift, and go to state 31
    "'if'"                                    shift, and go to state 78
    "'fun'"                                   shift, and go to state 79
    "'not'"                                   shift, and go to state 125
    "'Tuple'"                                 shift, and go to state 68
    "'Array'"                                 shift, and go to state 69
    TK_DINT_LIT                               shift, and go to state 80
    TK_XINT_LIT                               shift, and go to state 81
    TK_FLOAT_LIT                              shift, and go to state 82
    TK_DQSTRING_LIT                           shift, and go to state 27
    TK_SQSTRING_LIT                           shift, and go to state 28
    "'('"                                     shift, and go to state 83
    "'{'"                                     shift, and go to state 84
    "'*'"                                     shift, and go to state 126
    "'+'"                                     shift, and go to state 127
    "'-'"                                     shift, and go to state 128
    "'^'"                                     shift, and go to state 129

    tid              go to state 70
    vid              go to state 85
    floatl           go to state 86
    stringl          go to state 87
    unit             go to state 88
    expr             go to state 227
    parenExpr        go to state 89
    primaryExpr      go to state 90
    vparen           go to state 91
    vtuple           go to state 92
    vstruct          go to state 93
    ifThenElse       go to state 94
    chain            go to state 95
    vlambda          go to state 96
    postfixExpr      go to state 97
    vtcall           go to state 98
    vvcall           go to state 99
    dotNmExpr        go to state 100
    dotIxExpr        go to state 101
    colonNmExpr      go to state 102
    castExpr         go to state 132
    unaryExpr        go to state 133
    unaryOp          go to state 134
    binaryExpr       go to state 135
    mulBinaryExpr    go to state 136
    addBinaryExpr    go to state 137
    cmpBinaryExpr    go to state 138
    eqBinaryExpr     go to state 139
    andBinaryExpr    go to state 140
    xorBinaryExpr    go to state 141
    orBinaryExpr     go to state 142
    typespec         go to state 104
    primaryTypespec  go to state 72
    postfixTypespec  go to state 73


State 176

   54 vtuple: "'('" expr_cl2 "')'" •

    $default  reduce using rule 54 (vtuple)


State 177

   79 unaryExpr: unaryOp unaryExpr •

    $default  reduce using rule 79 (unaryExpr)


State 178

   86 mulBinaryOp: "'*'" •

    $default  reduce using rule 86 (mulBinaryOp)


State 179

   87 mulBinaryOp: "'/'" •

    $default  reduce using rule 87 (mulBinaryOp)


State 180

   88 mulBinaryOp: "'%'" •

    $default  reduce using rule 88 (mulBinaryOp)


State 181

   90 mulBinaryExpr: mulBinaryExpr mulBinaryOp • unaryExpr

    "a VID (ID with first letter lowercase)"  shift, and go to state 25
    "a TID (ID with first letter uppercase)"  shift, and go to state 31
    "'if'"                                    shift, and go to state 78
    "'fun'"                                   shift, and go to state 79
    "'not'"                                   shift, and go to state 125
    "'Tuple'"                                 shift, and go to state 68
    "'Array'"                                 shift, and go to state 69
    TK_DINT_LIT                               shift, and go to state 80
    TK_XINT_LIT                               shift, and go to state 81
    TK_FLOAT_LIT                              shift, and go to state 82
    TK_DQSTRING_LIT                           shift, and go to state 27
    TK_SQSTRING_LIT                           shift, and go to state 28
    "'('"                                     shift, and go to state 83
    "'{'"                                     shift, and go to state 84
    "'*'"                                     shift, and go to state 126
    "'+'"                                     shift, and go to state 127
    "'-'"                                     shift, and go to state 128
    "'^'"                                     shift, and go to state 129

    tid              go to state 70
    vid              go to state 85
    floatl           go to state 86
    stringl          go to state 87
    unit             go to state 88
    parenExpr        go to state 89
    primaryExpr      go to state 90
    vparen           go to state 91
    vtuple           go to state 92
    vstruct          go to state 93
    ifThenElse       go to state 94
    chain            go to state 95
    vlambda          go to state 96
    postfixExpr      go to state 97
    vtcall           go to state 98
    vvcall           go to state 99
    dotNmExpr        go to state 100
    dotIxExpr        go to state 101
    colonNmExpr      go to state 102
    castExpr         go to state 132
    unaryExpr        go to state 228
    unaryOp          go to state 134
    typespec         go to state 104
    primaryTypespec  go to state 72
    postfixTypespec  go to state 73


State 182

   91 addBinaryOp: "'+'" •

    $default  reduce using rule 91 (addBinaryOp)


State 183

   92 addBinaryOp: "'-'" •

    $default  reduce using rule 92 (addBinaryOp)


State 184

   94 addBinaryExpr: addBinaryExpr addBinaryOp • mulBinaryExpr

    "a VID (ID with first letter lowercase)"  shift, and go to state 25
    "a TID (ID with first letter uppercase)"  shift, and go to state 31
    "'if'"                                    shift, and go to state 78
    "'fun'"                                   shift, and go to state 79
    "'not'"                                   shift, and go to state 125
    "'Tuple'"                                 shift, and go to state 68
    "'Array'"                                 shift, and go to state 69
    TK_DINT_LIT                               shift, and go to state 80
    TK_XINT_LIT                               shift, and go to state 81
    TK_FLOAT_LIT                              shift, and go to state 82
    TK_DQSTRING_LIT                           shift, and go to state 27
    TK_SQSTRING_LIT                           shift, and go to state 28
    "'('"                                     shift, and go to state 83
    "'{'"                                     shift, and go to state 84
    "'*'"                                     shift, and go to state 126
    "'+'"                                     shift, and go to state 127
    "'-'"                                     shift, and go to state 128
    "'^'"                                     shift, and go to state 129

    tid              go to state 70
    vid              go to state 85
    floatl           go to state 86
    stringl          go to state 87
    unit             go to state 88
    parenExpr        go to state 89
    primaryExpr      go to state 90
    vparen           go to state 91
    vtuple           go to state 92
    vstruct          go to state 93
    ifThenElse       go to state 94
    chain            go to state 95
    vlambda          go to state 96
    postfixExpr      go to state 97
    vtcall           go to state 98
    vvcall           go to state 99
    dotNmExpr        go to state 100
    dotIxExpr        go to state 101
    colonNmExpr      go to state 102
    castExpr         go to state 132
    unaryExpr        go to state 133
    unaryOp          go to state 134
    mulBinaryExpr    go to state 229
    typespec         go to state 104
    primaryTypespec  go to state 72
    postfixTypespec  go to state 73


State 185

   95 cmpBinaryOp: "'<'" •

    $default  reduce using rule 95 (cmpBinaryOp)


State 186

   96 cmpBinaryOp: "'<='" •

    $default  reduce using rule 96 (cmpBinaryOp)


State 187

   97 cmpBinaryOp: "'>'" •

    $default  reduce using rule 97 (cmpBinaryOp)


State 188

   98 cmpBinaryOp: "'>='" •

    $default  reduce using rule 98 (cmpBinaryOp)


State 189

  100 cmpBinaryExpr: cmpBinaryExpr cmpBinaryOp • addBinaryExpr

    "a VID (ID with first letter lowercase)"  shift, and go to state 25
    "a TID (ID with first letter uppercase)"  shift, and go to state 31
    "'if'"                                    shift, and go to state 78
    "'fun'"                                   shift, and go to state 79
    "'not'"                                   shift, and go to state 125
    "'Tuple'"                                 shift, and go to state 68
    "'Array'"                                 shift, and go to state 69
    TK_DINT_LIT                               shift, and go to state 80
    TK_XINT_LIT                               shift, and go to state 81
    TK_FLOAT_LIT                              shift, and go to state 82
    TK_DQSTRING_LIT                           shift, and go to state 27
    TK_SQSTRING_LIT                           shift, and go to state 28
    "'('"                                     shift, and go to state 83
    "'{'"                                     shift, and go to state 84
    "'*'"                                     shift, and go to state 126
    "'+'"                                     shift, and go to state 127
    "'-'"                                     shift, and go to state 128
    "'^'"                                     shift, and go to state 129

    tid              go to state 70
    vid              go to state 85
    floatl           go to state 86
    stringl          go to state 87
    unit             go to state 88
    parenExpr        go to state 89
    primaryExpr      go to state 90
    vparen           go to state 91
    vtuple           go to state 92
    vstruct          go to state 93
    ifThenElse       go to state 94
    chain            go to state 95
    vlambda          go to state 96
    postfixExpr      go to state 97
    vtcall           go to state 98
    vvcall           go to state 99
    dotNmExpr        go to state 100
    dotIxExpr        go to state 101
    colonNmExpr      go to state 102
    castExpr         go to state 132
    unaryExpr        go to state 133
    unaryOp          go to state 134
    mulBinaryExpr    go to state 136
    addBinaryExpr    go to state 230
    typespec         go to state 104
    primaryTypespec  go to state 72
    postfixTypespec  go to state 73


State 190

  101 eqBinaryOp: "'=='" •

    $default  reduce using rule 101 (eqBinaryOp)


State 191

  102 eqBinaryOp: "'!='" •

    $default  reduce using rule 102 (eqBinaryOp)


State 192

  104 eqBinaryExpr: eqBinaryExpr eqBinaryOp • cmpBinaryExpr

    "a VID (ID with first letter lowercase)"  shift, and go to state 25
    "a TID (ID with first letter uppercase)"  shift, and go to state 31
    "'if'"                                    shift, and go to state 78
    "'fun'"                                   shift, and go to state 79
    "'not'"                                   shift, and go to state 125
    "'Tuple'"                                 shift, and go to state 68
    "'Array'"                                 shift, and go to state 69
    TK_DINT_LIT                               shift, and go to state 80
    TK_XINT_LIT                               shift, and go to state 81
    TK_FLOAT_LIT                              shift, and go to state 82
    TK_DQSTRING_LIT                           shift, and go to state 27
    TK_SQSTRING_LIT                           shift, and go to state 28
    "'('"                                     shift, and go to state 83
    "'{'"                                     shift, and go to state 84
    "'*'"                                     shift, and go to state 126
    "'+'"                                     shift, and go to state 127
    "'-'"                                     shift, and go to state 128
    "'^'"                                     shift, and go to state 129

    tid              go to state 70
    vid              go to state 85
    floatl           go to state 86
    stringl          go to state 87
    unit             go to state 88
    parenExpr        go to state 89
    primaryExpr      go to state 90
    vparen           go to state 91
    vtuple           go to state 92
    vstruct          go to state 93
    ifThenElse       go to state 94
    chain            go to state 95
    vlambda          go to state 96
    postfixExpr      go to state 97
    vtcall           go to state 98
    vvcall           go to state 99
    dotNmExpr        go to state 100
    dotIxExpr        go to state 101
    colonNmExpr      go to state 102
    castExpr         go to state 132
    unaryExpr        go to state 133
    unaryOp          go to state 134
    mulBinaryExpr    go to state 136
    addBinaryExpr    go to state 137
    cmpBinaryExpr    go to state 231
    typespec         go to state 104
    primaryTypespec  go to state 72
    postfixTypespec  go to state 73


State 193

  106 andBinaryExpr: andBinaryExpr "'and'" • eqBinaryExpr

    "a VID (ID with first letter lowercase)"  shift, and go to state 25
    "a TID (ID with first letter uppercase)"  shift, and go to state 31
    "'if'"                                    shift, and go to state 78
    "'fun'"                                   shift, and go to state 79
    "'not'"                                   shift, and go to state 125
    "'Tuple'"                                 shift, and go to state 68
    "'Array'"                                 shift, and go to state 69
    TK_DINT_LIT                               shift, and go to state 80
    TK_XINT_LIT                               shift, and go to state 81
    TK_FLOAT_LIT                              shift, and go to state 82
    TK_DQSTRING_LIT                           shift, and go to state 27
    TK_SQSTRING_LIT                           shift, and go to state 28
    "'('"                                     shift, and go to state 83
    "'{'"                                     shift, and go to state 84
    "'*'"                                     shift, and go to state 126
    "'+'"                                     shift, and go to state 127
    "'-'"                                     shift, and go to state 128
    "'^'"                                     shift, and go to state 129

    tid              go to state 70
    vid              go to state 85
    floatl           go to state 86
    stringl          go to state 87
    unit             go to state 88
    parenExpr        go to state 89
    primaryExpr      go to state 90
    vparen           go to state 91
    vtuple           go to state 92
    vstruct          go to state 93
    ifThenElse       go to state 94
    chain            go to state 95
    vlambda          go to state 96
    postfixExpr      go to state 97
    vtcall           go to state 98
    vvcall           go to state 99
    dotNmExpr        go to state 100
    dotIxExpr        go to state 101
    colonNmExpr      go to state 102
    castExpr         go to state 132
    unaryExpr        go to state 133
    unaryOp          go to state 134
    mulBinaryExpr    go to state 136
    addBinaryExpr    go to state 137
    cmpBinaryExpr    go to state 138
    eqBinaryExpr     go to state 232
    typespec         go to state 104
    primaryTypespec  go to state 72
    postfixTypespec  go to state 73


State 194

  108 xorBinaryExpr: xorBinaryExpr "'xor'" • andBinaryExpr

    "a VID (ID with first letter lowercase)"  shift, and go to state 25
    "a TID (ID with first letter uppercase)"  shift, and go to state 31
    "'if'"                                    shift, and go to state 78
    "'fun'"                                   shift, and go to state 79
    "'not'"                                   shift, and go to state 125
    "'Tuple'"                                 shift, and go to state 68
    "'Array'"                                 shift, and go to state 69
    TK_DINT_LIT                               shift, and go to state 80
    TK_XINT_LIT                               shift, and go to state 81
    TK_FLOAT_LIT                              shift, and go to state 82
    TK_DQSTRING_LIT                           shift, and go to state 27
    TK_SQSTRING_LIT                           shift, and go to state 28
    "'('"                                     shift, and go to state 83
    "'{'"                                     shift, and go to state 84
    "'*'"                                     shift, and go to state 126
    "'+'"                                     shift, and go to state 127
    "'-'"                                     shift, and go to state 128
    "'^'"                                     shift, and go to state 129

    tid              go to state 70
    vid              go to state 85
    floatl           go to state 86
    stringl          go to state 87
    unit             go to state 88
    parenExpr        go to state 89
    primaryExpr      go to state 90
    vparen           go to state 91
    vtuple           go to state 92
    vstruct          go to state 93
    ifThenElse       go to state 94
    chain            go to state 95
    vlambda          go to state 96
    postfixExpr      go to state 97
    vtcall           go to state 98
    vvcall           go to state 99
    dotNmExpr        go to state 100
    dotIxExpr        go to state 101
    colonNmExpr      go to state 102
    castExpr         go to state 132
    unaryExpr        go to state 133
    unaryOp          go to state 134
    mulBinaryExpr    go to state 136
    addBinaryExpr    go to state 137
    cmpBinaryExpr    go to state 138
    eqBinaryExpr     go to state 139
    andBinaryExpr    go to state 233
    typespec         go to state 104
    primaryTypespec  go to state 72
    postfixTypespec  go to state 73


State 195

  110 orBinaryExpr: orBinaryExpr "'or'" • xorBinaryExpr

    "a VID (ID with first letter lowercase)"  shift, and go to state 25
    "a TID (ID with first letter uppercase)"  shift, and go to state 31
    "'if'"                                    shift, and go to state 78
    "'fun'"                                   shift, and go to state 79
    "'not'"                                   shift, and go to state 125
    "'Tuple'"                                 shift, and go to state 68
    "'Array'"                                 shift, and go to state 69
    TK_DINT_LIT                               shift, and go to state 80
    TK_XINT_LIT                               shift, and go to state 81
    TK_FLOAT_LIT                              shift, and go to state 82
    TK_DQSTRING_LIT                           shift, and go to state 27
    TK_SQSTRING_LIT                           shift, and go to state 28
    "'('"                                     shift, and go to state 83
    "'{'"                                     shift, and go to state 84
    "'*'"                                     shift, and go to state 126
    "'+'"                                     shift, and go to state 127
    "'-'"                                     shift, and go to state 128
    "'^'"                                     shift, and go to state 129

    tid              go to state 70
    vid              go to state 85
    floatl           go to state 86
    stringl          go to state 87
    unit             go to state 88
    parenExpr        go to state 89
    primaryExpr      go to state 90
    vparen           go to state 91
    vtuple           go to state 92
    vstruct          go to state 93
    ifThenElse       go to state 94
    chain            go to state 95
    vlambda          go to state 96
    postfixExpr      go to state 97
    vtcall           go to state 98
    vvcall           go to state 99
    dotNmExpr        go to state 100
    dotIxExpr        go to state 101
    colonNmExpr      go to state 102
    castExpr         go to state 132
    unaryExpr        go to state 133
    unaryOp          go to state 134
    mulBinaryExpr    go to state 136
    addBinaryExpr    go to state 137
    cmpBinaryExpr    go to state 138
    eqBinaryExpr     go to state 139
    andBinaryExpr    go to state 140
    xorBinaryExpr    go to state 234
    typespec         go to state 104
    primaryTypespec  go to state 72
    postfixTypespec  go to state 73


State 196

   11 letStmt: "'let'" lpattern • "'='" expr

    "'='"  shift, and go to state 235


State 197

   12 setStmt: "'set'" expr • "'='" expr

    "'='"  shift, and go to state 236


State 198

   61 chainPrefix: chainPrefixStmt "';'" •

    $default  reduce using rule 61 (chainPrefix)


State 199

  128 vstructField: vid "'='" • expr

    "a VID (ID with first letter lowercase)"  shift, and go to state 25
    "a TID (ID with first letter uppercase)"  shift, and go to state 31
    "'if'"                                    shift, and go to state 78
    "'fun'"                                   shift, and go to state 79
    "'not'"                                   shift, and go to state 125
    "'Tuple'"                                 shift, and go to state 68
    "'Array'"                                 shift, and go to state 69
    TK_DINT_LIT                               shift, and go to state 80
    TK_XINT_LIT                               shift, and go to state 81
    TK_FLOAT_LIT                              shift, and go to state 82
    TK_DQSTRING_LIT                           shift, and go to state 27
    TK_SQSTRING_LIT                           shift, and go to state 28
    "'('"                                     shift, and go to state 83
    "'{'"                                     shift, and go to state 84
    "'*'"                                     shift, and go to state 126
    "'+'"                                     shift, and go to state 127
    "'-'"                                     shift, and go to state 128
    "'^'"                                     shift, and go to state 129

    tid              go to state 70
    vid              go to state 85
    floatl           go to state 86
    stringl          go to state 87
    unit             go to state 88
    expr             go to state 237
    parenExpr        go to state 89
    primaryExpr      go to state 90
    vparen           go to state 91
    vtuple           go to state 92
    vstruct          go to state 93
    ifThenElse       go to state 94
    chain            go to state 95
    vlambda          go to state 96
    postfixExpr      go to state 97
    vtcall           go to state 98
    vvcall           go to state 99
    dotNmExpr        go to state 100
    dotIxExpr        go to state 101
    colonNmExpr      go to state 102
    castExpr         go to state 132
    unaryExpr        go to state 133
    unaryOp          go to state 134
    binaryExpr       go to state 135
    mulBinaryExpr    go to state 136
    addBinaryExpr    go to state 137
    cmpBinaryExpr    go to state 138
    eqBinaryExpr     go to state 139
    andBinaryExpr    go to state 140
    xorBinaryExpr    go to state 141
    orBinaryExpr     go to state 142
    typespec         go to state 104
    primaryTypespec  go to state 72
    postfixTypespec  go to state 73


State 200

   58 chain: "'{'" expr "'}'" •

    $default  reduce using rule 58 (chain)


State 201

   59 chain: "'{'" chainPrefix "'}'" •

    $default  reduce using rule 59 (chain)


State 202

   62 chainPrefix: chainPrefix chainPrefixStmt • "';'"

    "';'"  shift, and go to state 238


State 203

   13 discardStmt: expr •
   60 chain: "'{'" chainPrefix expr • "'}'"

    "'}'"  shift, and go to state 239

    $default  reduce using rule 13 (discardStmt)


State 204

  130 vstructField_cl: vstructField_cl "','" • vstructField

    "a VID (ID with first letter lowercase)"  shift, and go to state 25

    vid           go to state 160
    vstructField  go to state 240


State 205

   55 vstruct: "'{'" vstructField_cl "'}'" •

    $default  reduce using rule 55 (vstruct)


State 206

   73 dotNmExpr: postfixExpr "'.'" "a VID (ID with first letter lowercase)" •

    $default  reduce using rule 73 (dotNmExpr)


State 207

   74 dotIxExpr: postfixExpr "'.'" TK_DINT_LIT •

    $default  reduce using rule 74 (dotIxExpr)


State 208

   75 colonNmExpr: postfixExpr "':'" "a VID (ID with first letter lowercase)" •

    $default  reduce using rule 75 (colonNmExpr)


State 209

   71 vvcall: postfixExpr "'('" "')'" •

    $default  reduce using rule 71 (vvcall)


State 210

   36 expr_cl: expr •

    $default  reduce using rule 36 (expr_cl)


State 211

   37 expr_cl: expr_cl • "','" expr
   72 vvcall: postfixExpr "'('" expr_cl • "')'"

    "','"  shift, and go to state 241
    "')'"  shift, and go to state 242


State 212

  125 vtarg: expr •

    $default  reduce using rule 125 (vtarg)


State 213

   77 castExpr: typespec • parenExpr
  124 vtarg: typespec •

    "'fun'"  shift, and go to state 79
    "'('"    shift, and go to state 83
    "'{'"    shift, and go to state 84

    $default  reduce using rule 124 (vtarg)

    unit       go to state 88
    parenExpr  go to state 158
    vparen     go to state 91
    vtuple     go to state 92
    vstruct    go to state 93
    chain      go to state 95
    vlambda    go to state 96


State 214

  126 vtarg_cl: vtarg •

    $default  reduce using rule 126 (vtarg_cl)


State 215

   70 vtcall: postfixExpr "'['" vtarg_cl • "']'"
  127 vtarg_cl: vtarg_cl • "','" vtarg

    "','"  shift, and go to state 243
    "']'"  shift, and go to state 244


State 216

   26 linkStmtItem: vid vpattern "'->'" typespec "'from'" • stringl

    TK_DQSTRING_LIT  shift, and go to state 27
    TK_SQSTRING_LIT  shift, and go to state 28

    stringl  go to state 245


State 217

  113 typespec_cl: typespec_cl "','" • typespec

    "a TID (ID with first letter uppercase)"  shift, and go to state 31
    "'Tuple'"                                 shift, and go to state 68
    "'Array'"                                 shift, and go to state 69

    tid              go to state 70
    typespec         go to state 246
    primaryTypespec  go to state 72
    postfixTypespec  go to state 73


State 218

  115 primaryTypespec: "'Tuple'" "'['" typespec_cl "']'" •

    $default  reduce using rule 115 (primaryTypespec)


State 219

  116 primaryTypespec: "'Array'" "'['" typespec "','" • expr "']'"

    "a VID (ID with first letter lowercase)"  shift, and go to state 25
    "a TID (ID with first letter uppercase)"  shift, and go to state 31
    "'if'"                                    shift, and go to state 78
    "'fun'"                                   shift, and go to state 79
    "'not'"                                   shift, and go to state 125
    "'Tuple'"                                 shift, and go to state 68
    "'Array'"                                 shift, and go to state 69
    TK_DINT_LIT                               shift, and go to state 80
    TK_XINT_LIT                               shift, and go to state 81
    TK_FLOAT_LIT                              shift, and go to state 82
    TK_DQSTRING_LIT                           shift, and go to state 27
    TK_SQSTRING_LIT                           shift, and go to state 28
    "'('"                                     shift, and go to state 83
    "'{'"                                     shift, and go to state 84
    "'*'"                                     shift, and go to state 126
    "'+'"                                     shift, and go to state 127
    "'-'"                                     shift, and go to state 128
    "'^'"                                     shift, and go to state 129

    tid              go to state 70
    vid              go to state 85
    floatl           go to state 86
    stringl          go to state 87
    unit             go to state 88
    expr             go to state 247
    parenExpr        go to state 89
    primaryExpr      go to state 90
    vparen           go to state 91
    vtuple           go to state 92
    vstruct          go to state 93
    ifThenElse       go to state 94
    chain            go to state 95
    vlambda          go to state 96
    postfixExpr      go to state 97
    vtcall           go to state 98
    vvcall           go to state 99
    dotNmExpr        go to state 100
    dotIxExpr        go to state 101
    colonNmExpr      go to state 102
    castExpr         go to state 132
    unaryExpr        go to state 133
    unaryOp          go to state 134
    binaryExpr       go to state 135
    mulBinaryExpr    go to state 136
    addBinaryExpr    go to state 137
    cmpBinaryExpr    go to state 138
    eqBinaryExpr     go to state 139
    andBinaryExpr    go to state 140
    xorBinaryExpr    go to state 141
    orBinaryExpr     go to state 142
    typespec         go to state 104
    primaryTypespec  go to state 72
    postfixTypespec  go to state 73


State 220

  123 ttarg_cl: ttarg_cl "','" • ttarg

    "a VID (ID with first letter lowercase)"  shift, and go to state 25
    "a TID (ID with first letter uppercase)"  shift, and go to state 31
    "'if'"                                    shift, and go to state 78
    "'fun'"                                   shift, and go to state 79
    "'not'"                                   shift, and go to state 125
    "'Tuple'"                                 shift, and go to state 68
    "'Array'"                                 shift, and go to state 69
    TK_DINT_LIT                               shift, and go to state 80
    TK_XINT_LIT                               shift, and go to state 81
    TK_FLOAT_LIT                              shift, and go to state 82
    TK_DQSTRING_LIT                           shift, and go to state 27
    TK_SQSTRING_LIT                           shift, and go to state 28
    "'('"                                     shift, and go to state 83
    "'{'"                                     shift, and go to state 84
    "'*'"                                     shift, and go to state 126
    "'+'"                                     shift, and go to state 127
    "'-'"                                     shift, and go to state 128
    "'^'"                                     shift, and go to state 129

    tid              go to state 70
    vid              go to state 85
    floatl           go to state 86
    stringl          go to state 87
    unit             go to state 88
    expr             go to state 165
    parenExpr        go to state 89
    primaryExpr      go to state 90
    vparen           go to state 91
    vtuple           go to state 92
    vstruct          go to state 93
    ifThenElse       go to state 94
    chain            go to state 95
    vlambda          go to state 96
    postfixExpr      go to state 97
    vtcall           go to state 98
    vvcall           go to state 99
    dotNmExpr        go to state 100
    dotIxExpr        go to state 101
    colonNmExpr      go to state 102
    castExpr         go to state 132
    unaryExpr        go to state 133
    unaryOp          go to state 134
    binaryExpr       go to state 135
    mulBinaryExpr    go to state 136
    addBinaryExpr    go to state 137
    cmpBinaryExpr    go to state 138
    eqBinaryExpr     go to state 139
    andBinaryExpr    go to state 140
    xorBinaryExpr    go to state 141
    orBinaryExpr     go to state 142
    typespec         go to state 166
    primaryTypespec  go to state 72
    postfixTypespec  go to state 73
    ttarg            go to state 248


State 221

  118 postfixTypespec: postfixTypespec "'['" ttarg_cl "']'" •

    $default  reduce using rule 118 (postfixTypespec)


State 222

   56 ifThenElse: "'if'" parenExpr "'then'" parenExpr •
   57           | "'if'" parenExpr "'then'" parenExpr • "'else'" primaryExpr

    "'else'"  shift, and go to state 249

    $default  reduce using rule 56 (ifThenElse)


State 223

  145 lpatternField_cl: lpatternField_cl "','" • lpatternField

    "a VID (ID with first letter lowercase)"  shift, and go to state 25

    vid            go to state 120
    vpatternField  go to state 122
    lpatternField  go to state 250


State 224

  137 lpattern: "'('" lpatternField_cl "')'" •

    $default  reduce using rule 137 (lpattern)


State 225

   63 vlambda: "'fun'" lpattern "'->'" parenExpr •

    $default  reduce using rule 63 (vlambda)


State 226

   38 expr_cl2: expr "','" expr •

    $default  reduce using rule 38 (expr_cl2)


State 227

   39 expr_cl2: expr_cl2 "','" expr •

    $default  reduce using rule 39 (expr_cl2)


State 228

   90 mulBinaryExpr: mulBinaryExpr mulBinaryOp unaryExpr •

    $default  reduce using rule 90 (mulBinaryExpr)


State 229

   90 mulBinaryExpr: mulBinaryExpr • mulBinaryOp unaryExpr
   94 addBinaryExpr: addBinaryExpr addBinaryOp mulBinaryExpr •

    "'*'"  shift, and go to state 178
    "'/'"  shift, and go to state 179
    "'%'"  shift, and go to state 180

    $default  reduce using rule 94 (addBinaryExpr)

    mulBinaryOp  go to state 181


State 230

   94 addBinaryExpr: addBinaryExpr • addBinaryOp mulBinaryExpr
  100 cmpBinaryExpr: cmpBinaryExpr cmpBinaryOp addBinaryExpr •

    "'+'"  shift, and go to state 182
    "'-'"  shift, and go to state 183

    $default  reduce using rule 100 (cmpBinaryExpr)

    addBinaryOp  go to state 184


State 231

  100 cmpBinaryExpr: cmpBinaryExpr • cmpBinaryOp addBinaryExpr
  104 eqBinaryExpr: eqBinaryExpr eqBinaryOp cmpBinaryExpr •

    "'<'"   shift, and go to state 185
    "'<='"  shift, and go to state 186
    "'>'"   shift, and go to state 187
    "'>='"  shift, and go to state 188

    $default  reduce using rule 104 (eqBinaryExpr)

    cmpBinaryOp  go to state 189


State 232

  104 eqBinaryExpr: eqBinaryExpr • eqBinaryOp cmpBinaryExpr
  106 andBinaryExpr: andBinaryExpr "'and'" eqBinaryExpr •

    "'=='"  shift, and go to state 190
    "'!='"  shift, and go to state 191

    $default  reduce using rule 106 (andBinaryExpr)

    eqBinaryOp  go to state 192


State 233

  106 andBinaryExpr: andBinaryExpr • "'and'" eqBinaryExpr
  108 xorBinaryExpr: xorBinaryExpr "'xor'" andBinaryExpr •

    "'and'"  shift, and go to state 193

    $default  reduce using rule 108 (xorBinaryExpr)


State 234

  108 xorBinaryExpr: xorBinaryExpr • "'xor'" andBinaryExpr
  110 orBinaryExpr: orBinaryExpr "'or'" xorBinaryExpr •

    "'xor'"  shift, and go to state 194

    $default  reduce using rule 110 (orBinaryExpr)


State 235

   11 letStmt: "'let'" lpattern "'='" • expr

    "a VID (ID with first letter lowercase)"  shift, and go to state 25
    "a TID (ID with first letter uppercase)"  shift, and go to state 31
    "'if'"                                    shift, and go to state 78
    "'fun'"                                   shift, and go to state 79
    "'not'"                                   shift, and go to state 125
    "'Tuple'"                                 shift, and go to state 68
    "'Array'"                                 shift, and go to state 69
    TK_DINT_LIT                               shift, and go to state 80
    TK_XINT_LIT                               shift, and go to state 81
    TK_FLOAT_LIT                              shift, and go to state 82
    TK_DQSTRING_LIT                           shift, and go to state 27
    TK_SQSTRING_LIT                           shift, and go to state 28
    "'('"                                     shift, and go to state 83
    "'{'"                                     shift, and go to state 84
    "'*'"                                     shift, and go to state 126
    "'+'"                                     shift, and go to state 127
    "'-'"                                     shift, and go to state 128
    "'^'"                                     shift, and go to state 129

    tid              go to state 70
    vid              go to state 85
    floatl           go to state 86
    stringl          go to state 87
    unit             go to state 88
    expr             go to state 251
    parenExpr        go to state 89
    primaryExpr      go to state 90
    vparen           go to state 91
    vtuple           go to state 92
    vstruct          go to state 93
    ifThenElse       go to state 94
    chain            go to state 95
    vlambda          go to state 96
    postfixExpr      go to state 97
    vtcall           go to state 98
    vvcall           go to state 99
    dotNmExpr        go to state 100
    dotIxExpr        go to state 101
    colonNmExpr      go to state 102
    castExpr         go to state 132
    unaryExpr        go to state 133
    unaryOp          go to state 134
    binaryExpr       go to state 135
    mulBinaryExpr    go to state 136
    addBinaryExpr    go to state 137
    cmpBinaryExpr    go to state 138
    eqBinaryExpr     go to state 139
    andBinaryExpr    go to state 140
    xorBinaryExpr    go to state 141
    orBinaryExpr     go to state 142
    typespec         go to state 104
    primaryTypespec  go to state 72
    postfixTypespec  go to state 73


State 236

   12 setStmt: "'set'" expr "'='" • expr

    "a VID (ID with first letter lowercase)"  shift, and go to state 25
    "a TID (ID with first letter uppercase)"  shift, and go to state 31
    "'if'"                                    shift, and go to state 78
    "'fun'"                                   shift, and go to state 79
    "'not'"                                   shift, and go to state 125
    "'Tuple'"                                 shift, and go to state 68
    "'Array'"                                 shift, and go to state 69
    TK_DINT_LIT                               shift, and go to state 80
    TK_XINT_LIT                               shift, and go to state 81
    TK_FLOAT_LIT                              shift, and go to state 82
    TK_DQSTRING_LIT                           shift, and go to state 27
    TK_SQSTRING_LIT                           shift, and go to state 28
    "'('"                                     shift, and go to state 83
    "'{'"                                     shift, and go to state 84
    "'*'"                                     shift, and go to state 126
    "'+'"                                     shift, and go to state 127
    "'-'"                                     shift, and go to state 128
    "'^'"                                     shift, and go to state 129

    tid              go to state 70
    vid              go to state 85
    floatl           go to state 86
    stringl          go to state 87
    unit             go to state 88
    expr             go to state 252
    parenExpr        go to state 89
    primaryExpr      go to state 90
    vparen           go to state 91
    vtuple           go to state 92
    vstruct          go to state 93
    ifThenElse       go to state 94
    chain            go to state 95
    vlambda          go to state 96
    postfixExpr      go to state 97
    vtcall           go to state 98
    vvcall           go to state 99
    dotNmExpr        go to state 100
    dotIxExpr        go to state 101
    colonNmExpr      go to state 102
    castExpr         go to state 132
    unaryExpr        go to state 133
    unaryOp          go to state 134
    binaryExpr       go to state 135
    mulBinaryExpr    go to state 136
    addBinaryExpr    go to state 137
    cmpBinaryExpr    go to state 138
    eqBinaryExpr     go to state 139
    andBinaryExpr    go to state 140
    xorBinaryExpr    go to state 141
    orBinaryExpr     go to state 142
    typespec         go to state 104
    primaryTypespec  go to state 72
    postfixTypespec  go to state 73


State 237

  128 vstructField: vid "'='" expr •

    $default  reduce using rule 128 (vstructField)


State 238

   62 chainPrefix: chainPrefix chainPrefixStmt "';'" •

    $default  reduce using rule 62 (chainPrefix)


State 239

   60 chain: "'{'" chainPrefix expr "'}'" •

    $default  reduce using rule 60 (chain)


State 240

  130 vstructField_cl: vstructField_cl "','" vstructField •

    $default  reduce using rule 130 (vstructField_cl)


State 241

   37 expr_cl: expr_cl "','" • expr

    "a VID (ID with first letter lowercase)"  shift, and go to state 25
    "a TID (ID with first letter uppercase)"  shift, and go to state 31
    "'if'"                                    shift, and go to state 78
    "'fun'"                                   shift, and go to state 79
    "'not'"                                   shift, and go to state 125
    "'Tuple'"                                 shift, and go to state 68
    "'Array'"                                 shift, and go to state 69
    TK_DINT_LIT                               shift, and go to state 80
    TK_XINT_LIT                               shift, and go to state 81
    TK_FLOAT_LIT                              shift, and go to state 82
    TK_DQSTRING_LIT                           shift, and go to state 27
    TK_SQSTRING_LIT                           shift, and go to state 28
    "'('"                                     shift, and go to state 83
    "'{'"                                     shift, and go to state 84
    "'*'"                                     shift, and go to state 126
    "'+'"                                     shift, and go to state 127
    "'-'"                                     shift, and go to state 128
    "'^'"                                     shift, and go to state 129

    tid              go to state 70
    vid              go to state 85
    floatl           go to state 86
    stringl          go to state 87
    unit             go to state 88
    expr             go to state 253
    parenExpr        go to state 89
    primaryExpr      go to state 90
    vparen           go to state 91
    vtuple           go to state 92
    vstruct          go to state 93
    ifThenElse       go to state 94
    chain            go to state 95
    vlambda          go to state 96
    postfixExpr      go to state 97
    vtcall           go to state 98
    vvcall           go to state 99
    dotNmExpr        go to state 100
    dotIxExpr        go to state 101
    colonNmExpr      go to state 102
    castExpr         go to state 132
    unaryExpr        go to state 133
    unaryOp          go to state 134
    binaryExpr       go to state 135
    mulBinaryExpr    go to state 136
    addBinaryExpr    go to state 137
    cmpBinaryExpr    go to state 138
    eqBinaryExpr     go to state 139
    andBinaryExpr    go to state 140
    xorBinaryExpr    go to state 141
    orBinaryExpr     go to state 142
    typespec         go to state 104
    primaryTypespec  go to state 72
    postfixTypespec  go to state 73


State 242

   72 vvcall: postfixExpr "'('" expr_cl "')'" •

    $default  reduce using rule 72 (vvcall)


State 243

  127 vtarg_cl: vtarg_cl "','" • vtarg

    "a VID (ID with first letter lowercase)"  shift, and go to state 25
    "a TID (ID with first letter uppercase)"  shift, and go to state 31
    "'if'"                                    shift, and go to state 78
    "'fun'"                                   shift, and go to state 79
    "'not'"                                   shift, and go to state 125
    "'Tuple'"                                 shift, and go to state 68
    "'Array'"                                 shift, and go to state 69
    TK_DINT_LIT                               shift, and go to state 80
    TK_XINT_LIT                               shift, and go to state 81
    TK_FLOAT_LIT                              shift, and go to state 82
    TK_DQSTRING_LIT                           shift, and go to state 27
    TK_SQSTRING_LIT                           shift, and go to state 28
    "'('"                                     shift, and go to state 83
    "'{'"                                     shift, and go to state 84
    "'*'"                                     shift, and go to state 126
    "'+'"                                     shift, and go to state 127
    "'-'"                                     shift, and go to state 128
    "'^'"                                     shift, and go to state 129

    tid              go to state 70
    vid              go to state 85
    floatl           go to state 86
    stringl          go to state 87
    unit             go to state 88
    expr             go to state 212
    parenExpr        go to state 89
    primaryExpr      go to state 90
    vparen           go to state 91
    vtuple           go to state 92
    vstruct          go to state 93
    ifThenElse       go to state 94
    chain            go to state 95
    vlambda          go to state 96
    postfixExpr      go to state 97
    vtcall           go to state 98
    vvcall           go to state 99
    dotNmExpr        go to state 100
    dotIxExpr        go to state 101
    colonNmExpr      go to state 102
    castExpr         go to state 132
    unaryExpr        go to state 133
    unaryOp          go to state 134
    binaryExpr       go to state 135
    mulBinaryExpr    go to state 136
    addBinaryExpr    go to state 137
    cmpBinaryExpr    go to state 138
    eqBinaryExpr     go to state 139
    andBinaryExpr    go to state 140
    xorBinaryExpr    go to state 141
    orBinaryExpr     go to state 142
    typespec         go to state 213
    primaryTypespec  go to state 72
    postfixTypespec  go to state 73
    vtarg            go to state 254


State 244

   70 vtcall: postfixExpr "'['" vtarg_cl "']'" •

    $default  reduce using rule 70 (vtcall)


State 245

   26 linkStmtItem: vid vpattern "'->'" typespec "'from'" stringl •

    $default  reduce using rule 26 (linkStmtItem)


State 246

  113 typespec_cl: typespec_cl "','" typespec •

    $default  reduce using rule 113 (typespec_cl)


State 247

  116 primaryTypespec: "'Array'" "'['" typespec "','" expr • "']'"

    "']'"  shift, and go to state 255


State 248

  123 ttarg_cl: ttarg_cl "','" ttarg •

    $default  reduce using rule 123 (ttarg_cl)


State 249

   57 ifThenElse: "'if'" parenExpr "'then'" parenExpr "'else'" • primaryExpr

    "a VID (ID with first letter lowercase)"  shift, and go to state 25
    "'if'"                                    shift, and go to state 78
    "'fun'"                                   shift, and go to state 79
    TK_DINT_LIT                               shift, and go to state 80
    TK_XINT_LIT                               shift, and go to state 81
    TK_FLOAT_LIT                              shift, and go to state 82
    TK_DQSTRING_LIT                           shift, and go to state 27
    TK_SQSTRING_LIT                           shift, and go to state 28
    "'('"                                     shift, and go to state 83
    "'{'"                                     shift, and go to state 84

    vid          go to state 85
    floatl       go to state 86
    stringl      go to state 87
    unit         go to state 88
    parenExpr    go to state 89
    primaryExpr  go to state 256
    vparen       go to state 91
    vtuple       go to state 92
    vstruct      go to state 93
    ifThenElse   go to state 94
    chain        go to state 95
    vlambda      go to state 96


State 250

  145 lpatternField_cl: lpatternField_cl "','" lpatternField •

    $default  reduce using rule 145 (lpatternField_cl)


State 251

   11 letStmt: "'let'" lpattern "'='" expr •

    $default  reduce using rule 11 (letStmt)


State 252

   12 setStmt: "'set'" expr "'='" expr •

    $default  reduce using rule 12 (setStmt)


State 253

   37 expr_cl: expr_cl "','" expr •

    $default  reduce using rule 37 (expr_cl)


State 254

  127 vtarg_cl: vtarg_cl "','" vtarg •

    $default  reduce using rule 127 (vtarg_cl)


State 255

  116 primaryTypespec: "'Array'" "'['" typespec "','" expr "']'" •

    $default  reduce using rule 116 (primaryTypespec)


State 256

   57 ifThenElse: "'if'" parenExpr "'then'" parenExpr "'else'" primaryExpr •

    $default  reduce using rule 57 (ifThenElse)
