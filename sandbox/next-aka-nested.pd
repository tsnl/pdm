mod next {
    mod ll_base {
        LL_NODE = cls [NodeType STRUCT] {
            NodeType :< {
                index UInt32,
                value UInt32
            };
        };
        NodeAllocator = {
            allocator fn () -> UInt32
        };
    };

    mod linked_list [Node ll_base::LL_NODE, impl NodeImpl] {
        LL_NODE = cls [NodeType ll_base::LL_NODE] {
        };

        add = fn (node1 Node, node2 Node) -> Node {
            index: implex.allocator(size[Node]::size),
            value: node1.value + node2.value
        };

        hello = 24;
    };

    mod testing {
        Rectangle = {Int32,Int32};

        rectangle = fn (dim Rectangle) -> Rectangle {
            x * x
        };
    };
};
