extern def malloc (size U64) -> U8^;
extern def puts (s String) -> U32;

extern def print_string (s String) -> Unit;
extern def print_s32 (s S32) -> Unit;
extern def println () -> Unit;

def fib (n S32) -> S32 {
    if (n == 0) then {
        0
    } else {
        if (n == 1) then {
            1
        } else {
            fib(n-1) + fib(n-2)
        }
    }
};

def print_fibonacci_table_until (n S32, ascend_not_descend U1) -> Unit {
    let result S32 = fib(n);
    do if (n != 0) then {
        # if printing in ascending order, then print all prior fibonaccis
        # before fib(n):
        do if (ascend_not_descend) then {
            do print_fibonacci_table_until(n-1, U1(1));
        };

        # printing fib(n) on one line
        do print_string("fibonacci(\0");
        do print_s32(n);
        do print_string(") = \0");
        do print_s32(fib(n));
        do println();

        # if printing in descending order, then pring all prior fibonaccis
        # after fib(n)
        do if (not ascend_not_descend) then {
            do print_fibonacci_table_until(n-1, U1(0));
        };
    };
};



def main () -> S32 {
    let n S32 = 40;
    do print_string("FIBONACCI PRINTER until \0");
    do print_s32(n);
    do println();

    do print_fibonacci_table_until(n, U1(1));
    0
};