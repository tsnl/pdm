# delight cannot be unopinionated

# add reference counting, 'mut' semantics:
# - ^T for immutable ptr
# - &T for mutable ptr
# - gc.Buf[T] always RCed from fixed GC heap
#   - collection triggers 
# replace ':' operator with '.'
# - restore ':' for struct initializers
# add mandatory return type for 'fn' stmt 

mod demo {

    showoff = () -> Float32 {
        val vec1 = vec::new_2f(0,0);
        val vec2 = vec::new_2f(1,2);
        val vec1_length = vec::length_sqr(vec1);
        val vec2_length = vec::length_sqr(vec2);
        val dot = vec.dot(vec1, vec2);
        val sum = vec.add(vec1, vec2);

        val p = printer.new_with(gc.alloc);
        print.str(p, "{dot: \(dot), sum: \(sum)}");
    };

};

mod lin_alg {

    Vec2f = {
        x Float32,
        y Float32
    };

    Norm = Vec2f -> Float32;

    new_2f = (x Float32, y Float32) -> Vec2f {
        x: x, 
        y: y
    };

    mul = (s Float32, v Vec2f) -> Vec2f {
        x: s * v.x,
        y: s * v.y
    };

    add = (v Vec2f, w Vec2f) -> Vec2f {
        x: v.x + w.x, 
        y: v.y + w.y
    };

    dot = (v Vec2f, w Vec2f) -> Float32 {
        v.x * w.x + 
        v.y * w.y
    };

    length_sqr = (v Vec2f) -> Float32 {
        dot(v,v)
    };

    subtract = (v Vec2f, w Vec2f) -> Float32 {
        vec.add(mul(w,-1))
    };

};