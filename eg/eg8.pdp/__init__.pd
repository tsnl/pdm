
# PACKAGES:
# a package is a directory that...
# 1. has a name with the '.pdmpkg' extension, AND
# 2. contains a file called '__init__.pdm'

# From code, this file is a proxy for the whole package, but PDM guarantees a package's contents are
# always kept intact.
# This lets you bundle assets, other source code, etc. from within your project directory tree.
# Furthermore, it helps ensure that all code is always built from scratch.

# 'sdl' is built using the -whole-archive flag as an independent object/linkable unit.
# any linked declarations must be declared in (and thus parsed from) headers; thus, headers are the only
# non-optional field for type "c".
# see https://shaharmike.com/cpp/libclang/ for how to parse C/C++ headers and source with libclang.
extern csdl from {
    lang: "c",
    headers: [
        "./include/SDL.h"
    ],
    header_dirs: [
        "./include/"
    ],
    sources: [],
    static_libs: [
        "./dep/lib/SDL2/SDL2_main.lib",
        "./dep/lib/SDL2/SDL2.lib"
    ],
    copy_to_output: [
        "./dep/bin/SDL2.dll"
    ],
};

# language-based bindings can then be provided by linking against this external module.
# note that templates can be used, and that multiple symbols can link against the same definition using
# type translation (T const* -> T, T const -> T, etc...)
mod sdl {
    fn init(flags I32) -> I32
    from csdl "SDL_Init";

    type Event from csdl "SDL_Event";
};