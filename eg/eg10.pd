# proposed builtin typeclasses:
# - Int(S|U) \__ Number__
# - Float    /
# - Number
# - Struct
# - Tuple
# ...etc
# instead of vague 'Any'

mod vector [Type Number, n UInt32] {

    Vec = {
        # array syntax:
        data [Type/n]
    };

    increment = (inout lt Vec, rt Vec) -> Void {
        assert len(lt) == len(rt);
        help_increment(inout lt, rt, len(lt));
    };
    help_increment = (inout lt Vec, rt Vec) -> Void {
        # for this to work, need Array subtyping to work correctly
        # s.t. Array[T,n] :< Array[T,m] <=> n < m
        if (n > 0) then {
            set lt.data.(n-1) = lt.data.(n-1) + rt.data.(n-1);
            vector[Type,n-1]::help_increment(inout lt, rt)
        };
    };

    add = (lt Vec, rt Vec) -> Vec {
        var sum_vec = lt;
        increment(inout sum_vec, rt);
        sum_vec
    };

    hello = () -> Void  {
        val x = 0;
    };

};

mod fibonacci {

    demo = () -> Int32 {
        0
    };

};

# Note: 
# _can_ pass 'inout' param to 'out' pattern without error, but using 'out' spec.
# thus, out[T] :< inout[T] (and in[T] :< inout[T])
# i.e.

mod inOutAndEverybout {

    hello_out = (out x F32) -> Void {
        set x = 42.0;
    };
    hello_inout = (inout x F32) -> Void {
        # 'out' from 'hello_out' defn, not from vpattern decl.
        hello_out(out x);
    };

};
