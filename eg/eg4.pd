# Waterfall modules

# The final component to a robust object system is a good namespace management system 
# to precisely import overloads, classes, and other useful symbols.

# Since selective imports risk breaking a type's class membership, we
# must import all symbols in a module into an ENCAPSULATED NAMESPACE.

# The 'import' statement declaratively loads a module for access by a fixed VID name.
# - the arg expressions can be const stored elsewhere; e.g. const t = "file/fs"; import t from "./a.pdm" type t
# Libraries are 'installed' to the filesystem to build to, though in the future, it may
# be possible to specify libraries via git/hg URI which the compiler will automatically
# install and cache.

import "basic.pd" as "pd-script";
import "basic.pd" as "pd-script";
import "eg3.pd" as "pd-script";

mod vehicle {

    Car = {
        name Text,
        price Int32
    };
    new = (name Text, price Int32) -> Car {
        (name, price)
    };

}

mod level1 {

    mod damage {

        StringDict = dict[string,Int32]

        wearAndTear = (inout car eg3::Car, delta_sec Float32) -> Void {
            val fancyScoreDamagePerSec = 1.2;
            set car.fancyScore = car.fancyScore - convert[UInt32]::from(fancyScoreDamagePerSec * delta_sec);
        };
    };

}
